
DSPtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fe8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  080071e8  080071e8  000171e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007634  08007634  000211e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007634  08007634  00017634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800763c  0800763c  000211e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800763c  0800763c  0001763c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007640  08007640  00017640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000011e0  20000000  08007644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002760  200011e0  08008824  000211e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003940  08008824  00023940  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000211e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cec  00000000  00000000  0002120e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b2  00000000  00000000  00036efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0003a2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00005cf5  00000000  00000000  0003af48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010574  00000000  00000000  00040c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000feefc  00000000  00000000  000511b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001500ad  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000b48  00000000  00000000  00150100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000412c  00000000  00000000  00150c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200011e0 	.word	0x200011e0
 800021c:	00000000 	.word	0x00000000
 8000220:	080071d0 	.word	0x080071d0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200011e4 	.word	0x200011e4
 800023c:	080071d0 	.word	0x080071d0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80005f0:	1d39      	adds	r1, r7, #4
 80005f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005f6:	2201      	movs	r2, #1
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <__io_putchar+0x20>)
 80005fa:	f003 f883 	bl	8003704 <HAL_UART_Transmit>

  return ch;
 80005fe:	687b      	ldr	r3, [r7, #4]
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	2000345c 	.word	0x2000345c

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b092      	sub	sp, #72	; 0x48
 8000610:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f001 fa7b 	bl	8001b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f885 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f977 	bl	800090c <MX_GPIO_Init>
  //MX_ETH_Init();
  MX_USART3_UART_Init();
 800061e:	f000 f917 	bl	8000850 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000622:	f000 f945 	bl	80008b0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  dt.raw = 0;
 8000626:	4b35      	ldr	r3, [pc, #212]	; (80006fc <main+0xf0>)
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
  uint32_t numBlocksfir = TEST_LENGTH_SAMPLES/BLOCK_SIZEfir;
 800062c:	2308      	movs	r3, #8
 800062e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t numBlocksiir = TEST_LENGTH_SAMPLES/BLOCK_SIZEiir;
 8000630:	2320      	movs	r3, #32
 8000632:	62fb      	str	r3, [r7, #44]	; 0x2c
  int16_t  *inputI16, *outputI16FIR;
  int16_t  *inputI32, *outputI32IIR;
  inputI16 = &testInput_i15_10khz[0];
 8000634:	4b32      	ldr	r3, [pc, #200]	; (8000700 <main+0xf4>)
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  inputI32 = &testInput_i15_10khz[0];
 8000638:	4b31      	ldr	r3, [pc, #196]	; (8000700 <main+0xf4>)
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
  outputI16FIR = &vetorOutputFIR[0];
 800063c:	4b31      	ldr	r3, [pc, #196]	; (8000704 <main+0xf8>)
 800063e:	623b      	str	r3, [r7, #32]
  outputI32IIR = &vetorOutputIIR[0];
 8000640:	4b31      	ldr	r3, [pc, #196]	; (8000708 <main+0xfc>)
 8000642:	61fb      	str	r3, [r7, #28]
  //float32_t maxValueReturn;

  arm_fir_instance_q15 S;
  arm_fir_init_q15(&S, NUM_TAPS, (int16_t *)&firCoeffsI16[0], &firStateI16[0], BLOCK_SIZEfir);
 8000644:	f107 0010 	add.w	r0, r7, #16
 8000648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	4b2f      	ldr	r3, [pc, #188]	; (800070c <main+0x100>)
 8000650:	4a2f      	ldr	r2, [pc, #188]	; (8000710 <main+0x104>)
 8000652:	2120      	movs	r1, #32
 8000654:	f001 fa30 	bl	8001ab8 <arm_fir_init_q15>

  arm_biquad_casd_df1_inst_q15 R;
  arm_biquad_cascade_df1_init_q15(&R, IIR_NUMSTAGES, (int16_t *)&iirCoeff[0], &iirStateI32[0], 0);
 8000658:	4638      	mov	r0, r7
 800065a:	2300      	movs	r3, #0
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <main+0x108>)
 8000660:	4a2d      	ldr	r2, [pc, #180]	; (8000718 <main+0x10c>)
 8000662:	2101      	movs	r1, #1
 8000664:	f000 fbe9 	bl	8000e3a <arm_biquad_cascade_df1_init_q15>
	  //maxFFTArm(&maxValueReturn);
	  //for(int i = 0; i < TEST_LENGTH_SAMPLES; i++){
	  //	  	sprintf(valor, "%d \n", (int16_t) testInput_i15_10khz[i]);
	  //	  	printf(valor);
	  //}
	  for(int i=0; i < numBlocksfir; i++)
 8000668:	2300      	movs	r3, #0
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800066c:	e010      	b.n	8000690 <main+0x84>
	  {
		  arm_fir_fast_q15(&S, inputI16 + (i * BLOCK_SIZEfir), outputI16FIR + (i * BLOCK_SIZEfir), BLOCK_SIZEfir);
 800066e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000670:	025b      	lsls	r3, r3, #9
 8000672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000674:	18d1      	adds	r1, r2, r3
 8000676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000678:	025b      	lsls	r3, r3, #9
 800067a:	6a3a      	ldr	r2, [r7, #32]
 800067c:	441a      	add	r2, r3
 800067e:	f107 0010 	add.w	r0, r7, #16
 8000682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000686:	f000 fe8f 	bl	80013a8 <arm_fir_fast_q15>
	  for(int i=0; i < numBlocksfir; i++)
 800068a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800068c:	3301      	adds	r3, #1
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000694:	429a      	cmp	r2, r3
 8000696:	d8ea      	bhi.n	800066e <main+0x62>
	  }
	  for(int i=0; i < numBlocksiir; i++)
 8000698:	2300      	movs	r3, #0
 800069a:	63bb      	str	r3, [r7, #56]	; 0x38
 800069c:	e00e      	b.n	80006bc <main+0xb0>
	  {
		  arm_biquad_cascade_df1_q15(&R, inputI32 + (i * BLOCK_SIZEiir), outputI32IIR + (i * BLOCK_SIZEiir), BLOCK_SIZEiir);
 800069e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006a0:	01db      	lsls	r3, r3, #7
 80006a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006a4:	18d1      	adds	r1, r2, r3
 80006a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006a8:	01db      	lsls	r3, r3, #7
 80006aa:	69fa      	ldr	r2, [r7, #28]
 80006ac:	441a      	add	r2, r3
 80006ae:	4638      	mov	r0, r7
 80006b0:	2340      	movs	r3, #64	; 0x40
 80006b2:	f000 fbe2 	bl	8000e7a <arm_biquad_cascade_df1_q15>
	  for(int i=0; i < numBlocksiir; i++)
 80006b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006b8:	3301      	adds	r3, #1
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80006bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d8ec      	bhi.n	800069e <main+0x92>
	  }

	  for(int i = 0; i < TEST_LENGTH_SAMPLES; i++){
 80006c4:	2300      	movs	r3, #0
 80006c6:	637b      	str	r3, [r7, #52]	; 0x34
 80006c8:	e013      	b.n	80006f2 <main+0xe6>
	  	//sprintf(valor, "%ld %ld \n", (int16_t) vetorOutputIIR[i], (int16_t) testInput_i15_10khz[i]);
	  	sprintf(valor, "%d %d \n", vetorOutputIIR[i], testInput_i15_10khz[i]);
 80006ca:	4a0f      	ldr	r2, [pc, #60]	; (8000708 <main+0xfc>)
 80006cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80006d2:	4619      	mov	r1, r3
 80006d4:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <main+0xf4>)
 80006d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006d8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80006dc:	460a      	mov	r2, r1
 80006de:	490f      	ldr	r1, [pc, #60]	; (800071c <main+0x110>)
 80006e0:	480f      	ldr	r0, [pc, #60]	; (8000720 <main+0x114>)
 80006e2:	f004 fbb3 	bl	8004e4c <siprintf>
	  	printf(valor);
 80006e6:	480e      	ldr	r0, [pc, #56]	; (8000720 <main+0x114>)
 80006e8:	f004 fb98 	bl	8004e1c <iprintf>
	  for(int i = 0; i < TEST_LENGTH_SAMPLES; i++){
 80006ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ee:	3301      	adds	r3, #1
 80006f0:	637b      	str	r3, [r7, #52]	; 0x34
 80006f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006f8:	dbe7      	blt.n	80006ca <main+0xbe>
	  for(int i=0; i < numBlocksfir; i++)
 80006fa:	e7b5      	b.n	8000668 <main+0x5c>
 80006fc:	20001000 	.word	0x20001000
 8000700:	20000000 	.word	0x20000000
 8000704:	20001450 	.word	0x20001450
 8000708:	20002450 	.word	0x20002450
 800070c:	200011fc 	.word	0x200011fc
 8000710:	080071f0 	.word	0x080071f0
 8000714:	2000143c 	.word	0x2000143c
 8000718:	08007230 	.word	0x08007230
 800071c:	080071e8 	.word	0x080071e8
 8000720:	20001444 	.word	0x20001444

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b0b8      	sub	sp, #224	; 0xe0
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800072e:	2234      	movs	r2, #52	; 0x34
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f003 ff26 	bl	8004584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2290      	movs	r2, #144	; 0x90
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f003 ff17 	bl	8004584 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000756:	f001 fe4f 	bl	80023f8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	4b3a      	ldr	r3, [pc, #232]	; (8000844 <SystemClock_Config+0x120>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	4a39      	ldr	r2, [pc, #228]	; (8000844 <SystemClock_Config+0x120>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000764:	6413      	str	r3, [r2, #64]	; 0x40
 8000766:	4b37      	ldr	r3, [pc, #220]	; (8000844 <SystemClock_Config+0x120>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000772:	4b35      	ldr	r3, [pc, #212]	; (8000848 <SystemClock_Config+0x124>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a34      	ldr	r2, [pc, #208]	; (8000848 <SystemClock_Config+0x124>)
 8000778:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800077c:	6013      	str	r3, [r2, #0]
 800077e:	4b32      	ldr	r3, [pc, #200]	; (8000848 <SystemClock_Config+0x124>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078a:	2301      	movs	r3, #1
 800078c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000790:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000794:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000798:	2302      	movs	r3, #2
 800079a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a6:	2304      	movs	r3, #4
 80007a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007ac:	23d8      	movs	r3, #216	; 0xd8
 80007ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007b8:	2309      	movs	r3, #9
 80007ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 fe78 	bl	80024b8 <HAL_RCC_OscConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007ce:	f000 f93f 	bl	8000a50 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007d2:	f001 fe21 	bl	8002418 <HAL_PWREx_EnableOverDrive>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80007dc:	f000 f938 	bl	8000a50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e6:	2302      	movs	r3, #2
 80007e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000802:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000806:	2107      	movs	r1, #7
 8000808:	4618      	mov	r0, r3
 800080a:	f002 f903 	bl	8002a14 <HAL_RCC_ClockConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000814:	f000 f91c 	bl	8000a50 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <SystemClock_Config+0x128>)
 800081a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800081c:	2300      	movs	r3, #0
 800081e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000820:	2300      	movs	r3, #0
 8000822:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	4618      	mov	r0, r3
 800082c:	f002 faf4 	bl	8002e18 <HAL_RCCEx_PeriphCLKConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000836:	f000 f90b 	bl	8000a50 <Error_Handler>
  }
}
 800083a:	bf00      	nop
 800083c:	37e0      	adds	r7, #224	; 0xe0
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000
 800084c:	00200100 	.word	0x00200100

08000850 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 8000856:	4a15      	ldr	r2, [pc, #84]	; (80008ac <MX_USART3_UART_Init+0x5c>)
 8000858:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 8000894:	f002 fee8 	bl	8003668 <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800089e:	f000 f8d7 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2000345c 	.word	0x2000345c
 80008ac:	40004800 	.word	0x40004800

080008b0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008be:	2206      	movs	r2, #6
 80008c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c4:	2202      	movs	r2, #2
 80008c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d0:	2202      	movs	r2, #2
 80008d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f4:	f001 fc37 	bl	8002166 <HAL_PCD_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008fe:	f000 f8a7 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200034e0 	.word	0x200034e0

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	; 0x30
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	4b46      	ldr	r3, [pc, #280]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a45      	ldr	r2, [pc, #276]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b43      	ldr	r3, [pc, #268]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	61bb      	str	r3, [r7, #24]
 8000938:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	4b40      	ldr	r3, [pc, #256]	; (8000a3c <MX_GPIO_Init+0x130>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a3f      	ldr	r2, [pc, #252]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b3d      	ldr	r3, [pc, #244]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	4b3a      	ldr	r3, [pc, #232]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a39      	ldr	r2, [pc, #228]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b37      	ldr	r3, [pc, #220]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	4b34      	ldr	r3, [pc, #208]	; (8000a3c <MX_GPIO_Init+0x130>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a33      	ldr	r2, [pc, #204]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b31      	ldr	r3, [pc, #196]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000982:	4b2e      	ldr	r3, [pc, #184]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a2d      	ldr	r2, [pc, #180]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000988:	f043 0308 	orr.w	r3, r3, #8
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b2b      	ldr	r3, [pc, #172]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0308 	and.w	r3, r3, #8
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800099a:	4b28      	ldr	r3, [pc, #160]	; (8000a3c <MX_GPIO_Init+0x130>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a27      	ldr	r2, [pc, #156]	; (8000a3c <MX_GPIO_Init+0x130>)
 80009a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <MX_GPIO_Init+0x130>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009b8:	4821      	ldr	r0, [pc, #132]	; (8000a40 <MX_GPIO_Init+0x134>)
 80009ba:	f001 fbbb 	bl	8002134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2140      	movs	r1, #64	; 0x40
 80009c2:	4820      	ldr	r0, [pc, #128]	; (8000a44 <MX_GPIO_Init+0x138>)
 80009c4:	f001 fbb6 	bl	8002134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ce:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <MX_GPIO_Init+0x13c>)
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	481b      	ldr	r0, [pc, #108]	; (8000a4c <MX_GPIO_Init+0x140>)
 80009de:	f001 f9fd 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009e2:	f244 0381 	movw	r3, #16513	; 0x4081
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4811      	ldr	r0, [pc, #68]	; (8000a40 <MX_GPIO_Init+0x134>)
 80009fc:	f001 f9ee 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a00:	2340      	movs	r3, #64	; 0x40
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	480b      	ldr	r0, [pc, #44]	; (8000a44 <MX_GPIO_Init+0x138>)
 8000a18:	f001 f9e0 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_GPIO_Init+0x138>)
 8000a30:	f001 f9d4 	bl	8001ddc <HAL_GPIO_Init>

}
 8000a34:	bf00      	nop
 8000a36:	3730      	adds	r7, #48	; 0x30
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020400 	.word	0x40020400
 8000a44:	40021800 	.word	0x40021800
 8000a48:	10110000 	.word	0x10110000
 8000a4c:	40020800 	.word	0x40020800

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <Error_Handler+0x8>
	...

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a84:	6453      	str	r3, [r2, #68]	; 0x44
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <HAL_UART_MspInit+0x7c>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d128      	bne.n	8000b18 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <HAL_UART_MspInit+0x80>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	4a16      	ldr	r2, [pc, #88]	; (8000b24 <HAL_UART_MspInit+0x80>)
 8000acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <HAL_UART_MspInit+0x80>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_UART_MspInit+0x80>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <HAL_UART_MspInit+0x80>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_UART_MspInit+0x80>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000af6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b08:	2307      	movs	r3, #7
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <HAL_UART_MspInit+0x84>)
 8000b14:	f001 f962 	bl	8001ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b18:	bf00      	nop
 8000b1a:	3728      	adds	r7, #40	; 0x28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40004800 	.word	0x40004800
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020c00 	.word	0x40020c00

08000b2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b4c:	d141      	bne.n	8000bd2 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <HAL_PCD_MspInit+0xb0>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <HAL_PCD_MspInit+0xb0>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <HAL_PCD_MspInit+0xb0>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b66:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b78:	230a      	movs	r3, #10
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	4817      	ldr	r0, [pc, #92]	; (8000be0 <HAL_PCD_MspInit+0xb4>)
 8000b84:	f001 f92a 	bl	8001ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4810      	ldr	r0, [pc, #64]	; (8000be0 <HAL_PCD_MspInit+0xb4>)
 8000b9e:	f001 f91d 	bl	8001ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_PCD_MspInit+0xb0>)
 8000ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba6:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <HAL_PCD_MspInit+0xb0>)
 8000ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bac:	6353      	str	r3, [r2, #52]	; 0x34
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <HAL_PCD_MspInit+0xb0>)
 8000bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_PCD_MspInit+0xb0>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <HAL_PCD_MspInit+0xb0>)
 8000bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <HAL_PCD_MspInit+0xb0>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <NMI_Handler+0x4>

08000bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c30:	f000 ffaa 	bl	8001b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
	return 1;
 8000c3c:	2301      	movs	r3, #1
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <_kill>:

int _kill(int pid, int sig)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c52:	f003 fc6d 	bl	8004530 <__errno>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2216      	movs	r2, #22
 8000c5a:	601a      	str	r2, [r3, #0]
	return -1;
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <_exit>:

void _exit (int status)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ffe7 	bl	8000c48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c7a:	e7fe      	b.n	8000c7a <_exit+0x12>

08000c7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	e00a      	b.n	8000ca4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c8e:	f3af 8000 	nop.w
 8000c92:	4601      	mov	r1, r0
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	60ba      	str	r2, [r7, #8]
 8000c9a:	b2ca      	uxtb	r2, r1
 8000c9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dbf0      	blt.n	8000c8e <_read+0x12>
	}

return len;
 8000cac:	687b      	ldr	r3, [r7, #4]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	60f8      	str	r0, [r7, #12]
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	e009      	b.n	8000cdc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	60ba      	str	r2, [r7, #8]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fc89 	bl	80005e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	dbf1      	blt.n	8000cc8 <_write+0x12>
	}
	return len;
 8000ce4:	687b      	ldr	r3, [r7, #4]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <_close>:

int _close(int file)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
	return -1;
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d16:	605a      	str	r2, [r3, #4]
	return 0;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <_isatty>:

int _isatty(int file)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
	return 0;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d60:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <_sbrk+0x5c>)
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <_sbrk+0x60>)
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d102      	bne.n	8000d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <_sbrk+0x64>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <_sbrk+0x68>)
 8000d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d207      	bcs.n	8000d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d88:	f003 fbd2 	bl	8004530 <__errno>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	220c      	movs	r2, #12
 8000d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
 8000d96:	e009      	b.n	8000dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <_sbrk+0x64>)
 8000da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000daa:	68fb      	ldr	r3, [r7, #12]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20080000 	.word	0x20080000
 8000db8:	00000400 	.word	0x00000400
 8000dbc:	20003450 	.word	0x20003450
 8000dc0:	20003940 	.word	0x20003940

08000dc4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dee:	490e      	ldr	r1, [pc, #56]	; (8000e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e04:	4c0b      	ldr	r4, [pc, #44]	; (8000e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e12:	f7ff ffd7 	bl	8000dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e16:	f003 fb91 	bl	800453c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fbf7 	bl	800060c <main>
  bx  lr    
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e20:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	200011e0 	.word	0x200011e0
  ldr r2, =_sidata
 8000e2c:	08007644 	.word	0x08007644
  ldr r2, =_sbss
 8000e30:	200011e0 	.word	0x200011e0
  ldr r4, =_ebss
 8000e34:	20003940 	.word	0x20003940

08000e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC_IRQHandler>

08000e3a <arm_biquad_cascade_df1_init_q15>:
  arm_biquad_casd_df1_inst_q15 * S,
  uint8_t numStages,
  q15_t * pCoeffs,
  q15_t * pState,
  int8_t postShift)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	60f8      	str	r0, [r7, #12]
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	460b      	mov	r3, r1
 8000e48:	72fb      	strb	r3, [r7, #11]
  /* Assign filter stages */
  S->numStages = numStages;
 8000e4a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	701a      	strb	r2, [r3, #0]

  /* Assign postShift to be applied to the output */
  S->postShift = postShift;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	7e3a      	ldrb	r2, [r7, #24]
 8000e56:	731a      	strb	r2, [r3, #12]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and size is always 4 * numStages */
  memset(pState, 0, (4U * (uint32_t) numStages) * sizeof(q15_t));
 8000e5e:	7afb      	ldrb	r3, [r7, #11]
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	461a      	mov	r2, r3
 8000e64:	2100      	movs	r1, #0
 8000e66:	6838      	ldr	r0, [r7, #0]
 8000e68:	f003 fb8c 	bl	8004584 <memset>

  /* Assign state pointer */
  S->pState = pState;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	605a      	str	r2, [r3, #4]
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <arm_biquad_cascade_df1_q15>:
void arm_biquad_cascade_df1_q15(
  const arm_biquad_casd_df1_inst_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize)
{
 8000e7a:	b490      	push	{r4, r7}
 8000e7c:	b0ce      	sub	sp, #312	; 0x138
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	f107 040c 	add.w	r4, r7, #12
 8000e84:	6020      	str	r0, [r4, #0]
 8000e86:	f107 0008 	add.w	r0, r7, #8
 8000e8a:	6001      	str	r1, [r0, #0]
 8000e8c:	1d39      	adds	r1, r7, #4
 8000e8e:	600a      	str	r2, [r1, #0]
 8000e90:	463a      	mov	r2, r7
 8000e92:	6013      	str	r3, [r2, #0]

#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  q15_t *pIn = pSrc;                             /*  Source pointer                               */
 8000e94:	f107 0308 	add.w	r3, r7, #8
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	653b      	str	r3, [r7, #80]	; 0x50
  q15_t *pOut = pDst;                            /*  Destination pointer                          */
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
  q31_t b0;                                      /*  Temporary variable to hold bo value          */
  q31_t b1, a1;                                  /*  Filter coefficients                          */
  q31_t state_in, state_out;                     /*  Filter state variables                       */
  q31_t acc_l, acc_h;
  q63_t acc;                                     /*  Accumulator                                  */
  int32_t lShift = (15 - (int32_t) S->postShift);       /*  Post shift                                   */
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000eac:	f1c3 030f 	rsb	r3, r3, #15
 8000eb0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  q15_t *pState = S->pState;                     /*  State pointer                                */
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	64bb      	str	r3, [r7, #72]	; 0x48
  q15_t *pCoeffs = S->pCoeffs;                   /*  Coefficient pointer                          */
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t sample, stage = (uint32_t) S->numStages;     /*  Stage loop counter                           */
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f993 3000 	ldrsb.w	r3, [r3]
 8000ed2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  int32_t uShift = (32 - lShift);
 8000ed6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000eda:	f1c3 0320 	rsb	r3, r3, #32
 8000ede:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

  do
  {
    /* Read the b0 and 0 coefficients using SIMD  */
    b0 = *__SIMD32(pCoeffs)++;
 8000ee2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000ee6:	6813      	ldr	r3, [r2, #0]
 8000ee8:	1d19      	adds	r1, r3, #4
 8000eea:	6011      	str	r1, [r2, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

    /* Read the b1 and b2 coefficients using SIMD */
    b1 = *__SIMD32(pCoeffs)++;
 8000ef2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000ef6:	6813      	ldr	r3, [r2, #0]
 8000ef8:	1d19      	adds	r1, r3, #4
 8000efa:	6011      	str	r1, [r2, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    /* Read the a1 and a2 coefficients using SIMD */
    a1 = *__SIMD32(pCoeffs)++;
 8000f02:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000f06:	6813      	ldr	r3, [r2, #0]
 8000f08:	1d19      	adds	r1, r3, #4
 8000f0a:	6011      	str	r1, [r2, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    /* Read the input state values from the state buffer:  x[n-1], x[n-2] */
    state_in = *__SIMD32(pState)++;
 8000f12:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f16:	6813      	ldr	r3, [r2, #0]
 8000f18:	1d19      	adds	r1, r3, #4
 8000f1a:	6011      	str	r1, [r2, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    /* Read the output state values from the state buffer:  y[n-1], y[n-2] */
    state_out = *__SIMD32(pState)--;
 8000f22:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f26:	6813      	ldr	r3, [r2, #0]
 8000f28:	1f19      	subs	r1, r3, #4
 8000f2a:	6011      	str	r1, [r2, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    /*      The variable acc hold output values that are being computed:
     *
     *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]
     *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]
     */
    sample = blockSize >> 1U;
 8000f32:	463b      	mov	r3, r7
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	085b      	lsrs	r3, r3, #1
 8000f38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    /* First part of the processing with loop unrolling.  Compute 2 outputs at a time.
     ** a second loop below computes the remaining 1 sample. */
    while (sample > 0U)
 8000f3c:	e15d      	b.n	80011fa <arm_biquad_cascade_df1_q15+0x380>
    {

      /* Read the input */
      in = *__SIMD32(pIn)++;
 8000f3e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000f42:	6813      	ldr	r3, [r2, #0]
 8000f44:	1d19      	adds	r1, r3, #4
 8000f46:	6011      	str	r1, [r2, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

      /* out =  b0 * x[n] + 0 * 0 */
      out = __SMUAD(b0, in);
 8000f4e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000f52:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000f56:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000f5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

__STATIC_FORCEINLINE uint32_t __SMUAD  (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8000f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f62:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000f66:	fb23 f302 	smuad	r3, r3, r2
 8000f6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 8000f6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f72:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

      /* acc +=  b1 * x[n-1] +  b2 * x[n-2] + out */
      acc = __SMLALD(b1, state_in, out);
 8000f76:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8000f7a:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8000f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f82:	461a      	mov	r2, r3
 8000f84:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000f88:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8000f8c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8000f90:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;
 8000f94:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8000f98:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

#ifndef __ARMEB__   /* Little endian */
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8000f9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8000fac:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8000fb0:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8000fb4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000fb8:	600a      	str	r2, [r1, #0]
 8000fba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fbe:	6053      	str	r3, [r2, #4]
#else               /* Big endian */
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[1]), "=r" (llr.w32[0]): "r" (op1), "r" (op2) , "0" (llr.w32[1]), "1" (llr.w32[0]) );
#endif

  return(llr.w64);
 8000fc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000fc4:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
      /* acc +=  a1 * y[n-1] +  a2 * y[n-2] */
      acc = __SMLALD(a1, state_out, acc);
 8000fc8:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8000fcc:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8000fd0:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8000fd4:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 8000fd8:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8000fdc:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  llr.w64 = acc;
 8000fe0:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8000fe4:	e9c7 2308 	strd	r2, r3, [r7, #32]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8000fe8:	f107 0320 	add.w	r3, r7, #32
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	f107 0320 	add.w	r3, r7, #32
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8000ff8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8000ffc:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8001000:	f107 0120 	add.w	r1, r7, #32
 8001004:	600a      	str	r2, [r1, #0]
 8001006:	f107 0220 	add.w	r2, r7, #32
 800100a:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 800100c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001010:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100

      /* The result is converted from 3.29 to 1.31 if postShift = 1, and then saturation is applied */
      /* Calc lower part of acc */
      acc_l = acc & 0xffffffff;
 8001014:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001018:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

      /* Calc upper part of acc */
      acc_h = (acc >> 32) & 0xffffffff;
 800101c:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8001020:	f04f 0200 	mov.w	r2, #0
 8001024:	f04f 0300 	mov.w	r3, #0
 8001028:	000a      	movs	r2, r1
 800102a:	2300      	movs	r3, #0
 800102c:	4613      	mov	r3, r2
 800102e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

      /* Apply shift for lower part of acc and upper part of acc */
      out = (uint32_t) acc_l >> lShift | acc_h << uShift;
 8001032:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001036:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800103a:	fa22 f303 	lsr.w	r3, r2, r3
 800103e:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001042:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001046:	fa01 f202 	lsl.w	r2, r1, r2
 800104a:	4313      	orrs	r3, r2
 800104c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

      out = __SSAT(out, 16);
 8001050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001054:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001058:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800105c:	f303 030f 	ssat	r3, #16, r3
 8001060:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001064:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001068:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      /* x[n-N], x[n-N-1] are packed together to make state_in of type q31 */
      /* y[n-N], y[n-N-1] are packed together to make state_out of type q31 */

#ifndef  ARM_MATH_BIG_ENDIAN

      state_in = __PKHBT(in, state_in, 16);
 800106c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001070:	b29a      	uxth	r2, r3
 8001072:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001076:	041b      	lsls	r3, r3, #16
 8001078:	4313      	orrs	r3, r2
 800107a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      state_out = __PKHBT(out, state_out, 16);
 800107e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001082:	b29a      	uxth	r2, r3
 8001084:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001088:	041b      	lsls	r3, r3, #16
 800108a:	4313      	orrs	r3, r2
 800108c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
      state_out = __PKHBT(state_out >> 16, (out), 16);

#endif /* #ifndef  ARM_MATH_BIG_ENDIAN */

      /* out =  b0 * x[n] + 0 * 0 */
      out = __SMUADX(b0, in);
 8001090:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001094:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001098:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800109c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80010a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80010a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80010a8:	fb23 f312 	smuadx	r3, r3, r2
 80010ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return(result);
 80010b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80010b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      /* acc +=  b1 * x[n-1] +  b2 * x[n-2] + out */
      acc = __SMLALD(b1, state_in, out);
 80010b8:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80010bc:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 80010c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010c4:	461a      	mov	r2, r3
 80010c6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80010ca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 80010ce:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80010d2:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  llr.w64 = acc;
 80010d6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80010da:	e9c7 2306 	strd	r2, r3, [r7, #24]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	f107 0318 	add.w	r3, r7, #24
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80010ee:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80010f2:	fbc1 23c0 	smlald	r2, r3, r1, r0
 80010f6:	f107 0118 	add.w	r1, r7, #24
 80010fa:	600a      	str	r2, [r1, #0]
 80010fc:	f107 0218 	add.w	r2, r7, #24
 8001100:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8001102:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001106:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
      /* acc +=  a1 * y[n-1] + a2 * y[n-2] */
      acc = __SMLALD(a1, state_out, acc);
 800110a:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800110e:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8001112:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8001116:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800111a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800111e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
  llr.w64 = acc;
 8001122:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001126:	e9c7 2304 	strd	r2, r3, [r7, #16]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800113a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800113e:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8001142:	f107 0110 	add.w	r1, r7, #16
 8001146:	600a      	str	r2, [r1, #0]
 8001148:	f107 0210 	add.w	r2, r7, #16
 800114c:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 800114e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001152:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100

      /* The result is converted from 3.29 to 1.31 if postShift = 1, and then saturation is applied */
      /* Calc lower part of acc */
      acc_l = acc & 0xffffffff;
 8001156:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800115a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

      /* Calc upper part of acc */
      acc_h = (acc >> 32) & 0xffffffff;
 800115e:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	000a      	movs	r2, r1
 800116c:	2300      	movs	r3, #0
 800116e:	4613      	mov	r3, r2
 8001170:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

      /* Apply shift for lower part of acc and upper part of acc */
      out = (uint32_t) acc_l >> lShift | acc_h << uShift;
 8001174:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001178:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800117c:	fa22 f303 	lsr.w	r3, r2, r3
 8001180:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001184:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001188:	fa01 f202 	lsl.w	r2, r1, r2
 800118c:	4313      	orrs	r3, r2
 800118e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

      out = __SSAT(out, 16);
 8001192:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001196:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800119a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800119e:	f303 030f 	ssat	r3, #16, r3
 80011a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80011a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80011aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

      /* Store the output in the destination buffer. */

#ifndef  ARM_MATH_BIG_ENDIAN

      *__SIMD32(pOut)++ = __PKHBT(state_out, out, 16);
 80011ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011b8:	041b      	lsls	r3, r3, #16
 80011ba:	ea42 0003 	orr.w	r0, r2, r3
 80011be:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80011c2:	6813      	ldr	r3, [r2, #0]
 80011c4:	1d19      	adds	r1, r3, #4
 80011c6:	6011      	str	r1, [r2, #0]
 80011c8:	4602      	mov	r2, r0
 80011ca:	601a      	str	r2, [r3, #0]
      /* Yn1 = acc   */
      /* x[n-N], x[n-N-1] are packed together to make state_in of type q31 */
      /* y[n-N], y[n-N-1] are packed together to make state_out of type q31 */
#ifndef  ARM_MATH_BIG_ENDIAN

      state_in = __PKHBT(in >> 16, state_in, 16);
 80011cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80011d0:	0c1a      	lsrs	r2, r3, #16
 80011d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80011d6:	041b      	lsls	r3, r3, #16
 80011d8:	4313      	orrs	r3, r2
 80011da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      state_out = __PKHBT(out, state_out, 16);
 80011de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80011e8:	041b      	lsls	r3, r3, #16
 80011ea:	4313      	orrs	r3, r2
 80011ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

#endif /* #ifndef  ARM_MATH_BIG_ENDIAN */


      /* Decrement the loop counter */
      sample--;
 80011f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80011f4:	3b01      	subs	r3, #1
 80011f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while (sample > 0U)
 80011fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f47f ae9d 	bne.w	8000f3e <arm_biquad_cascade_df1_q15+0xc4>
    }

    /* If the blockSize is not a multiple of 2, compute any remaining output samples here.
     ** No loop unrolling is used. */

    if ((blockSize & 0x1U) != 0U)
 8001204:	463b      	mov	r3, r7
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 80a3 	beq.w	8001358 <arm_biquad_cascade_df1_q15+0x4de>
    {
      /* Read the input */
      in = *pIn++;
 8001212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001214:	1c9a      	adds	r2, r3, #2
 8001216:	653a      	str	r2, [r7, #80]	; 0x50
 8001218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800121c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

      /* out =  b0 * x[n] + 0 * 0 */

#ifndef  ARM_MATH_BIG_ENDIAN

      out = __SMUAD(b0, in);
 8001220:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001224:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001228:	65fa      	str	r2, [r7, #92]	; 0x5c
 800122a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800122c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800122e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001230:	fb23 f302 	smuad	r3, r3, r2
 8001234:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8001236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001238:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      out = __SMUADX(b0, in);

#endif /* #ifndef  ARM_MATH_BIG_ENDIAN */

      /* acc =  b1 * x[n-1] + b2 * x[n-2] + out */
      acc = __SMLALD(b1, state_in, out);
 800123c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8001240:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8001244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001248:	461a      	mov	r2, r3
 800124a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800124e:	66f8      	str	r0, [r7, #108]	; 0x6c
 8001250:	66b9      	str	r1, [r7, #104]	; 0x68
 8001252:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  llr.w64 = acc;
 8001256:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800125a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800125e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800126c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800126e:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8001272:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001276:	600a      	str	r2, [r1, #0]
 8001278:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800127c:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 800127e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001282:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
      /* acc +=  a1 * y[n-1] + a2 * y[n-2] */
      acc = __SMLALD(a1, state_out, acc);
 8001286:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800128a:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800128e:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8001292:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8001296:	67f9      	str	r1, [r7, #124]	; 0x7c
 8001298:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  llr.w64 = acc;
 800129c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80012a0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80012a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80012b4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80012b6:	fbc1 23c0 	smlald	r2, r3, r1, r0
 80012ba:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80012be:	600a      	str	r2, [r1, #0]
 80012c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80012c4:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 80012c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80012ca:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100

      /* The result is converted from 3.29 to 1.31 if postShift = 1, and then saturation is applied */
      /* Calc lower part of acc */
      acc_l = acc & 0xffffffff;
 80012ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80012d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

      /* Calc upper part of acc */
      acc_h = (acc >> 32) & 0xffffffff;
 80012d6:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	000a      	movs	r2, r1
 80012e4:	2300      	movs	r3, #0
 80012e6:	4613      	mov	r3, r2
 80012e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

      /* Apply shift for lower part of acc and upper part of acc */
      out = (uint32_t) acc_l >> lShift | acc_h << uShift;
 80012ec:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80012f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012f4:	fa22 f303 	lsr.w	r3, r2, r3
 80012f8:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80012fc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001300:	fa01 f202 	lsl.w	r2, r1, r2
 8001304:	4313      	orrs	r3, r2
 8001306:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

      out = __SSAT(out, 16);
 800130a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800130e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001316:	f303 030f 	ssat	r3, #16, r3
 800131a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800131e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001322:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

      /* Store the output in the destination buffer. */
      *pOut++ = (q15_t) out;
 8001326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001328:	1c9a      	adds	r2, r3, #2
 800132a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800132c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001330:	b212      	sxth	r2, r2
 8001332:	801a      	strh	r2, [r3, #0]
      /* x[n-N], x[n-N-1] are packed together to make state_in of type q31 */
      /* y[n-N], y[n-N-1] are packed together to make state_out of type q31 */

#ifndef  ARM_MATH_BIG_ENDIAN

      state_in = __PKHBT(in, state_in, 16);
 8001334:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001338:	b29a      	uxth	r2, r3
 800133a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800133e:	041b      	lsls	r3, r3, #16
 8001340:	4313      	orrs	r3, r2
 8001342:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      state_out = __PKHBT(out, state_out, 16);
 8001346:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800134a:	b29a      	uxth	r2, r3
 800134c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001350:	041b      	lsls	r3, r3, #16
 8001352:	4313      	orrs	r3, r2
 8001354:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    }

    /*  The first stage goes from the input wire to the output wire.  */
    /*  Subsequent numStages occur in-place in the output wire  */
    pIn = pDst;
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	653b      	str	r3, [r7, #80]	; 0x50

    /* Reset the output pointer */
    pOut = pDst;
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	64fb      	str	r3, [r7, #76]	; 0x4c

    /*  Store the updated state variables back into the state array */
    *__SIMD32(pState)++ = state_in;
 8001364:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001368:	6813      	ldr	r3, [r2, #0]
 800136a:	1d19      	adds	r1, r3, #4
 800136c:	6011      	str	r1, [r2, #0]
 800136e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001372:	601a      	str	r2, [r3, #0]
    *__SIMD32(pState)++ = state_out;
 8001374:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001378:	6813      	ldr	r3, [r2, #0]
 800137a:	1d19      	adds	r1, r3, #4
 800137c:	6011      	str	r1, [r2, #0]
 800137e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001382:	601a      	str	r2, [r3, #0]


    /* Decrement the loop counter */
    stage--;
 8001384:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001388:	3b01      	subs	r3, #1
 800138a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

  } while (stage > 0U);
 800138e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001392:	2b00      	cmp	r3, #0
 8001394:	f47f ada5 	bne.w	8000ee2 <arm_biquad_cascade_df1_q15+0x68>

  } while (--stage);

#endif /* #if defined (ARM_MATH_DSP) */

}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc90      	pop	{r4, r7}
 80013a4:	4770      	bx	lr
	...

080013a8 <arm_fir_fast_q15>:
void arm_fir_fast_q15(
  const arm_fir_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize)
{
 80013a8:	b490      	push	{r4, r7}
 80013aa:	b0ce      	sub	sp, #312	; 0x138
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	f107 040c 	add.w	r4, r7, #12
 80013b2:	6020      	str	r0, [r4, #0]
 80013b4:	f107 0008 	add.w	r0, r7, #8
 80013b8:	6001      	str	r1, [r0, #0]
 80013ba:	1d39      	adds	r1, r7, #4
 80013bc:	600a      	str	r2, [r1, #0]
 80013be:	463a      	mov	r2, r7
 80013c0:	6013      	str	r3, [r2, #0]
  q15_t *pState = S->pState;                     /* State pointer */
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  q15_t *pStateCurnt;                            /* Points to the current sample of the state */
  q31_t acc0, acc1, acc2, acc3;                  /* Accumulators */
  q15_t *pb;                                     /* Temporary pointer for coefficient buffer */
  q15_t *px;                                     /* Temporary q31 pointer for SIMD state buffer accesses */
  q31_t x0, x1, x2, c0;                          /* Temporary variables to hold SIMD state and coefficient values */
  uint32_t numTaps = S->numTaps;                 /* Number of taps in the filter */
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  uint32_t tapCnt, blkCnt;                       /* Loop counters */


  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80013f2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80013f6:	440b      	add	r3, r1
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   *    acc1 =  b[numTaps-1] * x[n-numTaps] +   b[numTaps-2] * x[n-numTaps-1] + b[numTaps-3] * x[n-numTaps-2] +...+ b[0] * x[1]
   *    acc2 =  b[numTaps-1] * x[n-numTaps+1] + b[numTaps-2] * x[n-numTaps] +   b[numTaps-3] * x[n-numTaps-1] +...+ b[0] * x[2]
   *    acc3 =  b[numTaps-1] * x[n-numTaps+2] + b[numTaps-2] * x[n-numTaps+1] + b[numTaps-3] * x[n-numTaps]   +...+ b[0] * x[3]
   */

  blkCnt = blockSize >> 2;
 8001400:	463b      	mov	r3, r7
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 800140a:	e259      	b.n	80018c0 <arm_fir_fast_q15+0x518>
  {
    /* Copy four new input samples into the state buffer.
     ** Use 32-bit SIMD to move the 16-bit data.  Only requires two copies. */
    *pStateCurnt++ = *pSrc++;
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	1c91      	adds	r1, r2, #2
 8001418:	6019      	str	r1, [r3, #0]
 800141a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800141e:	1c99      	adds	r1, r3, #2
 8001420:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8001424:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001428:	801a      	strh	r2, [r3, #0]
    *pStateCurnt++ = *pSrc++;
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	1c91      	adds	r1, r2, #2
 8001436:	6019      	str	r1, [r3, #0]
 8001438:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800143c:	1c99      	adds	r1, r3, #2
 800143e:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8001442:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001446:	801a      	strh	r2, [r3, #0]
    *pStateCurnt++ = *pSrc++;
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	1c91      	adds	r1, r2, #2
 8001454:	6019      	str	r1, [r3, #0]
 8001456:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800145a:	1c99      	adds	r1, r3, #2
 800145c:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8001460:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001464:	801a      	strh	r2, [r3, #0]
    *pStateCurnt++ = *pSrc++;
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	f107 0308 	add.w	r3, r7, #8
 8001470:	1c91      	adds	r1, r2, #2
 8001472:	6019      	str	r1, [r3, #0]
 8001474:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001478:	1c99      	adds	r1, r3, #2
 800147a:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800147e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001482:	801a      	strh	r2, [r3, #0]


    /* Set all accumulators to zero */
    acc0 = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    acc1 = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    acc2 = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    acc3 = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

    /* Typecast q15_t pointer to q31_t pointer for state reading in q31_t */
    px = pState;
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80014a4:	601a      	str	r2, [r3, #0]

    /* Typecast q15_t pointer to q31_t pointer for coefficient reading in q31_t */
    pb = pCoeffs;
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80014ae:	601a      	str	r2, [r3, #0]

    /* Read the first two samples from the state buffer:  x[n-N], x[n-N-1] */
    x0 = *__SIMD32(px)++;
 80014b0:	f107 0210 	add.w	r2, r7, #16
 80014b4:	6813      	ldr	r3, [r2, #0]
 80014b6:	1d19      	adds	r1, r3, #4
 80014b8:	6011      	str	r1, [r2, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

    /* Read the third and forth samples from the state buffer: x[n-N-2], x[n-N-3] */
    x2 = *__SIMD32(px)++;
 80014c0:	f107 0210 	add.w	r2, r7, #16
 80014c4:	6813      	ldr	r3, [r2, #0]
 80014c6:	1d19      	adds	r1, r3, #4
 80014c8:	6011      	str	r1, [r2, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    /* Loop over the number of taps.  Unroll by a factor of 4.
     ** Repeat until we've computed numTaps-(numTaps%4) coefficients. */
    tapCnt = numTaps >> 2;
 80014d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80014d4:	089b      	lsrs	r3, r3, #2
 80014d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    while (tapCnt > 0)
 80014da:	e102      	b.n	80016e2 <arm_fir_fast_q15+0x33a>
    {
      /* Read the first two coefficients using SIMD:  b[N] and b[N-1] coefficients */
      c0 = *__SIMD32(pb)++;
 80014dc:	f107 0214 	add.w	r2, r7, #20
 80014e0:	6813      	ldr	r3, [r2, #0]
 80014e2:	1d19      	adds	r1, r3, #4
 80014e4:	6011      	str	r1, [r2, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

      /* acc0 +=  b[N] * x[n-N] + b[N-1] * x[n-N-1] */
      acc0 = __SMLAD(x0, c0, acc0);
 80014ec:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80014f0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80014f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014f8:	6679      	str	r1, [r7, #100]	; 0x64
 80014fa:	663a      	str	r2, [r7, #96]	; 0x60
 80014fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80014fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001500:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001502:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001504:	fb23 1302 	smlad	r3, r3, r2, r1
 8001508:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 800150a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800150c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

      /* acc2 +=  b[N] * x[n-N-2] + b[N-1] * x[n-N-3] */
      acc2 = __SMLAD(x2, c0, acc2);
 8001510:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8001514:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001518:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800151c:	6779      	str	r1, [r7, #116]	; 0x74
 800151e:	673a      	str	r2, [r7, #112]	; 0x70
 8001520:	66fb      	str	r3, [r7, #108]	; 0x6c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001524:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001526:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001528:	fb23 1302 	smlad	r3, r3, r2, r1
 800152c:	66bb      	str	r3, [r7, #104]	; 0x68
  return(result);
 800152e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001530:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

      /* pack  x[n-N-1] and x[n-N-2] */
#ifndef ARM_MATH_BIG_ENDIAN
      x1 = __PKHBT(x2, x0, 0);
 8001534:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001538:	b29a      	uxth	r2, r3
 800153a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800153e:	4bb6      	ldr	r3, [pc, #728]	; (8001818 <arm_fir_fast_q15+0x470>)
 8001540:	400b      	ands	r3, r1
 8001542:	4313      	orrs	r3, r2
 8001544:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
#else
      x1 = __PKHBT(x0, x2, 0);
#endif

      /* Read state x[n-N-4], x[n-N-5] */
      x0 = _SIMD32_OFFSET(px);
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      /* acc1 +=  b[N] * x[n-N-1] + b[N-1] * x[n-N-2] */
      acc1 = __SMLADX(x1, c0, acc1);
 8001554:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001558:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800155c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001560:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8001564:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001568:	67fb      	str	r3, [r7, #124]	; 0x7c
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800156a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800156e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001572:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001574:	fb23 1312 	smladx	r3, r3, r2, r1
 8001578:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 800157a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800157c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

      /* pack  x[n-N-3] and x[n-N-4] */
#ifndef ARM_MATH_BIG_ENDIAN
      x1 = __PKHBT(x0, x2, 0);
 8001580:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001584:	b29a      	uxth	r2, r3
 8001586:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800158a:	4ba3      	ldr	r3, [pc, #652]	; (8001818 <arm_fir_fast_q15+0x470>)
 800158c:	400b      	ands	r3, r1
 800158e:	4313      	orrs	r3, r2
 8001590:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
#else
      x1 = __PKHBT(x2, x0, 0);
#endif

      /* acc3 +=  b[N] * x[n-N-3] + b[N-1] * x[n-N-4] */
      acc3 = __SMLADX(x1, c0, acc3);
 8001594:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001598:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800159c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015a0:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80015a4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80015a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80015ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80015b0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80015b4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80015b8:	fb23 1312 	smladx	r3, r3, r2, r1
 80015bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return(result);
 80015c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

      /* Read coefficients b[N-2], b[N-3] */
      c0 = *__SIMD32(pb)++;
 80015c8:	f107 0214 	add.w	r2, r7, #20
 80015cc:	6813      	ldr	r3, [r2, #0]
 80015ce:	1d19      	adds	r1, r3, #4
 80015d0:	6011      	str	r1, [r2, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

      /* acc0 +=  b[N-2] * x[n-N-2] + b[N-3] * x[n-N-3] */
      acc0 = __SMLAD(x2, c0, acc0);
 80015d8:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80015dc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80015e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015e4:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 80015e8:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80015ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80015f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015f4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80015f8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80015fc:	fb23 1302 	smlad	r3, r3, r2, r1
 8001600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return(result);
 8001604:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001608:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

      /* Read state x[n-N-6], x[n-N-7] with offset */
      x2 = _SIMD32_OFFSET(px + 2U);
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

      /* acc2 +=  b[N-2] * x[n-N-4] + b[N-3] * x[n-N-5] */
      acc2 = __SMLAD(x0, c0, acc2);
 8001618:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800161c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001620:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001624:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8001628:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800162c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001630:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001634:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001638:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800163c:	fb23 1302 	smlad	r3, r3, r2, r1
 8001640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 8001644:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001648:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

      /* acc1 +=  b[N-2] * x[n-N-3] + b[N-3] * x[n-N-4] */
      acc1 = __SMLADX(x1, c0, acc1);
 800164c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001650:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001654:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001658:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 800165c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001660:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001664:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001668:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800166c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001670:	fb23 1312 	smladx	r3, r3, r2, r1
 8001674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return(result);
 8001678:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800167c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

      /* pack  x[n-N-5] and x[n-N-6] */
#ifndef ARM_MATH_BIG_ENDIAN
      x1 = __PKHBT(x2, x0, 0);
 8001680:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001684:	b29a      	uxth	r2, r3
 8001686:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800168a:	4b63      	ldr	r3, [pc, #396]	; (8001818 <arm_fir_fast_q15+0x470>)
 800168c:	400b      	ands	r3, r1
 800168e:	4313      	orrs	r3, r2
 8001690:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
#else
      x1 = __PKHBT(x0, x2, 0);
#endif

      /* acc3 +=  b[N-2] * x[n-N-5] + b[N-3] * x[n-N-6] */
      acc3 = __SMLADX(x1, c0, acc3);
 8001694:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001698:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800169c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016a0:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 80016a4:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80016a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80016ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80016b0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80016b4:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80016b8:	fb23 1312 	smladx	r3, r3, r2, r1
 80016bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 80016c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

      /* Update state pointer for next state reading */
      px += 4U;
 80016c8:	f107 0310 	add.w	r3, r7, #16
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f103 0208 	add.w	r2, r3, #8
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	601a      	str	r2, [r3, #0]

      /* Decrement tap count */
      tapCnt--;
 80016d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016dc:	3b01      	subs	r3, #1
 80016de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    while (tapCnt > 0)
 80016e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f47f aef8 	bne.w	80014dc <arm_fir_fast_q15+0x134>

    }

    /* If the filter length is not a multiple of 4, compute the remaining filter taps.
     ** This is always be 2 taps since the filter length is even. */
    if ((numTaps & 0x3U) != 0U)
 80016ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 8091 	beq.w	800181c <arm_fir_fast_q15+0x474>
    {

      /* Read last two coefficients */
      c0 = *__SIMD32(pb)++;
 80016fa:	f107 0214 	add.w	r2, r7, #20
 80016fe:	6813      	ldr	r3, [r2, #0]
 8001700:	1d19      	adds	r1, r3, #4
 8001702:	6011      	str	r1, [r2, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

      /* Perform the multiply-accumulates */
      acc0 = __SMLAD(x0, c0, acc0);
 800170a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800170e:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8001712:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171a:	6018      	str	r0, [r3, #0]
 800171c:	f107 0320 	add.w	r3, r7, #32
 8001720:	6019      	str	r1, [r3, #0]
 8001722:	f107 031c 	add.w	r3, r7, #28
 8001726:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f107 0220 	add.w	r2, r7, #32
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	f107 011c 	add.w	r1, r7, #28
 8001738:	6809      	ldr	r1, [r1, #0]
 800173a:	fb23 1202 	smlad	r2, r3, r2, r1
 800173e:	f107 0318 	add.w	r3, r7, #24
 8001742:	601a      	str	r2, [r3, #0]
  return(result);
 8001744:	f107 0318 	add.w	r3, r7, #24
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      acc2 = __SMLAD(x2, c0, acc2);
 800174e:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8001752:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8001756:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800175a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800175e:	6018      	str	r0, [r3, #0]
 8001760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001764:	6019      	str	r1, [r3, #0]
 8001766:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800176c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800177c:	6809      	ldr	r1, [r1, #0]
 800177e:	fb23 1202 	smlad	r2, r3, r2, r1
 8001782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001786:	601a      	str	r2, [r3, #0]
  return(result);
 8001788:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

      /* pack state variables */
#ifndef ARM_MATH_BIG_ENDIAN
      x1 = __PKHBT(x2, x0, 0);
 8001792:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001796:	b29a      	uxth	r2, r3
 8001798:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800179c:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <arm_fir_fast_q15+0x470>)
 800179e:	400b      	ands	r3, r1
 80017a0:	4313      	orrs	r3, r2
 80017a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
#else
      x1 = __PKHBT(x0, x2, 0);
#endif

      /* Read last state variables */
      x0 = *__SIMD32(px);
 80017a6:	f107 0310 	add.w	r3, r7, #16
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      /* Perform the multiply-accumulates */
      acc1 = __SMLADX(x1, c0, acc1);
 80017b2:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80017b6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80017ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80017be:	6479      	str	r1, [r7, #68]	; 0x44
 80017c0:	643a      	str	r2, [r7, #64]	; 0x40
 80017c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80017c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80017ca:	fb23 1212 	smladx	r2, r3, r2, r1
 80017ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017d2:	601a      	str	r2, [r3, #0]
  return(result);
 80017d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

      /* pack state variables */
#ifndef ARM_MATH_BIG_ENDIAN
      x1 = __PKHBT(x0, x2, 0);
 80017de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <arm_fir_fast_q15+0x470>)
 80017ea:	400b      	ands	r3, r1
 80017ec:	4313      	orrs	r3, r2
 80017ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
#else
      x1 = __PKHBT(x2, x0, 0);
#endif

      /* Perform the multiply-accumulates */
      acc3 = __SMLADX(x1, c0, acc3);
 80017f2:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80017f6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80017fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017fe:	6579      	str	r1, [r7, #84]	; 0x54
 8001800:	653a      	str	r2, [r7, #80]	; 0x50
 8001802:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001806:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001808:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800180a:	fb23 1312 	smladx	r3, r3, r2, r1
 800180e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8001810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001812:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001816:	e001      	b.n	800181c <arm_fir_fast_q15+0x474>
 8001818:	ffff0000 	.word	0xffff0000
     ** Then store the 4 outputs in the destination buffer. */

#ifndef ARM_MATH_BIG_ENDIAN

    *__SIMD32(pDst)++ =
      __PKHBT(__SSAT((acc0 >> 15), 16), __SSAT((acc1 >> 15), 16), 16);
 800181c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001820:	13db      	asrs	r3, r3, #15
 8001822:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800182a:	f303 030f 	ssat	r3, #16, r3
 800182e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001832:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001836:	b29a      	uxth	r2, r3
 8001838:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800183c:	13db      	asrs	r3, r3, #15
 800183e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001842:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001846:	f303 030f 	ssat	r3, #16, r3
 800184a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800184e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001852:	041b      	lsls	r3, r3, #16
 8001854:	ea42 0003 	orr.w	r0, r2, r3
    *__SIMD32(pDst)++ =
 8001858:	1d3a      	adds	r2, r7, #4
 800185a:	6813      	ldr	r3, [r2, #0]
 800185c:	1d19      	adds	r1, r3, #4
 800185e:	6011      	str	r1, [r2, #0]
      __PKHBT(__SSAT((acc0 >> 15), 16), __SSAT((acc1 >> 15), 16), 16);
 8001860:	4602      	mov	r2, r0
    *__SIMD32(pDst)++ =
 8001862:	601a      	str	r2, [r3, #0]

    *__SIMD32(pDst)++ =
      __PKHBT(__SSAT((acc2 >> 15), 16), __SSAT((acc3 >> 15), 16), 16);
 8001864:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001868:	13db      	asrs	r3, r3, #15
 800186a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800186e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001872:	f303 030f 	ssat	r3, #16, r3
 8001876:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800187a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800187e:	b29a      	uxth	r2, r3
 8001880:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001884:	13db      	asrs	r3, r3, #15
 8001886:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800188a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800188e:	f303 030f 	ssat	r3, #16, r3
 8001892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800189a:	041b      	lsls	r3, r3, #16
 800189c:	ea42 0003 	orr.w	r0, r2, r3
    *__SIMD32(pDst)++ =
 80018a0:	1d3a      	adds	r2, r7, #4
 80018a2:	6813      	ldr	r3, [r2, #0]
 80018a4:	1d19      	adds	r1, r3, #4
 80018a6:	6011      	str	r1, [r2, #0]
      __PKHBT(__SSAT((acc2 >> 15), 16), __SSAT((acc3 >> 15), 16), 16);
 80018a8:	4602      	mov	r2, r0
    *__SIMD32(pDst)++ =
 80018aa:	601a      	str	r2, [r3, #0]


#endif /*      #ifndef ARM_MATH_BIG_ENDIAN       */

    /* Advance the state pointer by 4 to process the next group of 4 samples */
    pState = pState + 4U;
 80018ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80018b0:	3308      	adds	r3, #8
 80018b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    /* Decrement the loop counter */
    blkCnt--;
 80018b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018ba:	3b01      	subs	r3, #1
 80018bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  while (blkCnt > 0U)
 80018c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f47f ada1 	bne.w	800140c <arm_fir_fast_q15+0x64>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 80018ca:	463b      	mov	r3, r7
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  while (blkCnt > 0U)
 80018d6:	e07b      	b.n	80019d0 <arm_fir_fast_q15+0x628>
  {
    /* Copy two samples into state buffer */
    *pStateCurnt++ = *pSrc++;
 80018d8:	f107 0308 	add.w	r3, r7, #8
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	f107 0308 	add.w	r3, r7, #8
 80018e2:	1c91      	adds	r1, r2, #2
 80018e4:	6019      	str	r1, [r3, #0]
 80018e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80018ea:	1c99      	adds	r1, r3, #2
 80018ec:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80018f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80018f4:	801a      	strh	r2, [r3, #0]

    /* Set the accumulator to zero */
    acc0 = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    /* Use SIMD to hold states and coefficients */
    px = pState;
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001904:	601a      	str	r2, [r3, #0]
    pb = pCoeffs;
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800190e:	601a      	str	r2, [r3, #0]

    tapCnt = numTaps >> 1U;
 8001910:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001914:	085b      	lsrs	r3, r3, #1
 8001916:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    do
    {

      acc0 += (q31_t) * px++ * *pb++;
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	1c99      	adds	r1, r3, #2
 8001922:	f107 0210 	add.w	r2, r7, #16
 8001926:	6011      	str	r1, [r2, #0]
 8001928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192c:	4618      	mov	r0, r3
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	1c99      	adds	r1, r3, #2
 8001936:	f107 0214 	add.w	r2, r7, #20
 800193a:	6011      	str	r1, [r2, #0]
 800193c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001940:	fb03 f300 	mul.w	r3, r3, r0
 8001944:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001948:	4413      	add	r3, r2
 800194a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  acc0 += (q31_t) * px++ * *pb++;
 800194e:	f107 0310 	add.w	r3, r7, #16
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	1c99      	adds	r1, r3, #2
 8001956:	f107 0210 	add.w	r2, r7, #16
 800195a:	6011      	str	r1, [r2, #0]
 800195c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001960:	4618      	mov	r0, r3
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	1c99      	adds	r1, r3, #2
 800196a:	f107 0214 	add.w	r2, r7, #20
 800196e:	6011      	str	r1, [r2, #0]
 8001970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001974:	fb03 f300 	mul.w	r3, r3, r0
 8001978:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800197c:	4413      	add	r3, r2
 800197e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

      tapCnt--;
 8001982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001986:	3b01      	subs	r3, #1
 8001988:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    }
    while (tapCnt > 0U);
 800198c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1c2      	bne.n	800191a <arm_fir_fast_q15+0x572>

    /* The result is in 2.30 format.  Convert to 1.15 with saturation.
     ** Then store the output in the destination buffer. */
    *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
 8001994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001998:	13db      	asrs	r3, r3, #15
 800199a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800199e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80019a2:	f303 030f 	ssat	r3, #16, r3
 80019a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80019aa:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	1c99      	adds	r1, r3, #2
 80019b4:	1d3a      	adds	r2, r7, #4
 80019b6:	6011      	str	r1, [r2, #0]
 80019b8:	b202      	sxth	r2, r0
 80019ba:	801a      	strh	r2, [r3, #0]

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 80019bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019c0:	3302      	adds	r3, #2
 80019c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    /* Decrement the loop counter */
    blkCnt--;
 80019c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019ca:	3b01      	subs	r3, #1
 80019cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  while (blkCnt > 0U)
 80019d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f47f af7f 	bne.w	80018d8 <arm_fir_fast_q15+0x530>
  /* Processing is complete.
   ** Now copy the last numTaps - 1 samples to the satrt of the state buffer.
   ** This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

  /* Calculation of count for copying integer writes */
  tapCnt = (numTaps - 1U) >> 2;
 80019e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019ea:	3b01      	subs	r3, #1
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  while (tapCnt > 0U)
 80019f2:	e038      	b.n	8001a66 <arm_fir_fast_q15+0x6be>
  {
    *pStateCurnt++ = *pState++;
 80019f4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80019f8:	1c93      	adds	r3, r2, #2
 80019fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80019fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a02:	1c99      	adds	r1, r3, #2
 8001a04:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8001a08:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a0c:	801a      	strh	r2, [r3, #0]
    *pStateCurnt++ = *pState++;
 8001a0e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001a12:	1c93      	adds	r3, r2, #2
 8001a14:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001a18:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a1c:	1c99      	adds	r1, r3, #2
 8001a1e:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8001a22:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a26:	801a      	strh	r2, [r3, #0]
    *pStateCurnt++ = *pState++;
 8001a28:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001a2c:	1c93      	adds	r3, r2, #2
 8001a2e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001a32:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a36:	1c99      	adds	r1, r3, #2
 8001a38:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8001a3c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a40:	801a      	strh	r2, [r3, #0]
    *pStateCurnt++ = *pState++;
 8001a42:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001a46:	1c93      	adds	r3, r2, #2
 8001a48:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001a4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a50:	1c99      	adds	r1, r3, #2
 8001a52:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8001a56:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a5a:	801a      	strh	r2, [r3, #0]

    tapCnt--;
 8001a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a60:	3b01      	subs	r3, #1
 8001a62:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  while (tapCnt > 0U)
 8001a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1c2      	bne.n	80019f4 <arm_fir_fast_q15+0x64c>

  }

  /* Calculation of count for remaining q15_t data */
  tapCnt = (numTaps - 1U) % 0x4U;
 8001a6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001a72:	3b01      	subs	r3, #1
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* copy remaining data */
  while (tapCnt > 0U)
 8001a7c:	e011      	b.n	8001aa2 <arm_fir_fast_q15+0x6fa>
  {
    *pStateCurnt++ = *pState++;
 8001a7e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001a82:	1c93      	adds	r3, r2, #2
 8001a84:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001a88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a8c:	1c99      	adds	r1, r3, #2
 8001a8e:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8001a92:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a96:	801a      	strh	r2, [r3, #0]

    /* Decrement the loop counter */
    tapCnt--;
 8001a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  while (tapCnt > 0U)
 8001aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1e9      	bne.n	8001a7e <arm_fir_fast_q15+0x6d6>
  }

}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc90      	pop	{r4, r7}
 8001ab6:	4770      	bx	lr

08001ab8 <arm_fir_init_q15>:
  arm_fir_instance_q15 * S,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  uint32_t blockSize)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	817b      	strh	r3, [r7, #10]
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /* The Number of filter coefficients in the filter must be even and at least 4 */
  if (numTaps & 0x1U)
 8001ac8:	897b      	ldrh	r3, [r7, #10]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <arm_fir_init_q15+0x20>
  {
    status = ARM_MATH_ARGUMENT_ERROR;
 8001ad2:	23ff      	movs	r3, #255	; 0xff
 8001ad4:	75fb      	strb	r3, [r7, #23]
 8001ad6:	e013      	b.n	8001b00 <arm_fir_init_q15+0x48>
  }
  else
  {
    /* Assign filter taps */
    S->numTaps = numTaps;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	897a      	ldrh	r2, [r7, #10]
 8001adc:	801a      	strh	r2, [r3, #0]

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	609a      	str	r2, [r3, #8]

    /* Clear the state buffer.  The size is always (blockSize + numTaps ) */
    memset(pState, 0, (numTaps + (blockSize)) * sizeof(q15_t));
 8001ae4:	897a      	ldrh	r2, [r7, #10]
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	4413      	add	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	461a      	mov	r2, r3
 8001aee:	2100      	movs	r1, #0
 8001af0:	6838      	ldr	r0, [r7, #0]
 8001af2:	f002 fd47 	bl	8004584 <memset>

    /* Assign state pointer */
    S->pState = pState;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	605a      	str	r2, [r3, #4]

    status = ARM_MATH_SUCCESS;
 8001afc:	2300      	movs	r3, #0
 8001afe:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 8001b00:	f997 3017 	ldrsb.w	r3, [r7, #23]

  return (status);

#endif /*  #if defined (ARM_MATH_DSP) */

}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b10:	2003      	movs	r0, #3
 8001b12:	f000 f92f 	bl	8001d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f000 f806 	bl	8001b28 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001b1c:	f7fe ff9e 	bl	8000a5c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_InitTick+0x54>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_InitTick+0x58>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f93b 	bl	8001dc2 <HAL_SYSTICK_Config>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00e      	b.n	8001b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	d80a      	bhi.n	8001b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f000 f911 	bl	8001d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b68:	4a06      	ldr	r2, [pc, #24]	; (8001b84 <HAL_InitTick+0x5c>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20001004 	.word	0x20001004
 8001b80:	2000100c 	.word	0x2000100c
 8001b84:	20001008 	.word	0x20001008

08001b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x20>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_IncTick+0x24>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <HAL_IncTick+0x24>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	2000100c 	.word	0x2000100c
 8001bac:	2000392c 	.word	0x2000392c

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_GetTick+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	2000392c 	.word	0x2000392c

08001bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff ffee 	bl	8001bb0 <HAL_GetTick>
 8001bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be0:	d005      	beq.n	8001bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_Delay+0x44>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bee:	bf00      	nop
 8001bf0:	f7ff ffde 	bl	8001bb0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d8f7      	bhi.n	8001bf0 <HAL_Delay+0x28>
  {
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000100c 	.word	0x2000100c

08001c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <__NVIC_SetPriorityGrouping+0x40>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3e:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <__NVIC_SetPriorityGrouping+0x40>)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	60d3      	str	r3, [r2, #12]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00
 8001c54:	05fa0000 	.word	0x05fa0000

08001c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <__NVIC_GetPriorityGrouping+0x18>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	f003 0307 	and.w	r3, r3, #7
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	db0a      	blt.n	8001c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	490c      	ldr	r1, [pc, #48]	; (8001cc0 <__NVIC_SetPriority+0x4c>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	0112      	lsls	r2, r2, #4
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	440b      	add	r3, r1
 8001c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c9c:	e00a      	b.n	8001cb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4908      	ldr	r1, [pc, #32]	; (8001cc4 <__NVIC_SetPriority+0x50>)
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	3b04      	subs	r3, #4
 8001cac:	0112      	lsls	r2, r2, #4
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	761a      	strb	r2, [r3, #24]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000e100 	.word	0xe000e100
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f1c3 0307 	rsb	r3, r3, #7
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	bf28      	it	cs
 8001ce6:	2304      	movcs	r3, #4
 8001ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3304      	adds	r3, #4
 8001cee:	2b06      	cmp	r3, #6
 8001cf0:	d902      	bls.n	8001cf8 <NVIC_EncodePriority+0x30>
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3b03      	subs	r3, #3
 8001cf6:	e000      	b.n	8001cfa <NVIC_EncodePriority+0x32>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d10:	f04f 31ff 	mov.w	r1, #4294967295
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1a:	43d9      	mvns	r1, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	4313      	orrs	r3, r2
         );
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3724      	adds	r7, #36	; 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d40:	d301      	bcc.n	8001d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00f      	b.n	8001d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <SysTick_Config+0x40>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4e:	210f      	movs	r1, #15
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f7ff ff8e 	bl	8001c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <SysTick_Config+0x40>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5e:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <SysTick_Config+0x40>)
 8001d60:	2207      	movs	r2, #7
 8001d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	e000e010 	.word	0xe000e010

08001d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ff47 	bl	8001c10 <__NVIC_SetPriorityGrouping>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d9c:	f7ff ff5c 	bl	8001c58 <__NVIC_GetPriorityGrouping>
 8001da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	6978      	ldr	r0, [r7, #20]
 8001da8:	f7ff ff8e 	bl	8001cc8 <NVIC_EncodePriority>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff5d 	bl	8001c74 <__NVIC_SetPriority>
}
 8001dba:	bf00      	nop
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff ffb0 	bl	8001d30 <SysTick_Config>
 8001dd0:	4603      	mov	r3, r0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	; 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	e175      	b.n	80020e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	f040 8164 	bne.w	80020e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d00b      	beq.n	8001e3a <HAL_GPIO_Init+0x5e>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d007      	beq.n	8001e3a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e2e:	2b11      	cmp	r3, #17
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b12      	cmp	r3, #18
 8001e38:	d130      	bne.n	8001e9c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	2203      	movs	r2, #3
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e70:	2201      	movs	r2, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f003 0201 	and.w	r2, r3, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x100>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b12      	cmp	r3, #18
 8001eda:	d123      	bne.n	8001f24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	08da      	lsrs	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3208      	adds	r2, #8
 8001ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	08da      	lsrs	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3208      	adds	r2, #8
 8001f1e:	69b9      	ldr	r1, [r7, #24]
 8001f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0203 	and.w	r2, r3, #3
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80be 	beq.w	80020e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f66:	4b66      	ldr	r3, [pc, #408]	; (8002100 <HAL_GPIO_Init+0x324>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	4a65      	ldr	r2, [pc, #404]	; (8002100 <HAL_GPIO_Init+0x324>)
 8001f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f70:	6453      	str	r3, [r2, #68]	; 0x44
 8001f72:	4b63      	ldr	r3, [pc, #396]	; (8002100 <HAL_GPIO_Init+0x324>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f7e:	4a61      	ldr	r2, [pc, #388]	; (8002104 <HAL_GPIO_Init+0x328>)
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	3302      	adds	r3, #2
 8001f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	220f      	movs	r2, #15
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a58      	ldr	r2, [pc, #352]	; (8002108 <HAL_GPIO_Init+0x32c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d037      	beq.n	800201a <HAL_GPIO_Init+0x23e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a57      	ldr	r2, [pc, #348]	; (800210c <HAL_GPIO_Init+0x330>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d031      	beq.n	8002016 <HAL_GPIO_Init+0x23a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a56      	ldr	r2, [pc, #344]	; (8002110 <HAL_GPIO_Init+0x334>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d02b      	beq.n	8002012 <HAL_GPIO_Init+0x236>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a55      	ldr	r2, [pc, #340]	; (8002114 <HAL_GPIO_Init+0x338>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d025      	beq.n	800200e <HAL_GPIO_Init+0x232>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a54      	ldr	r2, [pc, #336]	; (8002118 <HAL_GPIO_Init+0x33c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d01f      	beq.n	800200a <HAL_GPIO_Init+0x22e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a53      	ldr	r2, [pc, #332]	; (800211c <HAL_GPIO_Init+0x340>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d019      	beq.n	8002006 <HAL_GPIO_Init+0x22a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a52      	ldr	r2, [pc, #328]	; (8002120 <HAL_GPIO_Init+0x344>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <HAL_GPIO_Init+0x226>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a51      	ldr	r2, [pc, #324]	; (8002124 <HAL_GPIO_Init+0x348>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00d      	beq.n	8001ffe <HAL_GPIO_Init+0x222>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a50      	ldr	r2, [pc, #320]	; (8002128 <HAL_GPIO_Init+0x34c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d007      	beq.n	8001ffa <HAL_GPIO_Init+0x21e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4f      	ldr	r2, [pc, #316]	; (800212c <HAL_GPIO_Init+0x350>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d101      	bne.n	8001ff6 <HAL_GPIO_Init+0x21a>
 8001ff2:	2309      	movs	r3, #9
 8001ff4:	e012      	b.n	800201c <HAL_GPIO_Init+0x240>
 8001ff6:	230a      	movs	r3, #10
 8001ff8:	e010      	b.n	800201c <HAL_GPIO_Init+0x240>
 8001ffa:	2308      	movs	r3, #8
 8001ffc:	e00e      	b.n	800201c <HAL_GPIO_Init+0x240>
 8001ffe:	2307      	movs	r3, #7
 8002000:	e00c      	b.n	800201c <HAL_GPIO_Init+0x240>
 8002002:	2306      	movs	r3, #6
 8002004:	e00a      	b.n	800201c <HAL_GPIO_Init+0x240>
 8002006:	2305      	movs	r3, #5
 8002008:	e008      	b.n	800201c <HAL_GPIO_Init+0x240>
 800200a:	2304      	movs	r3, #4
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x240>
 800200e:	2303      	movs	r3, #3
 8002010:	e004      	b.n	800201c <HAL_GPIO_Init+0x240>
 8002012:	2302      	movs	r3, #2
 8002014:	e002      	b.n	800201c <HAL_GPIO_Init+0x240>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_GPIO_Init+0x240>
 800201a:	2300      	movs	r3, #0
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	f002 0203 	and.w	r2, r2, #3
 8002022:	0092      	lsls	r2, r2, #2
 8002024:	4093      	lsls	r3, r2
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800202c:	4935      	ldr	r1, [pc, #212]	; (8002104 <HAL_GPIO_Init+0x328>)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3302      	adds	r3, #2
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800203a:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <HAL_GPIO_Init+0x354>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800205e:	4a34      	ldr	r2, [pc, #208]	; (8002130 <HAL_GPIO_Init+0x354>)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002064:	4b32      	ldr	r3, [pc, #200]	; (8002130 <HAL_GPIO_Init+0x354>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002088:	4a29      	ldr	r2, [pc, #164]	; (8002130 <HAL_GPIO_Init+0x354>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800208e:	4b28      	ldr	r3, [pc, #160]	; (8002130 <HAL_GPIO_Init+0x354>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020b2:	4a1f      	ldr	r2, [pc, #124]	; (8002130 <HAL_GPIO_Init+0x354>)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <HAL_GPIO_Init+0x354>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020dc:	4a14      	ldr	r2, [pc, #80]	; (8002130 <HAL_GPIO_Init+0x354>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3301      	adds	r3, #1
 80020e6:	61fb      	str	r3, [r7, #28]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	2b0f      	cmp	r3, #15
 80020ec:	f67f ae86 	bls.w	8001dfc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	3724      	adds	r7, #36	; 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	40013800 	.word	0x40013800
 8002108:	40020000 	.word	0x40020000
 800210c:	40020400 	.word	0x40020400
 8002110:	40020800 	.word	0x40020800
 8002114:	40020c00 	.word	0x40020c00
 8002118:	40021000 	.word	0x40021000
 800211c:	40021400 	.word	0x40021400
 8002120:	40021800 	.word	0x40021800
 8002124:	40021c00 	.word	0x40021c00
 8002128:	40022000 	.word	0x40022000
 800212c:	40022400 	.word	0x40022400
 8002130:	40013c00 	.word	0x40013c00

08002134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	807b      	strh	r3, [r7, #2]
 8002140:	4613      	mov	r3, r2
 8002142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002144:	787b      	ldrb	r3, [r7, #1]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800214a:	887a      	ldrh	r2, [r7, #2]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002150:	e003      	b.n	800215a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002152:	887b      	ldrh	r3, [r7, #2]
 8002154:	041a      	lsls	r2, r3, #16
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	619a      	str	r2, [r3, #24]
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002166:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002168:	b08f      	sub	sp, #60	; 0x3c
 800216a:	af0a      	add	r7, sp, #40	; 0x28
 800216c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e116      	b.n	80023a6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7fe fcca 	bl	8000b2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2203      	movs	r2, #3
 800219c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d102      	bne.n	80021b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f001 ff5a 	bl	8004070 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	603b      	str	r3, [r7, #0]
 80021c2:	687e      	ldr	r6, [r7, #4]
 80021c4:	466d      	mov	r5, sp
 80021c6:	f106 0410 	add.w	r4, r6, #16
 80021ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80021da:	1d33      	adds	r3, r6, #4
 80021dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021de:	6838      	ldr	r0, [r7, #0]
 80021e0:	f001 feee 	bl	8003fc0 <USB_CoreInit>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2202      	movs	r2, #2
 80021ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e0d7      	b.n	80023a6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2100      	movs	r1, #0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f001 ff48 	bl	8004092 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002202:	2300      	movs	r3, #0
 8002204:	73fb      	strb	r3, [r7, #15]
 8002206:	e04a      	b.n	800229e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	333d      	adds	r3, #61	; 0x3d
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	1a9b      	subs	r3, r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	333c      	adds	r3, #60	; 0x3c
 800222c:	7bfa      	ldrb	r2, [r7, #15]
 800222e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002230:	7bfa      	ldrb	r2, [r7, #15]
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	b298      	uxth	r0, r3
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	3342      	adds	r3, #66	; 0x42
 8002244:	4602      	mov	r2, r0
 8002246:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	1a9b      	subs	r3, r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	333f      	adds	r3, #63	; 0x3f
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800225c:	7bfa      	ldrb	r2, [r7, #15]
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	3344      	adds	r3, #68	; 0x44
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	3348      	adds	r3, #72	; 0x48
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002284:	7bfa      	ldrb	r2, [r7, #15]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	1a9b      	subs	r3, r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	3350      	adds	r3, #80	; 0x50
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	3301      	adds	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d3af      	bcc.n	8002208 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]
 80022ac:	e044      	b.n	8002338 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	1a9b      	subs	r3, r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022f0:	7bfa      	ldrb	r2, [r7, #15]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	1a9b      	subs	r3, r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	3301      	adds	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	d3b5      	bcc.n	80022ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	687e      	ldr	r6, [r7, #4]
 800234a:	466d      	mov	r5, sp
 800234c:	f106 0410 	add.w	r4, r6, #16
 8002350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002354:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002356:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002358:	e894 0003 	ldmia.w	r4, {r0, r1}
 800235c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002360:	1d33      	adds	r3, r6, #4
 8002362:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002364:	6838      	ldr	r0, [r7, #0]
 8002366:	f001 febf 	bl	80040e8 <USB_DevInit>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e014      	b.n	80023a6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	2b01      	cmp	r3, #1
 8002392:	d102      	bne.n	800239a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f80b 	bl	80023b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 f871 	bl	8004486 <USB_DevDisconnect>

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080023b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_PCDEx_ActivateLPM+0x44>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	10000003 	.word	0x10000003

080023f8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40007000 	.word	0x40007000

08002418 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	4a22      	ldr	r2, [pc, #136]	; (80024b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242c:	6413      	str	r3, [r2, #64]	; 0x40
 800242e:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800243a:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1d      	ldr	r2, [pc, #116]	; (80024b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002444:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002446:	f7ff fbb3 	bl	8001bb0 <HAL_GetTick>
 800244a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800244c:	e009      	b.n	8002462 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800244e:	f7ff fbaf 	bl	8001bb0 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800245c:	d901      	bls.n	8002462 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e022      	b.n	80024a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002462:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246e:	d1ee      	bne.n	800244e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002470:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0f      	ldr	r2, [pc, #60]	; (80024b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800247a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800247c:	f7ff fb98 	bl	8001bb0 <HAL_GetTick>
 8002480:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002482:	e009      	b.n	8002498 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002484:	f7ff fb94 	bl	8001bb0 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002492:	d901      	bls.n	8002498 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e007      	b.n	80024a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024a4:	d1ee      	bne.n	8002484 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40007000 	.word	0x40007000

080024b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024c0:	2300      	movs	r3, #0
 80024c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e29b      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8087 	beq.w	80025ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024dc:	4b96      	ldr	r3, [pc, #600]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d00c      	beq.n	8002502 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e8:	4b93      	ldr	r3, [pc, #588]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d112      	bne.n	800251a <HAL_RCC_OscConfig+0x62>
 80024f4:	4b90      	ldr	r3, [pc, #576]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002500:	d10b      	bne.n	800251a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002502:	4b8d      	ldr	r3, [pc, #564]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d06c      	beq.n	80025e8 <HAL_RCC_OscConfig+0x130>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d168      	bne.n	80025e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e275      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002522:	d106      	bne.n	8002532 <HAL_RCC_OscConfig+0x7a>
 8002524:	4b84      	ldr	r3, [pc, #528]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a83      	ldr	r2, [pc, #524]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 800252a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	e02e      	b.n	8002590 <HAL_RCC_OscConfig+0xd8>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0x9c>
 800253a:	4b7f      	ldr	r3, [pc, #508]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a7e      	ldr	r2, [pc, #504]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b7c      	ldr	r3, [pc, #496]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a7b      	ldr	r2, [pc, #492]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 800254c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e01d      	b.n	8002590 <HAL_RCC_OscConfig+0xd8>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0xc0>
 800255e:	4b76      	ldr	r3, [pc, #472]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a75      	ldr	r2, [pc, #468]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b73      	ldr	r3, [pc, #460]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a72      	ldr	r2, [pc, #456]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e00b      	b.n	8002590 <HAL_RCC_OscConfig+0xd8>
 8002578:	4b6f      	ldr	r3, [pc, #444]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a6e      	ldr	r2, [pc, #440]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 800257e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	4b6c      	ldr	r3, [pc, #432]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a6b      	ldr	r2, [pc, #428]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 800258a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d013      	beq.n	80025c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7ff fb0a 	bl	8001bb0 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a0:	f7ff fb06 	bl	8001bb0 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e229      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	4b61      	ldr	r3, [pc, #388]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0xe8>
 80025be:	e014      	b.n	80025ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7ff faf6 	bl	8001bb0 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c8:	f7ff faf2 	bl	8001bb0 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e215      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	4b57      	ldr	r3, [pc, #348]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x110>
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d069      	beq.n	80026ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025f6:	4b50      	ldr	r3, [pc, #320]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00b      	beq.n	800261a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002602:	4b4d      	ldr	r3, [pc, #308]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b08      	cmp	r3, #8
 800260c:	d11c      	bne.n	8002648 <HAL_RCC_OscConfig+0x190>
 800260e:	4b4a      	ldr	r3, [pc, #296]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d116      	bne.n	8002648 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261a:	4b47      	ldr	r3, [pc, #284]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_RCC_OscConfig+0x17a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e1e9      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002632:	4b41      	ldr	r3, [pc, #260]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	493d      	ldr	r1, [pc, #244]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	e040      	b.n	80026ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d023      	beq.n	8002698 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002650:	4b39      	ldr	r3, [pc, #228]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a38      	ldr	r2, [pc, #224]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7ff faa8 	bl	8001bb0 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002664:	f7ff faa4 	bl	8001bb0 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e1c7      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002676:	4b30      	ldr	r3, [pc, #192]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002682:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4929      	ldr	r1, [pc, #164]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]
 8002696:	e018      	b.n	80026ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002698:	4b27      	ldr	r3, [pc, #156]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a26      	ldr	r2, [pc, #152]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 800269e:	f023 0301 	bic.w	r3, r3, #1
 80026a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7ff fa84 	bl	8001bb0 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ac:	f7ff fa80 	bl	8001bb0 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1a3      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026be:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d038      	beq.n	8002748 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d019      	beq.n	8002712 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026de:	4b16      	ldr	r3, [pc, #88]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 80026e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e2:	4a15      	ldr	r2, [pc, #84]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7ff fa61 	bl	8001bb0 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f2:	f7ff fa5d 	bl	8001bb0 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e180      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x23a>
 8002710:	e01a      	b.n	8002748 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002716:	4a08      	ldr	r2, [pc, #32]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271e:	f7ff fa47 	bl	8001bb0 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002724:	e00a      	b.n	800273c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002726:	f7ff fa43 	bl	8001bb0 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d903      	bls.n	800273c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e166      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
 8002738:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273c:	4b92      	ldr	r3, [pc, #584]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 800273e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1ee      	bne.n	8002726 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80a4 	beq.w	800289e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002756:	4b8c      	ldr	r3, [pc, #560]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10d      	bne.n	800277e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002762:	4b89      	ldr	r3, [pc, #548]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a88      	ldr	r2, [pc, #544]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
 800276e:	4b86      	ldr	r3, [pc, #536]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800277a:	2301      	movs	r3, #1
 800277c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800277e:	4b83      	ldr	r3, [pc, #524]	; (800298c <HAL_RCC_OscConfig+0x4d4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d118      	bne.n	80027bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800278a:	4b80      	ldr	r3, [pc, #512]	; (800298c <HAL_RCC_OscConfig+0x4d4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a7f      	ldr	r2, [pc, #508]	; (800298c <HAL_RCC_OscConfig+0x4d4>)
 8002790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002796:	f7ff fa0b 	bl	8001bb0 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800279e:	f7ff fa07 	bl	8001bb0 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b64      	cmp	r3, #100	; 0x64
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e12a      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b0:	4b76      	ldr	r3, [pc, #472]	; (800298c <HAL_RCC_OscConfig+0x4d4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d106      	bne.n	80027d2 <HAL_RCC_OscConfig+0x31a>
 80027c4:	4b70      	ldr	r3, [pc, #448]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	4a6f      	ldr	r2, [pc, #444]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6713      	str	r3, [r2, #112]	; 0x70
 80027d0:	e02d      	b.n	800282e <HAL_RCC_OscConfig+0x376>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x33c>
 80027da:	4b6b      	ldr	r3, [pc, #428]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027de:	4a6a      	ldr	r2, [pc, #424]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	6713      	str	r3, [r2, #112]	; 0x70
 80027e6:	4b68      	ldr	r3, [pc, #416]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	4a67      	ldr	r2, [pc, #412]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80027ec:	f023 0304 	bic.w	r3, r3, #4
 80027f0:	6713      	str	r3, [r2, #112]	; 0x70
 80027f2:	e01c      	b.n	800282e <HAL_RCC_OscConfig+0x376>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b05      	cmp	r3, #5
 80027fa:	d10c      	bne.n	8002816 <HAL_RCC_OscConfig+0x35e>
 80027fc:	4b62      	ldr	r3, [pc, #392]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002800:	4a61      	ldr	r2, [pc, #388]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002802:	f043 0304 	orr.w	r3, r3, #4
 8002806:	6713      	str	r3, [r2, #112]	; 0x70
 8002808:	4b5f      	ldr	r3, [pc, #380]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280c:	4a5e      	ldr	r2, [pc, #376]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6713      	str	r3, [r2, #112]	; 0x70
 8002814:	e00b      	b.n	800282e <HAL_RCC_OscConfig+0x376>
 8002816:	4b5c      	ldr	r3, [pc, #368]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281a:	4a5b      	ldr	r2, [pc, #364]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	6713      	str	r3, [r2, #112]	; 0x70
 8002822:	4b59      	ldr	r3, [pc, #356]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002826:	4a58      	ldr	r2, [pc, #352]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002828:	f023 0304 	bic.w	r3, r3, #4
 800282c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d015      	beq.n	8002862 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002836:	f7ff f9bb 	bl	8001bb0 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283c:	e00a      	b.n	8002854 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283e:	f7ff f9b7 	bl	8001bb0 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	f241 3288 	movw	r2, #5000	; 0x1388
 800284c:	4293      	cmp	r3, r2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e0d8      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002854:	4b4c      	ldr	r3, [pc, #304]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0ee      	beq.n	800283e <HAL_RCC_OscConfig+0x386>
 8002860:	e014      	b.n	800288c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002862:	f7ff f9a5 	bl	8001bb0 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002868:	e00a      	b.n	8002880 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286a:	f7ff f9a1 	bl	8001bb0 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f241 3288 	movw	r2, #5000	; 0x1388
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e0c2      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002880:	4b41      	ldr	r3, [pc, #260]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1ee      	bne.n	800286a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800288c:	7dfb      	ldrb	r3, [r7, #23]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d105      	bne.n	800289e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002892:	4b3d      	ldr	r3, [pc, #244]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	4a3c      	ldr	r2, [pc, #240]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800289c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 80ae 	beq.w	8002a04 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028a8:	4b37      	ldr	r3, [pc, #220]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 030c 	and.w	r3, r3, #12
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d06d      	beq.n	8002990 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d14b      	bne.n	8002954 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028bc:	4b32      	ldr	r3, [pc, #200]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a31      	ldr	r2, [pc, #196]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80028c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7ff f972 	bl	8001bb0 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d0:	f7ff f96e 	bl	8001bb0 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e091      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e2:	4b29      	ldr	r3, [pc, #164]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69da      	ldr	r2, [r3, #28]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	019b      	lsls	r3, r3, #6
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002904:	085b      	lsrs	r3, r3, #1
 8002906:	3b01      	subs	r3, #1
 8002908:	041b      	lsls	r3, r3, #16
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	061b      	lsls	r3, r3, #24
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	071b      	lsls	r3, r3, #28
 800291a:	491b      	ldr	r1, [pc, #108]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002920:	4b19      	ldr	r3, [pc, #100]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a18      	ldr	r2, [pc, #96]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800292a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7ff f940 	bl	8001bb0 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7ff f93c 	bl	8001bb0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e05f      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x47c>
 8002952:	e057      	b.n	8002a04 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a0b      	ldr	r2, [pc, #44]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 800295a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800295e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7ff f926 	bl	8001bb0 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002968:	f7ff f922 	bl	8001bb0 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e045      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297a:	4b03      	ldr	r3, [pc, #12]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x4b0>
 8002986:	e03d      	b.n	8002a04 <HAL_RCC_OscConfig+0x54c>
 8002988:	40023800 	.word	0x40023800
 800298c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002990:	4b1f      	ldr	r3, [pc, #124]	; (8002a10 <HAL_RCC_OscConfig+0x558>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d030      	beq.n	8002a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d129      	bne.n	8002a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d122      	bne.n	8002a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029c0:	4013      	ands	r3, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d119      	bne.n	8002a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d6:	085b      	lsrs	r3, r3, #1
 80029d8:	3b01      	subs	r3, #1
 80029da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d10f      	bne.n	8002a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d107      	bne.n	8002a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d001      	beq.n	8002a04 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40023800 	.word	0x40023800

08002a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0d0      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b6a      	ldr	r3, [pc, #424]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 030f 	and.w	r3, r3, #15
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d910      	bls.n	8002a5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b67      	ldr	r3, [pc, #412]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 020f 	bic.w	r2, r3, #15
 8002a42:	4965      	ldr	r1, [pc, #404]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4a:	4b63      	ldr	r3, [pc, #396]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0b8      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d020      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a74:	4b59      	ldr	r3, [pc, #356]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	4a58      	ldr	r2, [pc, #352]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002a7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a8c:	4b53      	ldr	r3, [pc, #332]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4a52      	ldr	r2, [pc, #328]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002a92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a98:	4b50      	ldr	r3, [pc, #320]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	494d      	ldr	r1, [pc, #308]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d040      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	4b47      	ldr	r3, [pc, #284]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d115      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e07f      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad6:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e073      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae6:	4b3d      	ldr	r3, [pc, #244]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e06b      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002af6:	4b39      	ldr	r3, [pc, #228]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4936      	ldr	r1, [pc, #216]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b08:	f7ff f852 	bl	8001bb0 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b10:	f7ff f84e 	bl	8001bb0 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e053      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 020c 	and.w	r2, r3, #12
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d1eb      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b38:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d210      	bcs.n	8002b68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 020f 	bic.w	r2, r3, #15
 8002b4e:	4922      	ldr	r1, [pc, #136]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e032      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4916      	ldr	r1, [pc, #88]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d009      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b92:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	490e      	ldr	r1, [pc, #56]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ba6:	f000 f821 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8002baa:	4602      	mov	r2, r0
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	490a      	ldr	r1, [pc, #40]	; (8002be0 <HAL_RCC_ClockConfig+0x1cc>)
 8002bb8:	5ccb      	ldrb	r3, [r1, r3]
 8002bba:	fa22 f303 	lsr.w	r3, r2, r3
 8002bbe:	4a09      	ldr	r2, [pc, #36]	; (8002be4 <HAL_RCC_ClockConfig+0x1d0>)
 8002bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_RCC_ClockConfig+0x1d4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe ffae 	bl	8001b28 <HAL_InitTick>

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40023c00 	.word	0x40023c00
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	0800723c 	.word	0x0800723c
 8002be4:	20001004 	.word	0x20001004
 8002be8:	20001008 	.word	0x20001008

08002bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bf0:	b084      	sub	sp, #16
 8002bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c04:	4b67      	ldr	r3, [pc, #412]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 030c 	and.w	r3, r3, #12
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d00d      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x40>
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	f200 80bd 	bhi.w	8002d90 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_RCC_GetSysClockFreq+0x34>
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d003      	beq.n	8002c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c1e:	e0b7      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c20:	4b61      	ldr	r3, [pc, #388]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c22:	60bb      	str	r3, [r7, #8]
      break;
 8002c24:	e0b7      	b.n	8002d96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c26:	4b61      	ldr	r3, [pc, #388]	; (8002dac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002c28:	60bb      	str	r3, [r7, #8]
      break;
 8002c2a:	e0b4      	b.n	8002d96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c2c:	4b5d      	ldr	r3, [pc, #372]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c34:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c36:	4b5b      	ldr	r3, [pc, #364]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d04d      	beq.n	8002cde <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c42:	4b58      	ldr	r3, [pc, #352]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	099b      	lsrs	r3, r3, #6
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c52:	f04f 0100 	mov.w	r1, #0
 8002c56:	ea02 0800 	and.w	r8, r2, r0
 8002c5a:	ea03 0901 	and.w	r9, r3, r1
 8002c5e:	4640      	mov	r0, r8
 8002c60:	4649      	mov	r1, r9
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	014b      	lsls	r3, r1, #5
 8002c6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c70:	0142      	lsls	r2, r0, #5
 8002c72:	4610      	mov	r0, r2
 8002c74:	4619      	mov	r1, r3
 8002c76:	ebb0 0008 	subs.w	r0, r0, r8
 8002c7a:	eb61 0109 	sbc.w	r1, r1, r9
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	018b      	lsls	r3, r1, #6
 8002c88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c8c:	0182      	lsls	r2, r0, #6
 8002c8e:	1a12      	subs	r2, r2, r0
 8002c90:	eb63 0301 	sbc.w	r3, r3, r1
 8002c94:	f04f 0000 	mov.w	r0, #0
 8002c98:	f04f 0100 	mov.w	r1, #0
 8002c9c:	00d9      	lsls	r1, r3, #3
 8002c9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ca2:	00d0      	lsls	r0, r2, #3
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	eb12 0208 	adds.w	r2, r2, r8
 8002cac:	eb43 0309 	adc.w	r3, r3, r9
 8002cb0:	f04f 0000 	mov.w	r0, #0
 8002cb4:	f04f 0100 	mov.w	r1, #0
 8002cb8:	0259      	lsls	r1, r3, #9
 8002cba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002cbe:	0250      	lsls	r0, r2, #9
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	f7fd fb0e 	bl	80002f0 <__aeabi_uldivmod>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4613      	mov	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	e04a      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cde:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	099b      	lsrs	r3, r3, #6
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	f04f 0300 	mov.w	r3, #0
 8002cea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cee:	f04f 0100 	mov.w	r1, #0
 8002cf2:	ea02 0400 	and.w	r4, r2, r0
 8002cf6:	ea03 0501 	and.w	r5, r3, r1
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	014b      	lsls	r3, r1, #5
 8002d08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d0c:	0142      	lsls	r2, r0, #5
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	1b00      	subs	r0, r0, r4
 8002d14:	eb61 0105 	sbc.w	r1, r1, r5
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	018b      	lsls	r3, r1, #6
 8002d22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d26:	0182      	lsls	r2, r0, #6
 8002d28:	1a12      	subs	r2, r2, r0
 8002d2a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d2e:	f04f 0000 	mov.w	r0, #0
 8002d32:	f04f 0100 	mov.w	r1, #0
 8002d36:	00d9      	lsls	r1, r3, #3
 8002d38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d3c:	00d0      	lsls	r0, r2, #3
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	1912      	adds	r2, r2, r4
 8002d44:	eb45 0303 	adc.w	r3, r5, r3
 8002d48:	f04f 0000 	mov.w	r0, #0
 8002d4c:	f04f 0100 	mov.w	r1, #0
 8002d50:	0299      	lsls	r1, r3, #10
 8002d52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d56:	0290      	lsls	r0, r2, #10
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	4619      	mov	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	f7fd fac2 	bl	80002f0 <__aeabi_uldivmod>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4613      	mov	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	0c1b      	lsrs	r3, r3, #16
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	3301      	adds	r3, #1
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8c:	60bb      	str	r3, [r7, #8]
      break;
 8002d8e:	e002      	b.n	8002d96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d92:	60bb      	str	r3, [r7, #8]
      break;
 8002d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d96:	68bb      	ldr	r3, [r7, #8]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800
 8002da8:	00f42400 	.word	0x00f42400
 8002dac:	007a1200 	.word	0x007a1200

08002db0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db4:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002db6:	681b      	ldr	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20001004 	.word	0x20001004

08002dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dcc:	f7ff fff0 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	0a9b      	lsrs	r3, r3, #10
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	4903      	ldr	r1, [pc, #12]	; (8002dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dde:	5ccb      	ldrb	r3, [r1, r3]
 8002de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40023800 	.word	0x40023800
 8002dec:	0800724c 	.word	0x0800724c

08002df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002df4:	f7ff ffdc 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	0b5b      	lsrs	r3, r3, #13
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	4903      	ldr	r1, [pc, #12]	; (8002e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e06:	5ccb      	ldrb	r3, [r1, r3]
 8002e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40023800 	.word	0x40023800
 8002e14:	0800724c 	.word	0x0800724c

08002e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d012      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e40:	4b69      	ldr	r3, [pc, #420]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	4a68      	ldr	r2, [pc, #416]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e4a:	6093      	str	r3, [r2, #8]
 8002e4c:	4b66      	ldr	r3, [pc, #408]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e54:	4964      	ldr	r1, [pc, #400]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e62:	2301      	movs	r3, #1
 8002e64:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d017      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e72:	4b5d      	ldr	r3, [pc, #372]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e80:	4959      	ldr	r1, [pc, #356]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e90:	d101      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e92:	2301      	movs	r3, #1
 8002e94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d017      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eae:	4b4e      	ldr	r3, [pc, #312]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	494a      	ldr	r1, [pc, #296]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002eda:	2301      	movs	r3, #1
 8002edc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002eea:	2301      	movs	r3, #1
 8002eec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 808b 	beq.w	8003012 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002efc:	4b3a      	ldr	r3, [pc, #232]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	4a39      	ldr	r2, [pc, #228]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f06:	6413      	str	r3, [r2, #64]	; 0x40
 8002f08:	4b37      	ldr	r3, [pc, #220]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f14:	4b35      	ldr	r3, [pc, #212]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a34      	ldr	r2, [pc, #208]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f20:	f7fe fe46 	bl	8001bb0 <HAL_GetTick>
 8002f24:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f28:	f7fe fe42 	bl	8001bb0 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	; 0x64
 8002f34:	d901      	bls.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e38f      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f3a:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f46:	4b28      	ldr	r3, [pc, #160]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d035      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d02e      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f64:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f6c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f6e:	4b1e      	ldr	r3, [pc, #120]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	4a1d      	ldr	r2, [pc, #116]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f78:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	4a1a      	ldr	r2, [pc, #104]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f86:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f8c:	4b16      	ldr	r3, [pc, #88]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d114      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fe fe0a 	bl	8001bb0 <HAL_GetTick>
 8002f9c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa0:	f7fe fe06 	bl	8001bb0 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e351      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb6:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0ee      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fce:	d111      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fdc:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fde:	400b      	ands	r3, r1
 8002fe0:	4901      	ldr	r1, [pc, #4]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
 8002fe6:	e00b      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40007000 	.word	0x40007000
 8002ff0:	0ffffcff 	.word	0x0ffffcff
 8002ff4:	4bb3      	ldr	r3, [pc, #716]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4ab2      	ldr	r2, [pc, #712]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ffa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ffe:	6093      	str	r3, [r2, #8]
 8003000:	4bb0      	ldr	r3, [pc, #704]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003002:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300c:	49ad      	ldr	r1, [pc, #692]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800300e:	4313      	orrs	r3, r2
 8003010:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	2b00      	cmp	r3, #0
 800301c:	d010      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800301e:	4ba9      	ldr	r3, [pc, #676]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003024:	4aa7      	ldr	r2, [pc, #668]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800302a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800302e:	4ba5      	ldr	r3, [pc, #660]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003030:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	49a2      	ldr	r1, [pc, #648]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800304c:	4b9d      	ldr	r3, [pc, #628]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800305a:	499a      	ldr	r1, [pc, #616]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800306e:	4b95      	ldr	r3, [pc, #596]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800307c:	4991      	ldr	r1, [pc, #580]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003090:	4b8c      	ldr	r3, [pc, #560]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003096:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800309e:	4989      	ldr	r1, [pc, #548]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030b2:	4b84      	ldr	r3, [pc, #528]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c0:	4980      	ldr	r1, [pc, #512]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d4:	4b7b      	ldr	r3, [pc, #492]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	f023 0203 	bic.w	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	4978      	ldr	r1, [pc, #480]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030f6:	4b73      	ldr	r3, [pc, #460]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	f023 020c 	bic.w	r2, r3, #12
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003104:	496f      	ldr	r1, [pc, #444]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003118:	4b6a      	ldr	r3, [pc, #424]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003126:	4967      	ldr	r1, [pc, #412]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800313a:	4b62      	ldr	r3, [pc, #392]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003140:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003148:	495e      	ldr	r1, [pc, #376]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800315c:	4b59      	ldr	r3, [pc, #356]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	4956      	ldr	r1, [pc, #344]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800317e:	4b51      	ldr	r3, [pc, #324]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003184:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318c:	494d      	ldr	r1, [pc, #308]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80031a0:	4b48      	ldr	r3, [pc, #288]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ae:	4945      	ldr	r1, [pc, #276]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031c2:	4b40      	ldr	r3, [pc, #256]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d0:	493c      	ldr	r1, [pc, #240]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031e4:	4b37      	ldr	r3, [pc, #220]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031f2:	4934      	ldr	r1, [pc, #208]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d011      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003206:	4b2f      	ldr	r3, [pc, #188]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003214:	492b      	ldr	r1, [pc, #172]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003224:	d101      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003226:	2301      	movs	r3, #1
 8003228:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003236:	2301      	movs	r3, #1
 8003238:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003246:	4b1f      	ldr	r3, [pc, #124]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003254:	491b      	ldr	r1, [pc, #108]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00b      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003268:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003278:	4912      	ldr	r1, [pc, #72]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00b      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800328c:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003292:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800329c:	4909      	ldr	r1, [pc, #36]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00f      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032b0:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c0:	e002      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	4986      	ldr	r1, [pc, #536]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00b      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032dc:	4b81      	ldr	r3, [pc, #516]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ec:	497d      	ldr	r1, [pc, #500]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d006      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 80d6 	beq.w	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003308:	4b76      	ldr	r3, [pc, #472]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a75      	ldr	r2, [pc, #468]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800330e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003312:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003314:	f7fe fc4c 	bl	8001bb0 <HAL_GetTick>
 8003318:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800331c:	f7fe fc48 	bl	8001bb0 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e195      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800332e:	4b6d      	ldr	r3, [pc, #436]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d021      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334a:	2b00      	cmp	r3, #0
 800334c:	d11d      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800334e:	4b65      	ldr	r3, [pc, #404]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003354:	0c1b      	lsrs	r3, r3, #16
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800335c:	4b61      	ldr	r3, [pc, #388]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800335e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003362:	0e1b      	lsrs	r3, r3, #24
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	019a      	lsls	r2, r3, #6
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	041b      	lsls	r3, r3, #16
 8003374:	431a      	orrs	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	061b      	lsls	r3, r3, #24
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	071b      	lsls	r3, r3, #28
 8003382:	4958      	ldr	r1, [pc, #352]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d004      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800339e:	d00a      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d02e      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b4:	d129      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033b6:	4b4b      	ldr	r3, [pc, #300]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033bc:	0c1b      	lsrs	r3, r3, #16
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033c4:	4b47      	ldr	r3, [pc, #284]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ca:	0f1b      	lsrs	r3, r3, #28
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	019a      	lsls	r2, r3, #6
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	041b      	lsls	r3, r3, #16
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	061b      	lsls	r3, r3, #24
 80033e4:	431a      	orrs	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	071b      	lsls	r3, r3, #28
 80033ea:	493e      	ldr	r1, [pc, #248]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033f2:	4b3c      	ldr	r3, [pc, #240]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f8:	f023 021f 	bic.w	r2, r3, #31
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	3b01      	subs	r3, #1
 8003402:	4938      	ldr	r1, [pc, #224]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d01d      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003416:	4b33      	ldr	r3, [pc, #204]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800341c:	0e1b      	lsrs	r3, r3, #24
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003424:	4b2f      	ldr	r3, [pc, #188]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800342a:	0f1b      	lsrs	r3, r3, #28
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	019a      	lsls	r2, r3, #6
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	431a      	orrs	r2, r3
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	061b      	lsls	r3, r3, #24
 8003444:	431a      	orrs	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	071b      	lsls	r3, r3, #28
 800344a:	4926      	ldr	r1, [pc, #152]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d011      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	019a      	lsls	r2, r3, #6
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	071b      	lsls	r3, r3, #28
 800347a:	491a      	ldr	r1, [pc, #104]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003482:	4b18      	ldr	r3, [pc, #96]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a17      	ldr	r2, [pc, #92]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003488:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800348c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800348e:	f7fe fb8f 	bl	8001bb0 <HAL_GetTick>
 8003492:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003496:	f7fe fb8b 	bl	8001bb0 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b64      	cmp	r3, #100	; 0x64
 80034a2:	d901      	bls.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e0d8      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034a8:	4b0e      	ldr	r3, [pc, #56]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	f040 80ce 	bne.w	8003658 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034bc:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a08      	ldr	r2, [pc, #32]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c8:	f7fe fb72 	bl	8001bb0 <HAL_GetTick>
 80034cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034ce:	e00b      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034d0:	f7fe fb6e 	bl	8001bb0 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	; 0x64
 80034dc:	d904      	bls.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e0bb      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034e8:	4b5e      	ldr	r3, [pc, #376]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034f4:	d0ec      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d009      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003512:	2b00      	cmp	r3, #0
 8003514:	d02e      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d12a      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800351e:	4b51      	ldr	r3, [pc, #324]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003524:	0c1b      	lsrs	r3, r3, #16
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800352c:	4b4d      	ldr	r3, [pc, #308]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003532:	0f1b      	lsrs	r3, r3, #28
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	019a      	lsls	r2, r3, #6
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	041b      	lsls	r3, r3, #16
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	061b      	lsls	r3, r3, #24
 800354c:	431a      	orrs	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	071b      	lsls	r3, r3, #28
 8003552:	4944      	ldr	r1, [pc, #272]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800355a:	4b42      	ldr	r3, [pc, #264]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800355c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003560:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	3b01      	subs	r3, #1
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	493d      	ldr	r1, [pc, #244]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d022      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003588:	d11d      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800358a:	4b36      	ldr	r3, [pc, #216]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800358c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003590:	0e1b      	lsrs	r3, r3, #24
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003598:	4b32      	ldr	r3, [pc, #200]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359e:	0f1b      	lsrs	r3, r3, #28
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	019a      	lsls	r2, r3, #6
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	041b      	lsls	r3, r3, #16
 80035b2:	431a      	orrs	r2, r3
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	061b      	lsls	r3, r3, #24
 80035b8:	431a      	orrs	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	071b      	lsls	r3, r3, #28
 80035be:	4929      	ldr	r1, [pc, #164]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d028      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035d2:	4b24      	ldr	r3, [pc, #144]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d8:	0e1b      	lsrs	r3, r3, #24
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035e0:	4b20      	ldr	r3, [pc, #128]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e6:	0c1b      	lsrs	r3, r3, #16
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	019a      	lsls	r2, r3, #6
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	041b      	lsls	r3, r3, #16
 80035f8:	431a      	orrs	r2, r3
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	061b      	lsls	r3, r3, #24
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	071b      	lsls	r3, r3, #28
 8003606:	4917      	ldr	r1, [pc, #92]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800360e:	4b15      	ldr	r3, [pc, #84]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003614:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	4911      	ldr	r1, [pc, #68]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003624:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a0e      	ldr	r2, [pc, #56]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800362a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003630:	f7fe fabe 	bl	8001bb0 <HAL_GetTick>
 8003634:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003636:	e008      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003638:	f7fe faba 	bl	8001bb0 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e007      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800364a:	4b06      	ldr	r3, [pc, #24]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003656:	d1ef      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3720      	adds	r7, #32
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800

08003668 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e040      	b.n	80036fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fd fa0a 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2224      	movs	r2, #36	; 0x24
 8003694:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0201 	bic.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f8c0 	bl	800382c <UART_SetConfig>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e022      	b.n	80036fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fb16 	bl	8003cf0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fb9d 	bl	8003e34 <UART_CheckIdleState>
 80036fa:	4603      	mov	r3, r0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08a      	sub	sp, #40	; 0x28
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	4613      	mov	r3, r2
 8003712:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003718:	2b20      	cmp	r3, #32
 800371a:	f040 8081 	bne.w	8003820 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <HAL_UART_Transmit+0x26>
 8003724:	88fb      	ldrh	r3, [r7, #6]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e079      	b.n	8003822 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_UART_Transmit+0x38>
 8003738:	2302      	movs	r3, #2
 800373a:	e072      	b.n	8003822 <HAL_UART_Transmit+0x11e>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2221      	movs	r2, #33	; 0x21
 8003750:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003752:	f7fe fa2d 	bl	8001bb0 <HAL_GetTick>
 8003756:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	88fa      	ldrh	r2, [r7, #6]
 800375c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	88fa      	ldrh	r2, [r7, #6]
 8003764:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003770:	d108      	bne.n	8003784 <HAL_UART_Transmit+0x80>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d104      	bne.n	8003784 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	e003      	b.n	800378c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003788:	2300      	movs	r3, #0
 800378a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003794:	e02c      	b.n	80037f0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2200      	movs	r2, #0
 800379e:	2180      	movs	r1, #128	; 0x80
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 fb90 	bl	8003ec6 <UART_WaitOnFlagUntilTimeout>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e038      	b.n	8003822 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10b      	bne.n	80037ce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	3302      	adds	r3, #2
 80037ca:	61bb      	str	r3, [r7, #24]
 80037cc:	e007      	b.n	80037de <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	781a      	ldrb	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	3301      	adds	r3, #1
 80037dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1cc      	bne.n	8003796 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2200      	movs	r2, #0
 8003804:	2140      	movs	r1, #64	; 0x40
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 fb5d 	bl	8003ec6 <UART_WaitOnFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e005      	b.n	8003822 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2220      	movs	r2, #32
 800381a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	e000      	b.n	8003822 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003820:	2302      	movs	r3, #2
  }
}
 8003822:	4618      	mov	r0, r3
 8003824:	3720      	adds	r7, #32
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	4313      	orrs	r3, r2
 800384e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	4ba7      	ldr	r3, [pc, #668]	; (8003af4 <UART_SetConfig+0x2c8>)
 8003858:	4013      	ands	r3, r2
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6812      	ldr	r2, [r2, #0]
 800385e:	6979      	ldr	r1, [r7, #20]
 8003860:	430b      	orrs	r3, r1
 8003862:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	430a      	orrs	r2, r1
 800389c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a95      	ldr	r2, [pc, #596]	; (8003af8 <UART_SetConfig+0x2cc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d120      	bne.n	80038ea <UART_SetConfig+0xbe>
 80038a8:	4b94      	ldr	r3, [pc, #592]	; (8003afc <UART_SetConfig+0x2d0>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d816      	bhi.n	80038e4 <UART_SetConfig+0xb8>
 80038b6:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <UART_SetConfig+0x90>)
 80038b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038bc:	080038cd 	.word	0x080038cd
 80038c0:	080038d9 	.word	0x080038d9
 80038c4:	080038d3 	.word	0x080038d3
 80038c8:	080038df 	.word	0x080038df
 80038cc:	2301      	movs	r3, #1
 80038ce:	77fb      	strb	r3, [r7, #31]
 80038d0:	e14f      	b.n	8003b72 <UART_SetConfig+0x346>
 80038d2:	2302      	movs	r3, #2
 80038d4:	77fb      	strb	r3, [r7, #31]
 80038d6:	e14c      	b.n	8003b72 <UART_SetConfig+0x346>
 80038d8:	2304      	movs	r3, #4
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	e149      	b.n	8003b72 <UART_SetConfig+0x346>
 80038de:	2308      	movs	r3, #8
 80038e0:	77fb      	strb	r3, [r7, #31]
 80038e2:	e146      	b.n	8003b72 <UART_SetConfig+0x346>
 80038e4:	2310      	movs	r3, #16
 80038e6:	77fb      	strb	r3, [r7, #31]
 80038e8:	e143      	b.n	8003b72 <UART_SetConfig+0x346>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a84      	ldr	r2, [pc, #528]	; (8003b00 <UART_SetConfig+0x2d4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d132      	bne.n	800395a <UART_SetConfig+0x12e>
 80038f4:	4b81      	ldr	r3, [pc, #516]	; (8003afc <UART_SetConfig+0x2d0>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fa:	f003 030c 	and.w	r3, r3, #12
 80038fe:	2b0c      	cmp	r3, #12
 8003900:	d828      	bhi.n	8003954 <UART_SetConfig+0x128>
 8003902:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <UART_SetConfig+0xdc>)
 8003904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003908:	0800393d 	.word	0x0800393d
 800390c:	08003955 	.word	0x08003955
 8003910:	08003955 	.word	0x08003955
 8003914:	08003955 	.word	0x08003955
 8003918:	08003949 	.word	0x08003949
 800391c:	08003955 	.word	0x08003955
 8003920:	08003955 	.word	0x08003955
 8003924:	08003955 	.word	0x08003955
 8003928:	08003943 	.word	0x08003943
 800392c:	08003955 	.word	0x08003955
 8003930:	08003955 	.word	0x08003955
 8003934:	08003955 	.word	0x08003955
 8003938:	0800394f 	.word	0x0800394f
 800393c:	2300      	movs	r3, #0
 800393e:	77fb      	strb	r3, [r7, #31]
 8003940:	e117      	b.n	8003b72 <UART_SetConfig+0x346>
 8003942:	2302      	movs	r3, #2
 8003944:	77fb      	strb	r3, [r7, #31]
 8003946:	e114      	b.n	8003b72 <UART_SetConfig+0x346>
 8003948:	2304      	movs	r3, #4
 800394a:	77fb      	strb	r3, [r7, #31]
 800394c:	e111      	b.n	8003b72 <UART_SetConfig+0x346>
 800394e:	2308      	movs	r3, #8
 8003950:	77fb      	strb	r3, [r7, #31]
 8003952:	e10e      	b.n	8003b72 <UART_SetConfig+0x346>
 8003954:	2310      	movs	r3, #16
 8003956:	77fb      	strb	r3, [r7, #31]
 8003958:	e10b      	b.n	8003b72 <UART_SetConfig+0x346>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a69      	ldr	r2, [pc, #420]	; (8003b04 <UART_SetConfig+0x2d8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d120      	bne.n	80039a6 <UART_SetConfig+0x17a>
 8003964:	4b65      	ldr	r3, [pc, #404]	; (8003afc <UART_SetConfig+0x2d0>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800396e:	2b30      	cmp	r3, #48	; 0x30
 8003970:	d013      	beq.n	800399a <UART_SetConfig+0x16e>
 8003972:	2b30      	cmp	r3, #48	; 0x30
 8003974:	d814      	bhi.n	80039a0 <UART_SetConfig+0x174>
 8003976:	2b20      	cmp	r3, #32
 8003978:	d009      	beq.n	800398e <UART_SetConfig+0x162>
 800397a:	2b20      	cmp	r3, #32
 800397c:	d810      	bhi.n	80039a0 <UART_SetConfig+0x174>
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <UART_SetConfig+0x15c>
 8003982:	2b10      	cmp	r3, #16
 8003984:	d006      	beq.n	8003994 <UART_SetConfig+0x168>
 8003986:	e00b      	b.n	80039a0 <UART_SetConfig+0x174>
 8003988:	2300      	movs	r3, #0
 800398a:	77fb      	strb	r3, [r7, #31]
 800398c:	e0f1      	b.n	8003b72 <UART_SetConfig+0x346>
 800398e:	2302      	movs	r3, #2
 8003990:	77fb      	strb	r3, [r7, #31]
 8003992:	e0ee      	b.n	8003b72 <UART_SetConfig+0x346>
 8003994:	2304      	movs	r3, #4
 8003996:	77fb      	strb	r3, [r7, #31]
 8003998:	e0eb      	b.n	8003b72 <UART_SetConfig+0x346>
 800399a:	2308      	movs	r3, #8
 800399c:	77fb      	strb	r3, [r7, #31]
 800399e:	e0e8      	b.n	8003b72 <UART_SetConfig+0x346>
 80039a0:	2310      	movs	r3, #16
 80039a2:	77fb      	strb	r3, [r7, #31]
 80039a4:	e0e5      	b.n	8003b72 <UART_SetConfig+0x346>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a57      	ldr	r2, [pc, #348]	; (8003b08 <UART_SetConfig+0x2dc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d120      	bne.n	80039f2 <UART_SetConfig+0x1c6>
 80039b0:	4b52      	ldr	r3, [pc, #328]	; (8003afc <UART_SetConfig+0x2d0>)
 80039b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039ba:	2bc0      	cmp	r3, #192	; 0xc0
 80039bc:	d013      	beq.n	80039e6 <UART_SetConfig+0x1ba>
 80039be:	2bc0      	cmp	r3, #192	; 0xc0
 80039c0:	d814      	bhi.n	80039ec <UART_SetConfig+0x1c0>
 80039c2:	2b80      	cmp	r3, #128	; 0x80
 80039c4:	d009      	beq.n	80039da <UART_SetConfig+0x1ae>
 80039c6:	2b80      	cmp	r3, #128	; 0x80
 80039c8:	d810      	bhi.n	80039ec <UART_SetConfig+0x1c0>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <UART_SetConfig+0x1a8>
 80039ce:	2b40      	cmp	r3, #64	; 0x40
 80039d0:	d006      	beq.n	80039e0 <UART_SetConfig+0x1b4>
 80039d2:	e00b      	b.n	80039ec <UART_SetConfig+0x1c0>
 80039d4:	2300      	movs	r3, #0
 80039d6:	77fb      	strb	r3, [r7, #31]
 80039d8:	e0cb      	b.n	8003b72 <UART_SetConfig+0x346>
 80039da:	2302      	movs	r3, #2
 80039dc:	77fb      	strb	r3, [r7, #31]
 80039de:	e0c8      	b.n	8003b72 <UART_SetConfig+0x346>
 80039e0:	2304      	movs	r3, #4
 80039e2:	77fb      	strb	r3, [r7, #31]
 80039e4:	e0c5      	b.n	8003b72 <UART_SetConfig+0x346>
 80039e6:	2308      	movs	r3, #8
 80039e8:	77fb      	strb	r3, [r7, #31]
 80039ea:	e0c2      	b.n	8003b72 <UART_SetConfig+0x346>
 80039ec:	2310      	movs	r3, #16
 80039ee:	77fb      	strb	r3, [r7, #31]
 80039f0:	e0bf      	b.n	8003b72 <UART_SetConfig+0x346>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a45      	ldr	r2, [pc, #276]	; (8003b0c <UART_SetConfig+0x2e0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d125      	bne.n	8003a48 <UART_SetConfig+0x21c>
 80039fc:	4b3f      	ldr	r3, [pc, #252]	; (8003afc <UART_SetConfig+0x2d0>)
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a0a:	d017      	beq.n	8003a3c <UART_SetConfig+0x210>
 8003a0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a10:	d817      	bhi.n	8003a42 <UART_SetConfig+0x216>
 8003a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a16:	d00b      	beq.n	8003a30 <UART_SetConfig+0x204>
 8003a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a1c:	d811      	bhi.n	8003a42 <UART_SetConfig+0x216>
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <UART_SetConfig+0x1fe>
 8003a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a26:	d006      	beq.n	8003a36 <UART_SetConfig+0x20a>
 8003a28:	e00b      	b.n	8003a42 <UART_SetConfig+0x216>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	77fb      	strb	r3, [r7, #31]
 8003a2e:	e0a0      	b.n	8003b72 <UART_SetConfig+0x346>
 8003a30:	2302      	movs	r3, #2
 8003a32:	77fb      	strb	r3, [r7, #31]
 8003a34:	e09d      	b.n	8003b72 <UART_SetConfig+0x346>
 8003a36:	2304      	movs	r3, #4
 8003a38:	77fb      	strb	r3, [r7, #31]
 8003a3a:	e09a      	b.n	8003b72 <UART_SetConfig+0x346>
 8003a3c:	2308      	movs	r3, #8
 8003a3e:	77fb      	strb	r3, [r7, #31]
 8003a40:	e097      	b.n	8003b72 <UART_SetConfig+0x346>
 8003a42:	2310      	movs	r3, #16
 8003a44:	77fb      	strb	r3, [r7, #31]
 8003a46:	e094      	b.n	8003b72 <UART_SetConfig+0x346>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a30      	ldr	r2, [pc, #192]	; (8003b10 <UART_SetConfig+0x2e4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d125      	bne.n	8003a9e <UART_SetConfig+0x272>
 8003a52:	4b2a      	ldr	r3, [pc, #168]	; (8003afc <UART_SetConfig+0x2d0>)
 8003a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a60:	d017      	beq.n	8003a92 <UART_SetConfig+0x266>
 8003a62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a66:	d817      	bhi.n	8003a98 <UART_SetConfig+0x26c>
 8003a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a6c:	d00b      	beq.n	8003a86 <UART_SetConfig+0x25a>
 8003a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a72:	d811      	bhi.n	8003a98 <UART_SetConfig+0x26c>
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <UART_SetConfig+0x254>
 8003a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a7c:	d006      	beq.n	8003a8c <UART_SetConfig+0x260>
 8003a7e:	e00b      	b.n	8003a98 <UART_SetConfig+0x26c>
 8003a80:	2301      	movs	r3, #1
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	e075      	b.n	8003b72 <UART_SetConfig+0x346>
 8003a86:	2302      	movs	r3, #2
 8003a88:	77fb      	strb	r3, [r7, #31]
 8003a8a:	e072      	b.n	8003b72 <UART_SetConfig+0x346>
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	77fb      	strb	r3, [r7, #31]
 8003a90:	e06f      	b.n	8003b72 <UART_SetConfig+0x346>
 8003a92:	2308      	movs	r3, #8
 8003a94:	77fb      	strb	r3, [r7, #31]
 8003a96:	e06c      	b.n	8003b72 <UART_SetConfig+0x346>
 8003a98:	2310      	movs	r3, #16
 8003a9a:	77fb      	strb	r3, [r7, #31]
 8003a9c:	e069      	b.n	8003b72 <UART_SetConfig+0x346>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a1c      	ldr	r2, [pc, #112]	; (8003b14 <UART_SetConfig+0x2e8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d137      	bne.n	8003b18 <UART_SetConfig+0x2ec>
 8003aa8:	4b14      	ldr	r3, [pc, #80]	; (8003afc <UART_SetConfig+0x2d0>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003ab2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ab6:	d017      	beq.n	8003ae8 <UART_SetConfig+0x2bc>
 8003ab8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003abc:	d817      	bhi.n	8003aee <UART_SetConfig+0x2c2>
 8003abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac2:	d00b      	beq.n	8003adc <UART_SetConfig+0x2b0>
 8003ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac8:	d811      	bhi.n	8003aee <UART_SetConfig+0x2c2>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <UART_SetConfig+0x2aa>
 8003ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad2:	d006      	beq.n	8003ae2 <UART_SetConfig+0x2b6>
 8003ad4:	e00b      	b.n	8003aee <UART_SetConfig+0x2c2>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	77fb      	strb	r3, [r7, #31]
 8003ada:	e04a      	b.n	8003b72 <UART_SetConfig+0x346>
 8003adc:	2302      	movs	r3, #2
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	e047      	b.n	8003b72 <UART_SetConfig+0x346>
 8003ae2:	2304      	movs	r3, #4
 8003ae4:	77fb      	strb	r3, [r7, #31]
 8003ae6:	e044      	b.n	8003b72 <UART_SetConfig+0x346>
 8003ae8:	2308      	movs	r3, #8
 8003aea:	77fb      	strb	r3, [r7, #31]
 8003aec:	e041      	b.n	8003b72 <UART_SetConfig+0x346>
 8003aee:	2310      	movs	r3, #16
 8003af0:	77fb      	strb	r3, [r7, #31]
 8003af2:	e03e      	b.n	8003b72 <UART_SetConfig+0x346>
 8003af4:	efff69f3 	.word	0xefff69f3
 8003af8:	40011000 	.word	0x40011000
 8003afc:	40023800 	.word	0x40023800
 8003b00:	40004400 	.word	0x40004400
 8003b04:	40004800 	.word	0x40004800
 8003b08:	40004c00 	.word	0x40004c00
 8003b0c:	40005000 	.word	0x40005000
 8003b10:	40011400 	.word	0x40011400
 8003b14:	40007800 	.word	0x40007800
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a71      	ldr	r2, [pc, #452]	; (8003ce4 <UART_SetConfig+0x4b8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d125      	bne.n	8003b6e <UART_SetConfig+0x342>
 8003b22:	4b71      	ldr	r3, [pc, #452]	; (8003ce8 <UART_SetConfig+0x4bc>)
 8003b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b2c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b30:	d017      	beq.n	8003b62 <UART_SetConfig+0x336>
 8003b32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b36:	d817      	bhi.n	8003b68 <UART_SetConfig+0x33c>
 8003b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b3c:	d00b      	beq.n	8003b56 <UART_SetConfig+0x32a>
 8003b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b42:	d811      	bhi.n	8003b68 <UART_SetConfig+0x33c>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <UART_SetConfig+0x324>
 8003b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b4c:	d006      	beq.n	8003b5c <UART_SetConfig+0x330>
 8003b4e:	e00b      	b.n	8003b68 <UART_SetConfig+0x33c>
 8003b50:	2300      	movs	r3, #0
 8003b52:	77fb      	strb	r3, [r7, #31]
 8003b54:	e00d      	b.n	8003b72 <UART_SetConfig+0x346>
 8003b56:	2302      	movs	r3, #2
 8003b58:	77fb      	strb	r3, [r7, #31]
 8003b5a:	e00a      	b.n	8003b72 <UART_SetConfig+0x346>
 8003b5c:	2304      	movs	r3, #4
 8003b5e:	77fb      	strb	r3, [r7, #31]
 8003b60:	e007      	b.n	8003b72 <UART_SetConfig+0x346>
 8003b62:	2308      	movs	r3, #8
 8003b64:	77fb      	strb	r3, [r7, #31]
 8003b66:	e004      	b.n	8003b72 <UART_SetConfig+0x346>
 8003b68:	2310      	movs	r3, #16
 8003b6a:	77fb      	strb	r3, [r7, #31]
 8003b6c:	e001      	b.n	8003b72 <UART_SetConfig+0x346>
 8003b6e:	2310      	movs	r3, #16
 8003b70:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b7a:	d15b      	bne.n	8003c34 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003b7c:	7ffb      	ldrb	r3, [r7, #31]
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d827      	bhi.n	8003bd2 <UART_SetConfig+0x3a6>
 8003b82:	a201      	add	r2, pc, #4	; (adr r2, 8003b88 <UART_SetConfig+0x35c>)
 8003b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b88:	08003bad 	.word	0x08003bad
 8003b8c:	08003bb5 	.word	0x08003bb5
 8003b90:	08003bbd 	.word	0x08003bbd
 8003b94:	08003bd3 	.word	0x08003bd3
 8003b98:	08003bc3 	.word	0x08003bc3
 8003b9c:	08003bd3 	.word	0x08003bd3
 8003ba0:	08003bd3 	.word	0x08003bd3
 8003ba4:	08003bd3 	.word	0x08003bd3
 8003ba8:	08003bcb 	.word	0x08003bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bac:	f7ff f90c 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 8003bb0:	61b8      	str	r0, [r7, #24]
        break;
 8003bb2:	e013      	b.n	8003bdc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bb4:	f7ff f91c 	bl	8002df0 <HAL_RCC_GetPCLK2Freq>
 8003bb8:	61b8      	str	r0, [r7, #24]
        break;
 8003bba:	e00f      	b.n	8003bdc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bbc:	4b4b      	ldr	r3, [pc, #300]	; (8003cec <UART_SetConfig+0x4c0>)
 8003bbe:	61bb      	str	r3, [r7, #24]
        break;
 8003bc0:	e00c      	b.n	8003bdc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bc2:	f7ff f813 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8003bc6:	61b8      	str	r0, [r7, #24]
        break;
 8003bc8:	e008      	b.n	8003bdc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bce:	61bb      	str	r3, [r7, #24]
        break;
 8003bd0:	e004      	b.n	8003bdc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	77bb      	strb	r3, [r7, #30]
        break;
 8003bda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d074      	beq.n	8003ccc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	005a      	lsls	r2, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	085b      	lsrs	r3, r3, #1
 8003bec:	441a      	add	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	2b0f      	cmp	r3, #15
 8003bfe:	d916      	bls.n	8003c2e <UART_SetConfig+0x402>
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c06:	d212      	bcs.n	8003c2e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f023 030f 	bic.w	r3, r3, #15
 8003c10:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	085b      	lsrs	r3, r3, #1
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	89fb      	ldrh	r3, [r7, #14]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	89fa      	ldrh	r2, [r7, #14]
 8003c2a:	60da      	str	r2, [r3, #12]
 8003c2c:	e04e      	b.n	8003ccc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	77bb      	strb	r3, [r7, #30]
 8003c32:	e04b      	b.n	8003ccc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c34:	7ffb      	ldrb	r3, [r7, #31]
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d827      	bhi.n	8003c8a <UART_SetConfig+0x45e>
 8003c3a:	a201      	add	r2, pc, #4	; (adr r2, 8003c40 <UART_SetConfig+0x414>)
 8003c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c40:	08003c65 	.word	0x08003c65
 8003c44:	08003c6d 	.word	0x08003c6d
 8003c48:	08003c75 	.word	0x08003c75
 8003c4c:	08003c8b 	.word	0x08003c8b
 8003c50:	08003c7b 	.word	0x08003c7b
 8003c54:	08003c8b 	.word	0x08003c8b
 8003c58:	08003c8b 	.word	0x08003c8b
 8003c5c:	08003c8b 	.word	0x08003c8b
 8003c60:	08003c83 	.word	0x08003c83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c64:	f7ff f8b0 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 8003c68:	61b8      	str	r0, [r7, #24]
        break;
 8003c6a:	e013      	b.n	8003c94 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c6c:	f7ff f8c0 	bl	8002df0 <HAL_RCC_GetPCLK2Freq>
 8003c70:	61b8      	str	r0, [r7, #24]
        break;
 8003c72:	e00f      	b.n	8003c94 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c74:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <UART_SetConfig+0x4c0>)
 8003c76:	61bb      	str	r3, [r7, #24]
        break;
 8003c78:	e00c      	b.n	8003c94 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c7a:	f7fe ffb7 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8003c7e:	61b8      	str	r0, [r7, #24]
        break;
 8003c80:	e008      	b.n	8003c94 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c86:	61bb      	str	r3, [r7, #24]
        break;
 8003c88:	e004      	b.n	8003c94 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	77bb      	strb	r3, [r7, #30]
        break;
 8003c92:	bf00      	nop
    }

    if (pclk != 0U)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d018      	beq.n	8003ccc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	085a      	lsrs	r2, r3, #1
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	441a      	add	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	2b0f      	cmp	r3, #15
 8003cb4:	d908      	bls.n	8003cc8 <UART_SetConfig+0x49c>
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbc:	d204      	bcs.n	8003cc8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	e001      	b.n	8003ccc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003cd8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3720      	adds	r7, #32
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40007c00 	.word	0x40007c00
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	00f42400 	.word	0x00f42400

08003cf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00a      	beq.n	8003d1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01a      	beq.n	8003e06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dee:	d10a      	bne.n	8003e06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	605a      	str	r2, [r3, #4]
  }
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e44:	f7fd feb4 	bl	8001bb0 <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d10e      	bne.n	8003e76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f82d 	bl	8003ec6 <UART_WaitOnFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e023      	b.n	8003ebe <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d10e      	bne.n	8003ea2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f817 	bl	8003ec6 <UART_WaitOnFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e00d      	b.n	8003ebe <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed6:	e05e      	b.n	8003f96 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d05a      	beq.n	8003f96 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee0:	f7fd fe66 	bl	8001bb0 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d302      	bcc.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d11b      	bne.n	8003f2e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0201 	bic.w	r2, r2, #1
 8003f14:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e043      	b.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d02c      	beq.n	8003f96 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f4a:	d124      	bne.n	8003f96 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f64:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e00f      	b.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	bf0c      	ite	eq
 8003fa6:	2301      	moveq	r3, #1
 8003fa8:	2300      	movne	r3, #0
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	79fb      	ldrb	r3, [r7, #7]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d091      	beq.n	8003ed8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	f107 001c 	add.w	r0, r7, #28
 8003fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d120      	bne.n	800401a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	4b20      	ldr	r3, [pc, #128]	; (800406c <USB_CoreInit+0xac>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d105      	bne.n	800400e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fa5a 	bl	80044c8 <USB_CoreReset>
 8004014:	4603      	mov	r3, r0
 8004016:	73fb      	strb	r3, [r7, #15]
 8004018:	e010      	b.n	800403c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fa4e 	bl	80044c8 <USB_CoreReset>
 800402c:	4603      	mov	r3, r0
 800402e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403e:	2b01      	cmp	r3, #1
 8004040:	d10b      	bne.n	800405a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f043 0206 	orr.w	r2, r3, #6
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f043 0220 	orr.w	r2, r3, #32
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800405a:	7bfb      	ldrb	r3, [r7, #15]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004066:	b004      	add	sp, #16
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	ffbdffbf 	.word	0xffbdffbf

08004070 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f023 0201 	bic.w	r2, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	460b      	mov	r3, r1
 800409c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040aa:	78fb      	ldrb	r3, [r7, #3]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d106      	bne.n	80040be <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	60da      	str	r2, [r3, #12]
 80040bc:	e00b      	b.n	80040d6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80040be:	78fb      	ldrb	r3, [r7, #3]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d106      	bne.n	80040d2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	60da      	str	r2, [r3, #12]
 80040d0:	e001      	b.n	80040d6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e003      	b.n	80040de <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80040d6:	2032      	movs	r0, #50	; 0x32
 80040d8:	f7fd fd76 	bl	8001bc8 <HAL_Delay>

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040e8:	b084      	sub	sp, #16
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b086      	sub	sp, #24
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80040f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004102:	2300      	movs	r3, #0
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	e009      	b.n	800411c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	3340      	adds	r3, #64	; 0x40
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	2200      	movs	r2, #0
 8004114:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	3301      	adds	r3, #1
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	2b0e      	cmp	r3, #14
 8004120:	d9f2      	bls.n	8004108 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004124:	2b00      	cmp	r3, #0
 8004126:	d11c      	bne.n	8004162 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004136:	f043 0302 	orr.w	r3, r3, #2
 800413a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004140:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	e005      	b.n	800416e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004174:	461a      	mov	r2, r3
 8004176:	2300      	movs	r3, #0
 8004178:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004180:	4619      	mov	r1, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004188:	461a      	mov	r2, r3
 800418a:	680b      	ldr	r3, [r1, #0]
 800418c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800418e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004190:	2b01      	cmp	r3, #1
 8004192:	d10c      	bne.n	80041ae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d104      	bne.n	80041a4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800419a:	2100      	movs	r1, #0
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f959 	bl	8004454 <USB_SetDevSpeed>
 80041a2:	e018      	b.n	80041d6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041a4:	2101      	movs	r1, #1
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f954 	bl	8004454 <USB_SetDevSpeed>
 80041ac:	e013      	b.n	80041d6 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80041ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d10c      	bne.n	80041ce <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d104      	bne.n	80041c4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041ba:	2100      	movs	r1, #0
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f949 	bl	8004454 <USB_SetDevSpeed>
 80041c2:	e008      	b.n	80041d6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041c4:	2101      	movs	r1, #1
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f944 	bl	8004454 <USB_SetDevSpeed>
 80041cc:	e003      	b.n	80041d6 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041ce:	2103      	movs	r1, #3
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f93f 	bl	8004454 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041d6:	2110      	movs	r1, #16
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f8f3 	bl	80043c4 <USB_FlushTxFifo>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f911 	bl	8004410 <USB_FlushRxFifo>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fe:	461a      	mov	r2, r3
 8004200:	2300      	movs	r3, #0
 8004202:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420a:	461a      	mov	r2, r3
 800420c:	2300      	movs	r3, #0
 800420e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004216:	461a      	mov	r2, r3
 8004218:	2300      	movs	r3, #0
 800421a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800421c:	2300      	movs	r3, #0
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	e043      	b.n	80042aa <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004234:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004238:	d118      	bne.n	800426c <USB_DevInit+0x184>
    {
      if (i == 0U)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424c:	461a      	mov	r2, r3
 800424e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	e013      	b.n	800427e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004262:	461a      	mov	r2, r3
 8004264:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	e008      	b.n	800427e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004278:	461a      	mov	r2, r3
 800427a:	2300      	movs	r3, #0
 800427c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4413      	add	r3, r2
 8004286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428a:	461a      	mov	r2, r3
 800428c:	2300      	movs	r3, #0
 800428e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429c:	461a      	mov	r2, r3
 800429e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	3301      	adds	r3, #1
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d3b7      	bcc.n	8004222 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042b2:	2300      	movs	r3, #0
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	e043      	b.n	8004340 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042ce:	d118      	bne.n	8004302 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10a      	bne.n	80042ec <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e2:	461a      	mov	r2, r3
 80042e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	e013      	b.n	8004314 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f8:	461a      	mov	r2, r3
 80042fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	e008      	b.n	8004314 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430e:	461a      	mov	r2, r3
 8004310:	2300      	movs	r3, #0
 8004312:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004320:	461a      	mov	r2, r3
 8004322:	2300      	movs	r3, #0
 8004324:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004332:	461a      	mov	r2, r3
 8004334:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004338:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	3301      	adds	r3, #1
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	429a      	cmp	r2, r3
 8004346:	d3b7      	bcc.n	80042b8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800435a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004368:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	2b00      	cmp	r3, #0
 800436e:	d105      	bne.n	800437c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	f043 0210 	orr.w	r2, r3, #16
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699a      	ldr	r2, [r3, #24]
 8004380:	4b0e      	ldr	r3, [pc, #56]	; (80043bc <USB_DevInit+0x2d4>)
 8004382:	4313      	orrs	r3, r2
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	f043 0208 	orr.w	r2, r3, #8
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800439a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800439c:	2b01      	cmp	r3, #1
 800439e:	d105      	bne.n	80043ac <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699a      	ldr	r2, [r3, #24]
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <USB_DevInit+0x2d8>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043b8:	b004      	add	sp, #16
 80043ba:	4770      	bx	lr
 80043bc:	803c3800 	.word	0x803c3800
 80043c0:	40000004 	.word	0x40000004

080043c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80043ce:	2300      	movs	r3, #0
 80043d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	019b      	lsls	r3, r3, #6
 80043d6:	f043 0220 	orr.w	r2, r3, #32
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3301      	adds	r3, #1
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4a09      	ldr	r2, [pc, #36]	; (800440c <USB_FlushTxFifo+0x48>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d901      	bls.n	80043f0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e006      	b.n	80043fe <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	f003 0320 	and.w	r3, r3, #32
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	d0f0      	beq.n	80043de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	00030d40 	.word	0x00030d40

08004410 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004418:	2300      	movs	r3, #0
 800441a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2210      	movs	r2, #16
 8004420:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3301      	adds	r3, #1
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4a09      	ldr	r2, [pc, #36]	; (8004450 <USB_FlushRxFifo+0x40>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d901      	bls.n	8004434 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e006      	b.n	8004442 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f003 0310 	and.w	r3, r3, #16
 800443c:	2b10      	cmp	r3, #16
 800443e:	d0f0      	beq.n	8004422 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	00030d40 	.word	0x00030d40

08004454 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	68f9      	ldr	r1, [r7, #12]
 8004470:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004474:	4313      	orrs	r3, r2
 8004476:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004486:	b480      	push	{r7}
 8004488:	b085      	sub	sp, #20
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80044a0:	f023 0303 	bic.w	r3, r3, #3
 80044a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044b4:	f043 0302 	orr.w	r3, r3, #2
 80044b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	3301      	adds	r3, #1
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4a13      	ldr	r2, [pc, #76]	; (800452c <USB_CoreReset+0x64>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d901      	bls.n	80044e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e01b      	b.n	800451e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	daf2      	bge.n	80044d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f043 0201 	orr.w	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3301      	adds	r3, #1
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4a09      	ldr	r2, [pc, #36]	; (800452c <USB_CoreReset+0x64>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d901      	bls.n	8004510 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e006      	b.n	800451e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b01      	cmp	r3, #1
 800451a:	d0f0      	beq.n	80044fe <USB_CoreReset+0x36>

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	00030d40 	.word	0x00030d40

08004530 <__errno>:
 8004530:	4b01      	ldr	r3, [pc, #4]	; (8004538 <__errno+0x8>)
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	20001010 	.word	0x20001010

0800453c <__libc_init_array>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	4d0d      	ldr	r5, [pc, #52]	; (8004574 <__libc_init_array+0x38>)
 8004540:	4c0d      	ldr	r4, [pc, #52]	; (8004578 <__libc_init_array+0x3c>)
 8004542:	1b64      	subs	r4, r4, r5
 8004544:	10a4      	asrs	r4, r4, #2
 8004546:	2600      	movs	r6, #0
 8004548:	42a6      	cmp	r6, r4
 800454a:	d109      	bne.n	8004560 <__libc_init_array+0x24>
 800454c:	4d0b      	ldr	r5, [pc, #44]	; (800457c <__libc_init_array+0x40>)
 800454e:	4c0c      	ldr	r4, [pc, #48]	; (8004580 <__libc_init_array+0x44>)
 8004550:	f002 fe3e 	bl	80071d0 <_init>
 8004554:	1b64      	subs	r4, r4, r5
 8004556:	10a4      	asrs	r4, r4, #2
 8004558:	2600      	movs	r6, #0
 800455a:	42a6      	cmp	r6, r4
 800455c:	d105      	bne.n	800456a <__libc_init_array+0x2e>
 800455e:	bd70      	pop	{r4, r5, r6, pc}
 8004560:	f855 3b04 	ldr.w	r3, [r5], #4
 8004564:	4798      	blx	r3
 8004566:	3601      	adds	r6, #1
 8004568:	e7ee      	b.n	8004548 <__libc_init_array+0xc>
 800456a:	f855 3b04 	ldr.w	r3, [r5], #4
 800456e:	4798      	blx	r3
 8004570:	3601      	adds	r6, #1
 8004572:	e7f2      	b.n	800455a <__libc_init_array+0x1e>
 8004574:	0800763c 	.word	0x0800763c
 8004578:	0800763c 	.word	0x0800763c
 800457c:	0800763c 	.word	0x0800763c
 8004580:	08007640 	.word	0x08007640

08004584 <memset>:
 8004584:	4402      	add	r2, r0
 8004586:	4603      	mov	r3, r0
 8004588:	4293      	cmp	r3, r2
 800458a:	d100      	bne.n	800458e <memset+0xa>
 800458c:	4770      	bx	lr
 800458e:	f803 1b01 	strb.w	r1, [r3], #1
 8004592:	e7f9      	b.n	8004588 <memset+0x4>

08004594 <__cvt>:
 8004594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004596:	ed2d 8b02 	vpush	{d8}
 800459a:	eeb0 8b40 	vmov.f64	d8, d0
 800459e:	b085      	sub	sp, #20
 80045a0:	4617      	mov	r7, r2
 80045a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80045a4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80045a6:	ee18 2a90 	vmov	r2, s17
 80045aa:	f025 0520 	bic.w	r5, r5, #32
 80045ae:	2a00      	cmp	r2, #0
 80045b0:	bfb6      	itet	lt
 80045b2:	222d      	movlt	r2, #45	; 0x2d
 80045b4:	2200      	movge	r2, #0
 80045b6:	eeb1 8b40 	vneglt.f64	d8, d0
 80045ba:	2d46      	cmp	r5, #70	; 0x46
 80045bc:	460c      	mov	r4, r1
 80045be:	701a      	strb	r2, [r3, #0]
 80045c0:	d004      	beq.n	80045cc <__cvt+0x38>
 80045c2:	2d45      	cmp	r5, #69	; 0x45
 80045c4:	d100      	bne.n	80045c8 <__cvt+0x34>
 80045c6:	3401      	adds	r4, #1
 80045c8:	2102      	movs	r1, #2
 80045ca:	e000      	b.n	80045ce <__cvt+0x3a>
 80045cc:	2103      	movs	r1, #3
 80045ce:	ab03      	add	r3, sp, #12
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	ab02      	add	r3, sp, #8
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	4622      	mov	r2, r4
 80045d8:	4633      	mov	r3, r6
 80045da:	eeb0 0b48 	vmov.f64	d0, d8
 80045de:	f000 fce3 	bl	8004fa8 <_dtoa_r>
 80045e2:	2d47      	cmp	r5, #71	; 0x47
 80045e4:	d109      	bne.n	80045fa <__cvt+0x66>
 80045e6:	07fb      	lsls	r3, r7, #31
 80045e8:	d407      	bmi.n	80045fa <__cvt+0x66>
 80045ea:	9b03      	ldr	r3, [sp, #12]
 80045ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045ee:	1a1b      	subs	r3, r3, r0
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	b005      	add	sp, #20
 80045f4:	ecbd 8b02 	vpop	{d8}
 80045f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045fa:	2d46      	cmp	r5, #70	; 0x46
 80045fc:	eb00 0204 	add.w	r2, r0, r4
 8004600:	d10c      	bne.n	800461c <__cvt+0x88>
 8004602:	7803      	ldrb	r3, [r0, #0]
 8004604:	2b30      	cmp	r3, #48	; 0x30
 8004606:	d107      	bne.n	8004618 <__cvt+0x84>
 8004608:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800460c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004610:	bf1c      	itt	ne
 8004612:	f1c4 0401 	rsbne	r4, r4, #1
 8004616:	6034      	strne	r4, [r6, #0]
 8004618:	6833      	ldr	r3, [r6, #0]
 800461a:	441a      	add	r2, r3
 800461c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004624:	bf08      	it	eq
 8004626:	9203      	streq	r2, [sp, #12]
 8004628:	2130      	movs	r1, #48	; 0x30
 800462a:	9b03      	ldr	r3, [sp, #12]
 800462c:	4293      	cmp	r3, r2
 800462e:	d2dc      	bcs.n	80045ea <__cvt+0x56>
 8004630:	1c5c      	adds	r4, r3, #1
 8004632:	9403      	str	r4, [sp, #12]
 8004634:	7019      	strb	r1, [r3, #0]
 8004636:	e7f8      	b.n	800462a <__cvt+0x96>

08004638 <__exponent>:
 8004638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800463a:	4603      	mov	r3, r0
 800463c:	2900      	cmp	r1, #0
 800463e:	bfb8      	it	lt
 8004640:	4249      	neglt	r1, r1
 8004642:	f803 2b02 	strb.w	r2, [r3], #2
 8004646:	bfb4      	ite	lt
 8004648:	222d      	movlt	r2, #45	; 0x2d
 800464a:	222b      	movge	r2, #43	; 0x2b
 800464c:	2909      	cmp	r1, #9
 800464e:	7042      	strb	r2, [r0, #1]
 8004650:	dd2a      	ble.n	80046a8 <__exponent+0x70>
 8004652:	f10d 0407 	add.w	r4, sp, #7
 8004656:	46a4      	mov	ip, r4
 8004658:	270a      	movs	r7, #10
 800465a:	46a6      	mov	lr, r4
 800465c:	460a      	mov	r2, r1
 800465e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004662:	fb07 1516 	mls	r5, r7, r6, r1
 8004666:	3530      	adds	r5, #48	; 0x30
 8004668:	2a63      	cmp	r2, #99	; 0x63
 800466a:	f104 34ff 	add.w	r4, r4, #4294967295
 800466e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004672:	4631      	mov	r1, r6
 8004674:	dcf1      	bgt.n	800465a <__exponent+0x22>
 8004676:	3130      	adds	r1, #48	; 0x30
 8004678:	f1ae 0502 	sub.w	r5, lr, #2
 800467c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004680:	1c44      	adds	r4, r0, #1
 8004682:	4629      	mov	r1, r5
 8004684:	4561      	cmp	r1, ip
 8004686:	d30a      	bcc.n	800469e <__exponent+0x66>
 8004688:	f10d 0209 	add.w	r2, sp, #9
 800468c:	eba2 020e 	sub.w	r2, r2, lr
 8004690:	4565      	cmp	r5, ip
 8004692:	bf88      	it	hi
 8004694:	2200      	movhi	r2, #0
 8004696:	4413      	add	r3, r2
 8004698:	1a18      	subs	r0, r3, r0
 800469a:	b003      	add	sp, #12
 800469c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800469e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80046a6:	e7ed      	b.n	8004684 <__exponent+0x4c>
 80046a8:	2330      	movs	r3, #48	; 0x30
 80046aa:	3130      	adds	r1, #48	; 0x30
 80046ac:	7083      	strb	r3, [r0, #2]
 80046ae:	70c1      	strb	r1, [r0, #3]
 80046b0:	1d03      	adds	r3, r0, #4
 80046b2:	e7f1      	b.n	8004698 <__exponent+0x60>
 80046b4:	0000      	movs	r0, r0
	...

080046b8 <_printf_float>:
 80046b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046bc:	b08b      	sub	sp, #44	; 0x2c
 80046be:	460c      	mov	r4, r1
 80046c0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80046c4:	4616      	mov	r6, r2
 80046c6:	461f      	mov	r7, r3
 80046c8:	4605      	mov	r5, r0
 80046ca:	f001 fae5 	bl	8005c98 <_localeconv_r>
 80046ce:	f8d0 b000 	ldr.w	fp, [r0]
 80046d2:	4658      	mov	r0, fp
 80046d4:	f7fb fdb4 	bl	8000240 <strlen>
 80046d8:	2300      	movs	r3, #0
 80046da:	9308      	str	r3, [sp, #32]
 80046dc:	f8d8 3000 	ldr.w	r3, [r8]
 80046e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80046e4:	6822      	ldr	r2, [r4, #0]
 80046e6:	3307      	adds	r3, #7
 80046e8:	f023 0307 	bic.w	r3, r3, #7
 80046ec:	f103 0108 	add.w	r1, r3, #8
 80046f0:	f8c8 1000 	str.w	r1, [r8]
 80046f4:	4682      	mov	sl, r0
 80046f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046fa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80046fe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8004960 <_printf_float+0x2a8>
 8004702:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8004706:	eeb0 6bc0 	vabs.f64	d6, d0
 800470a:	eeb4 6b47 	vcmp.f64	d6, d7
 800470e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004712:	dd24      	ble.n	800475e <_printf_float+0xa6>
 8004714:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800471c:	d502      	bpl.n	8004724 <_printf_float+0x6c>
 800471e:	232d      	movs	r3, #45	; 0x2d
 8004720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004724:	4b90      	ldr	r3, [pc, #576]	; (8004968 <_printf_float+0x2b0>)
 8004726:	4891      	ldr	r0, [pc, #580]	; (800496c <_printf_float+0x2b4>)
 8004728:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800472c:	bf94      	ite	ls
 800472e:	4698      	movls	r8, r3
 8004730:	4680      	movhi	r8, r0
 8004732:	2303      	movs	r3, #3
 8004734:	6123      	str	r3, [r4, #16]
 8004736:	f022 0204 	bic.w	r2, r2, #4
 800473a:	2300      	movs	r3, #0
 800473c:	6022      	str	r2, [r4, #0]
 800473e:	9304      	str	r3, [sp, #16]
 8004740:	9700      	str	r7, [sp, #0]
 8004742:	4633      	mov	r3, r6
 8004744:	aa09      	add	r2, sp, #36	; 0x24
 8004746:	4621      	mov	r1, r4
 8004748:	4628      	mov	r0, r5
 800474a:	f000 f9d3 	bl	8004af4 <_printf_common>
 800474e:	3001      	adds	r0, #1
 8004750:	f040 808a 	bne.w	8004868 <_printf_float+0x1b0>
 8004754:	f04f 30ff 	mov.w	r0, #4294967295
 8004758:	b00b      	add	sp, #44	; 0x2c
 800475a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800475e:	eeb4 0b40 	vcmp.f64	d0, d0
 8004762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004766:	d709      	bvc.n	800477c <_printf_float+0xc4>
 8004768:	ee10 3a90 	vmov	r3, s1
 800476c:	2b00      	cmp	r3, #0
 800476e:	bfbc      	itt	lt
 8004770:	232d      	movlt	r3, #45	; 0x2d
 8004772:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004776:	487e      	ldr	r0, [pc, #504]	; (8004970 <_printf_float+0x2b8>)
 8004778:	4b7e      	ldr	r3, [pc, #504]	; (8004974 <_printf_float+0x2bc>)
 800477a:	e7d5      	b.n	8004728 <_printf_float+0x70>
 800477c:	6863      	ldr	r3, [r4, #4]
 800477e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004782:	9104      	str	r1, [sp, #16]
 8004784:	1c59      	adds	r1, r3, #1
 8004786:	d13c      	bne.n	8004802 <_printf_float+0x14a>
 8004788:	2306      	movs	r3, #6
 800478a:	6063      	str	r3, [r4, #4]
 800478c:	2300      	movs	r3, #0
 800478e:	9303      	str	r3, [sp, #12]
 8004790:	ab08      	add	r3, sp, #32
 8004792:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004796:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800479a:	ab07      	add	r3, sp, #28
 800479c:	6861      	ldr	r1, [r4, #4]
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	6022      	str	r2, [r4, #0]
 80047a2:	f10d 031b 	add.w	r3, sp, #27
 80047a6:	4628      	mov	r0, r5
 80047a8:	f7ff fef4 	bl	8004594 <__cvt>
 80047ac:	9b04      	ldr	r3, [sp, #16]
 80047ae:	9907      	ldr	r1, [sp, #28]
 80047b0:	2b47      	cmp	r3, #71	; 0x47
 80047b2:	4680      	mov	r8, r0
 80047b4:	d108      	bne.n	80047c8 <_printf_float+0x110>
 80047b6:	1cc8      	adds	r0, r1, #3
 80047b8:	db02      	blt.n	80047c0 <_printf_float+0x108>
 80047ba:	6863      	ldr	r3, [r4, #4]
 80047bc:	4299      	cmp	r1, r3
 80047be:	dd41      	ble.n	8004844 <_printf_float+0x18c>
 80047c0:	f1a9 0902 	sub.w	r9, r9, #2
 80047c4:	fa5f f989 	uxtb.w	r9, r9
 80047c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80047cc:	d820      	bhi.n	8004810 <_printf_float+0x158>
 80047ce:	3901      	subs	r1, #1
 80047d0:	464a      	mov	r2, r9
 80047d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80047d6:	9107      	str	r1, [sp, #28]
 80047d8:	f7ff ff2e 	bl	8004638 <__exponent>
 80047dc:	9a08      	ldr	r2, [sp, #32]
 80047de:	9004      	str	r0, [sp, #16]
 80047e0:	1813      	adds	r3, r2, r0
 80047e2:	2a01      	cmp	r2, #1
 80047e4:	6123      	str	r3, [r4, #16]
 80047e6:	dc02      	bgt.n	80047ee <_printf_float+0x136>
 80047e8:	6822      	ldr	r2, [r4, #0]
 80047ea:	07d2      	lsls	r2, r2, #31
 80047ec:	d501      	bpl.n	80047f2 <_printf_float+0x13a>
 80047ee:	3301      	adds	r3, #1
 80047f0:	6123      	str	r3, [r4, #16]
 80047f2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0a2      	beq.n	8004740 <_printf_float+0x88>
 80047fa:	232d      	movs	r3, #45	; 0x2d
 80047fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004800:	e79e      	b.n	8004740 <_printf_float+0x88>
 8004802:	9904      	ldr	r1, [sp, #16]
 8004804:	2947      	cmp	r1, #71	; 0x47
 8004806:	d1c1      	bne.n	800478c <_printf_float+0xd4>
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1bf      	bne.n	800478c <_printf_float+0xd4>
 800480c:	2301      	movs	r3, #1
 800480e:	e7bc      	b.n	800478a <_printf_float+0xd2>
 8004810:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004814:	d118      	bne.n	8004848 <_printf_float+0x190>
 8004816:	2900      	cmp	r1, #0
 8004818:	6863      	ldr	r3, [r4, #4]
 800481a:	dd0b      	ble.n	8004834 <_printf_float+0x17c>
 800481c:	6121      	str	r1, [r4, #16]
 800481e:	b913      	cbnz	r3, 8004826 <_printf_float+0x16e>
 8004820:	6822      	ldr	r2, [r4, #0]
 8004822:	07d0      	lsls	r0, r2, #31
 8004824:	d502      	bpl.n	800482c <_printf_float+0x174>
 8004826:	3301      	adds	r3, #1
 8004828:	440b      	add	r3, r1
 800482a:	6123      	str	r3, [r4, #16]
 800482c:	2300      	movs	r3, #0
 800482e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004830:	9304      	str	r3, [sp, #16]
 8004832:	e7de      	b.n	80047f2 <_printf_float+0x13a>
 8004834:	b913      	cbnz	r3, 800483c <_printf_float+0x184>
 8004836:	6822      	ldr	r2, [r4, #0]
 8004838:	07d2      	lsls	r2, r2, #31
 800483a:	d501      	bpl.n	8004840 <_printf_float+0x188>
 800483c:	3302      	adds	r3, #2
 800483e:	e7f4      	b.n	800482a <_printf_float+0x172>
 8004840:	2301      	movs	r3, #1
 8004842:	e7f2      	b.n	800482a <_printf_float+0x172>
 8004844:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004848:	9b08      	ldr	r3, [sp, #32]
 800484a:	4299      	cmp	r1, r3
 800484c:	db05      	blt.n	800485a <_printf_float+0x1a2>
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	6121      	str	r1, [r4, #16]
 8004852:	07d8      	lsls	r0, r3, #31
 8004854:	d5ea      	bpl.n	800482c <_printf_float+0x174>
 8004856:	1c4b      	adds	r3, r1, #1
 8004858:	e7e7      	b.n	800482a <_printf_float+0x172>
 800485a:	2900      	cmp	r1, #0
 800485c:	bfd4      	ite	le
 800485e:	f1c1 0202 	rsble	r2, r1, #2
 8004862:	2201      	movgt	r2, #1
 8004864:	4413      	add	r3, r2
 8004866:	e7e0      	b.n	800482a <_printf_float+0x172>
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	055a      	lsls	r2, r3, #21
 800486c:	d407      	bmi.n	800487e <_printf_float+0x1c6>
 800486e:	6923      	ldr	r3, [r4, #16]
 8004870:	4642      	mov	r2, r8
 8004872:	4631      	mov	r1, r6
 8004874:	4628      	mov	r0, r5
 8004876:	47b8      	blx	r7
 8004878:	3001      	adds	r0, #1
 800487a:	d12a      	bne.n	80048d2 <_printf_float+0x21a>
 800487c:	e76a      	b.n	8004754 <_printf_float+0x9c>
 800487e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004882:	f240 80e2 	bls.w	8004a4a <_printf_float+0x392>
 8004886:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800488a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800488e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004892:	d133      	bne.n	80048fc <_printf_float+0x244>
 8004894:	4a38      	ldr	r2, [pc, #224]	; (8004978 <_printf_float+0x2c0>)
 8004896:	2301      	movs	r3, #1
 8004898:	4631      	mov	r1, r6
 800489a:	4628      	mov	r0, r5
 800489c:	47b8      	blx	r7
 800489e:	3001      	adds	r0, #1
 80048a0:	f43f af58 	beq.w	8004754 <_printf_float+0x9c>
 80048a4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	db02      	blt.n	80048b2 <_printf_float+0x1fa>
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	07d8      	lsls	r0, r3, #31
 80048b0:	d50f      	bpl.n	80048d2 <_printf_float+0x21a>
 80048b2:	4653      	mov	r3, sl
 80048b4:	465a      	mov	r2, fp
 80048b6:	4631      	mov	r1, r6
 80048b8:	4628      	mov	r0, r5
 80048ba:	47b8      	blx	r7
 80048bc:	3001      	adds	r0, #1
 80048be:	f43f af49 	beq.w	8004754 <_printf_float+0x9c>
 80048c2:	f04f 0800 	mov.w	r8, #0
 80048c6:	f104 091a 	add.w	r9, r4, #26
 80048ca:	9b08      	ldr	r3, [sp, #32]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	4543      	cmp	r3, r8
 80048d0:	dc09      	bgt.n	80048e6 <_printf_float+0x22e>
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	079b      	lsls	r3, r3, #30
 80048d6:	f100 8108 	bmi.w	8004aea <_printf_float+0x432>
 80048da:	68e0      	ldr	r0, [r4, #12]
 80048dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048de:	4298      	cmp	r0, r3
 80048e0:	bfb8      	it	lt
 80048e2:	4618      	movlt	r0, r3
 80048e4:	e738      	b.n	8004758 <_printf_float+0xa0>
 80048e6:	2301      	movs	r3, #1
 80048e8:	464a      	mov	r2, r9
 80048ea:	4631      	mov	r1, r6
 80048ec:	4628      	mov	r0, r5
 80048ee:	47b8      	blx	r7
 80048f0:	3001      	adds	r0, #1
 80048f2:	f43f af2f 	beq.w	8004754 <_printf_float+0x9c>
 80048f6:	f108 0801 	add.w	r8, r8, #1
 80048fa:	e7e6      	b.n	80048ca <_printf_float+0x212>
 80048fc:	9b07      	ldr	r3, [sp, #28]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	dc3c      	bgt.n	800497c <_printf_float+0x2c4>
 8004902:	4a1d      	ldr	r2, [pc, #116]	; (8004978 <_printf_float+0x2c0>)
 8004904:	2301      	movs	r3, #1
 8004906:	4631      	mov	r1, r6
 8004908:	4628      	mov	r0, r5
 800490a:	47b8      	blx	r7
 800490c:	3001      	adds	r0, #1
 800490e:	f43f af21 	beq.w	8004754 <_printf_float+0x9c>
 8004912:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004916:	4313      	orrs	r3, r2
 8004918:	d102      	bne.n	8004920 <_printf_float+0x268>
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	07d9      	lsls	r1, r3, #31
 800491e:	d5d8      	bpl.n	80048d2 <_printf_float+0x21a>
 8004920:	4653      	mov	r3, sl
 8004922:	465a      	mov	r2, fp
 8004924:	4631      	mov	r1, r6
 8004926:	4628      	mov	r0, r5
 8004928:	47b8      	blx	r7
 800492a:	3001      	adds	r0, #1
 800492c:	f43f af12 	beq.w	8004754 <_printf_float+0x9c>
 8004930:	f04f 0900 	mov.w	r9, #0
 8004934:	f104 0a1a 	add.w	sl, r4, #26
 8004938:	9b07      	ldr	r3, [sp, #28]
 800493a:	425b      	negs	r3, r3
 800493c:	454b      	cmp	r3, r9
 800493e:	dc01      	bgt.n	8004944 <_printf_float+0x28c>
 8004940:	9b08      	ldr	r3, [sp, #32]
 8004942:	e795      	b.n	8004870 <_printf_float+0x1b8>
 8004944:	2301      	movs	r3, #1
 8004946:	4652      	mov	r2, sl
 8004948:	4631      	mov	r1, r6
 800494a:	4628      	mov	r0, r5
 800494c:	47b8      	blx	r7
 800494e:	3001      	adds	r0, #1
 8004950:	f43f af00 	beq.w	8004754 <_printf_float+0x9c>
 8004954:	f109 0901 	add.w	r9, r9, #1
 8004958:	e7ee      	b.n	8004938 <_printf_float+0x280>
 800495a:	bf00      	nop
 800495c:	f3af 8000 	nop.w
 8004960:	ffffffff 	.word	0xffffffff
 8004964:	7fefffff 	.word	0x7fefffff
 8004968:	08007258 	.word	0x08007258
 800496c:	0800725c 	.word	0x0800725c
 8004970:	08007264 	.word	0x08007264
 8004974:	08007260 	.word	0x08007260
 8004978:	08007268 	.word	0x08007268
 800497c:	9a08      	ldr	r2, [sp, #32]
 800497e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004980:	429a      	cmp	r2, r3
 8004982:	bfa8      	it	ge
 8004984:	461a      	movge	r2, r3
 8004986:	2a00      	cmp	r2, #0
 8004988:	4691      	mov	r9, r2
 800498a:	dc38      	bgt.n	80049fe <_printf_float+0x346>
 800498c:	2300      	movs	r3, #0
 800498e:	9305      	str	r3, [sp, #20]
 8004990:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004994:	f104 021a 	add.w	r2, r4, #26
 8004998:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800499a:	9905      	ldr	r1, [sp, #20]
 800499c:	9304      	str	r3, [sp, #16]
 800499e:	eba3 0309 	sub.w	r3, r3, r9
 80049a2:	428b      	cmp	r3, r1
 80049a4:	dc33      	bgt.n	8004a0e <_printf_float+0x356>
 80049a6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	db3c      	blt.n	8004a28 <_printf_float+0x370>
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	07da      	lsls	r2, r3, #31
 80049b2:	d439      	bmi.n	8004a28 <_printf_float+0x370>
 80049b4:	9a08      	ldr	r2, [sp, #32]
 80049b6:	9b04      	ldr	r3, [sp, #16]
 80049b8:	9907      	ldr	r1, [sp, #28]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	eba2 0901 	sub.w	r9, r2, r1
 80049c0:	4599      	cmp	r9, r3
 80049c2:	bfa8      	it	ge
 80049c4:	4699      	movge	r9, r3
 80049c6:	f1b9 0f00 	cmp.w	r9, #0
 80049ca:	dc35      	bgt.n	8004a38 <_printf_float+0x380>
 80049cc:	f04f 0800 	mov.w	r8, #0
 80049d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049d4:	f104 0a1a 	add.w	sl, r4, #26
 80049d8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80049dc:	1a9b      	subs	r3, r3, r2
 80049de:	eba3 0309 	sub.w	r3, r3, r9
 80049e2:	4543      	cmp	r3, r8
 80049e4:	f77f af75 	ble.w	80048d2 <_printf_float+0x21a>
 80049e8:	2301      	movs	r3, #1
 80049ea:	4652      	mov	r2, sl
 80049ec:	4631      	mov	r1, r6
 80049ee:	4628      	mov	r0, r5
 80049f0:	47b8      	blx	r7
 80049f2:	3001      	adds	r0, #1
 80049f4:	f43f aeae 	beq.w	8004754 <_printf_float+0x9c>
 80049f8:	f108 0801 	add.w	r8, r8, #1
 80049fc:	e7ec      	b.n	80049d8 <_printf_float+0x320>
 80049fe:	4613      	mov	r3, r2
 8004a00:	4631      	mov	r1, r6
 8004a02:	4642      	mov	r2, r8
 8004a04:	4628      	mov	r0, r5
 8004a06:	47b8      	blx	r7
 8004a08:	3001      	adds	r0, #1
 8004a0a:	d1bf      	bne.n	800498c <_printf_float+0x2d4>
 8004a0c:	e6a2      	b.n	8004754 <_printf_float+0x9c>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	4631      	mov	r1, r6
 8004a12:	4628      	mov	r0, r5
 8004a14:	9204      	str	r2, [sp, #16]
 8004a16:	47b8      	blx	r7
 8004a18:	3001      	adds	r0, #1
 8004a1a:	f43f ae9b 	beq.w	8004754 <_printf_float+0x9c>
 8004a1e:	9b05      	ldr	r3, [sp, #20]
 8004a20:	9a04      	ldr	r2, [sp, #16]
 8004a22:	3301      	adds	r3, #1
 8004a24:	9305      	str	r3, [sp, #20]
 8004a26:	e7b7      	b.n	8004998 <_printf_float+0x2e0>
 8004a28:	4653      	mov	r3, sl
 8004a2a:	465a      	mov	r2, fp
 8004a2c:	4631      	mov	r1, r6
 8004a2e:	4628      	mov	r0, r5
 8004a30:	47b8      	blx	r7
 8004a32:	3001      	adds	r0, #1
 8004a34:	d1be      	bne.n	80049b4 <_printf_float+0x2fc>
 8004a36:	e68d      	b.n	8004754 <_printf_float+0x9c>
 8004a38:	9a04      	ldr	r2, [sp, #16]
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	4442      	add	r2, r8
 8004a3e:	4631      	mov	r1, r6
 8004a40:	4628      	mov	r0, r5
 8004a42:	47b8      	blx	r7
 8004a44:	3001      	adds	r0, #1
 8004a46:	d1c1      	bne.n	80049cc <_printf_float+0x314>
 8004a48:	e684      	b.n	8004754 <_printf_float+0x9c>
 8004a4a:	9a08      	ldr	r2, [sp, #32]
 8004a4c:	2a01      	cmp	r2, #1
 8004a4e:	dc01      	bgt.n	8004a54 <_printf_float+0x39c>
 8004a50:	07db      	lsls	r3, r3, #31
 8004a52:	d537      	bpl.n	8004ac4 <_printf_float+0x40c>
 8004a54:	2301      	movs	r3, #1
 8004a56:	4642      	mov	r2, r8
 8004a58:	4631      	mov	r1, r6
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	47b8      	blx	r7
 8004a5e:	3001      	adds	r0, #1
 8004a60:	f43f ae78 	beq.w	8004754 <_printf_float+0x9c>
 8004a64:	4653      	mov	r3, sl
 8004a66:	465a      	mov	r2, fp
 8004a68:	4631      	mov	r1, r6
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	47b8      	blx	r7
 8004a6e:	3001      	adds	r0, #1
 8004a70:	f43f ae70 	beq.w	8004754 <_printf_float+0x9c>
 8004a74:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004a78:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a80:	d01b      	beq.n	8004aba <_printf_float+0x402>
 8004a82:	9b08      	ldr	r3, [sp, #32]
 8004a84:	f108 0201 	add.w	r2, r8, #1
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	4631      	mov	r1, r6
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	47b8      	blx	r7
 8004a90:	3001      	adds	r0, #1
 8004a92:	d10e      	bne.n	8004ab2 <_printf_float+0x3fa>
 8004a94:	e65e      	b.n	8004754 <_printf_float+0x9c>
 8004a96:	2301      	movs	r3, #1
 8004a98:	464a      	mov	r2, r9
 8004a9a:	4631      	mov	r1, r6
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	47b8      	blx	r7
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	f43f ae57 	beq.w	8004754 <_printf_float+0x9c>
 8004aa6:	f108 0801 	add.w	r8, r8, #1
 8004aaa:	9b08      	ldr	r3, [sp, #32]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	4543      	cmp	r3, r8
 8004ab0:	dcf1      	bgt.n	8004a96 <_printf_float+0x3de>
 8004ab2:	9b04      	ldr	r3, [sp, #16]
 8004ab4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ab8:	e6db      	b.n	8004872 <_printf_float+0x1ba>
 8004aba:	f04f 0800 	mov.w	r8, #0
 8004abe:	f104 091a 	add.w	r9, r4, #26
 8004ac2:	e7f2      	b.n	8004aaa <_printf_float+0x3f2>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	4642      	mov	r2, r8
 8004ac8:	e7df      	b.n	8004a8a <_printf_float+0x3d2>
 8004aca:	2301      	movs	r3, #1
 8004acc:	464a      	mov	r2, r9
 8004ace:	4631      	mov	r1, r6
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	47b8      	blx	r7
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	f43f ae3d 	beq.w	8004754 <_printf_float+0x9c>
 8004ada:	f108 0801 	add.w	r8, r8, #1
 8004ade:	68e3      	ldr	r3, [r4, #12]
 8004ae0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ae2:	1a5b      	subs	r3, r3, r1
 8004ae4:	4543      	cmp	r3, r8
 8004ae6:	dcf0      	bgt.n	8004aca <_printf_float+0x412>
 8004ae8:	e6f7      	b.n	80048da <_printf_float+0x222>
 8004aea:	f04f 0800 	mov.w	r8, #0
 8004aee:	f104 0919 	add.w	r9, r4, #25
 8004af2:	e7f4      	b.n	8004ade <_printf_float+0x426>

08004af4 <_printf_common>:
 8004af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af8:	4616      	mov	r6, r2
 8004afa:	4699      	mov	r9, r3
 8004afc:	688a      	ldr	r2, [r1, #8]
 8004afe:	690b      	ldr	r3, [r1, #16]
 8004b00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b04:	4293      	cmp	r3, r2
 8004b06:	bfb8      	it	lt
 8004b08:	4613      	movlt	r3, r2
 8004b0a:	6033      	str	r3, [r6, #0]
 8004b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b10:	4607      	mov	r7, r0
 8004b12:	460c      	mov	r4, r1
 8004b14:	b10a      	cbz	r2, 8004b1a <_printf_common+0x26>
 8004b16:	3301      	adds	r3, #1
 8004b18:	6033      	str	r3, [r6, #0]
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	0699      	lsls	r1, r3, #26
 8004b1e:	bf42      	ittt	mi
 8004b20:	6833      	ldrmi	r3, [r6, #0]
 8004b22:	3302      	addmi	r3, #2
 8004b24:	6033      	strmi	r3, [r6, #0]
 8004b26:	6825      	ldr	r5, [r4, #0]
 8004b28:	f015 0506 	ands.w	r5, r5, #6
 8004b2c:	d106      	bne.n	8004b3c <_printf_common+0x48>
 8004b2e:	f104 0a19 	add.w	sl, r4, #25
 8004b32:	68e3      	ldr	r3, [r4, #12]
 8004b34:	6832      	ldr	r2, [r6, #0]
 8004b36:	1a9b      	subs	r3, r3, r2
 8004b38:	42ab      	cmp	r3, r5
 8004b3a:	dc26      	bgt.n	8004b8a <_printf_common+0x96>
 8004b3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b40:	1e13      	subs	r3, r2, #0
 8004b42:	6822      	ldr	r2, [r4, #0]
 8004b44:	bf18      	it	ne
 8004b46:	2301      	movne	r3, #1
 8004b48:	0692      	lsls	r2, r2, #26
 8004b4a:	d42b      	bmi.n	8004ba4 <_printf_common+0xb0>
 8004b4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b50:	4649      	mov	r1, r9
 8004b52:	4638      	mov	r0, r7
 8004b54:	47c0      	blx	r8
 8004b56:	3001      	adds	r0, #1
 8004b58:	d01e      	beq.n	8004b98 <_printf_common+0xa4>
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	68e5      	ldr	r5, [r4, #12]
 8004b5e:	6832      	ldr	r2, [r6, #0]
 8004b60:	f003 0306 	and.w	r3, r3, #6
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	bf08      	it	eq
 8004b68:	1aad      	subeq	r5, r5, r2
 8004b6a:	68a3      	ldr	r3, [r4, #8]
 8004b6c:	6922      	ldr	r2, [r4, #16]
 8004b6e:	bf0c      	ite	eq
 8004b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b74:	2500      	movne	r5, #0
 8004b76:	4293      	cmp	r3, r2
 8004b78:	bfc4      	itt	gt
 8004b7a:	1a9b      	subgt	r3, r3, r2
 8004b7c:	18ed      	addgt	r5, r5, r3
 8004b7e:	2600      	movs	r6, #0
 8004b80:	341a      	adds	r4, #26
 8004b82:	42b5      	cmp	r5, r6
 8004b84:	d11a      	bne.n	8004bbc <_printf_common+0xc8>
 8004b86:	2000      	movs	r0, #0
 8004b88:	e008      	b.n	8004b9c <_printf_common+0xa8>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	4652      	mov	r2, sl
 8004b8e:	4649      	mov	r1, r9
 8004b90:	4638      	mov	r0, r7
 8004b92:	47c0      	blx	r8
 8004b94:	3001      	adds	r0, #1
 8004b96:	d103      	bne.n	8004ba0 <_printf_common+0xac>
 8004b98:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba0:	3501      	adds	r5, #1
 8004ba2:	e7c6      	b.n	8004b32 <_printf_common+0x3e>
 8004ba4:	18e1      	adds	r1, r4, r3
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	2030      	movs	r0, #48	; 0x30
 8004baa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bae:	4422      	add	r2, r4
 8004bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bb8:	3302      	adds	r3, #2
 8004bba:	e7c7      	b.n	8004b4c <_printf_common+0x58>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	4622      	mov	r2, r4
 8004bc0:	4649      	mov	r1, r9
 8004bc2:	4638      	mov	r0, r7
 8004bc4:	47c0      	blx	r8
 8004bc6:	3001      	adds	r0, #1
 8004bc8:	d0e6      	beq.n	8004b98 <_printf_common+0xa4>
 8004bca:	3601      	adds	r6, #1
 8004bcc:	e7d9      	b.n	8004b82 <_printf_common+0x8e>
	...

08004bd0 <_printf_i>:
 8004bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd4:	460c      	mov	r4, r1
 8004bd6:	4691      	mov	r9, r2
 8004bd8:	7e27      	ldrb	r7, [r4, #24]
 8004bda:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004bdc:	2f78      	cmp	r7, #120	; 0x78
 8004bde:	4680      	mov	r8, r0
 8004be0:	469a      	mov	sl, r3
 8004be2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004be6:	d807      	bhi.n	8004bf8 <_printf_i+0x28>
 8004be8:	2f62      	cmp	r7, #98	; 0x62
 8004bea:	d80a      	bhi.n	8004c02 <_printf_i+0x32>
 8004bec:	2f00      	cmp	r7, #0
 8004bee:	f000 80d8 	beq.w	8004da2 <_printf_i+0x1d2>
 8004bf2:	2f58      	cmp	r7, #88	; 0x58
 8004bf4:	f000 80a3 	beq.w	8004d3e <_printf_i+0x16e>
 8004bf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004bfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c00:	e03a      	b.n	8004c78 <_printf_i+0xa8>
 8004c02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c06:	2b15      	cmp	r3, #21
 8004c08:	d8f6      	bhi.n	8004bf8 <_printf_i+0x28>
 8004c0a:	a001      	add	r0, pc, #4	; (adr r0, 8004c10 <_printf_i+0x40>)
 8004c0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c10:	08004c69 	.word	0x08004c69
 8004c14:	08004c7d 	.word	0x08004c7d
 8004c18:	08004bf9 	.word	0x08004bf9
 8004c1c:	08004bf9 	.word	0x08004bf9
 8004c20:	08004bf9 	.word	0x08004bf9
 8004c24:	08004bf9 	.word	0x08004bf9
 8004c28:	08004c7d 	.word	0x08004c7d
 8004c2c:	08004bf9 	.word	0x08004bf9
 8004c30:	08004bf9 	.word	0x08004bf9
 8004c34:	08004bf9 	.word	0x08004bf9
 8004c38:	08004bf9 	.word	0x08004bf9
 8004c3c:	08004d89 	.word	0x08004d89
 8004c40:	08004cad 	.word	0x08004cad
 8004c44:	08004d6b 	.word	0x08004d6b
 8004c48:	08004bf9 	.word	0x08004bf9
 8004c4c:	08004bf9 	.word	0x08004bf9
 8004c50:	08004dab 	.word	0x08004dab
 8004c54:	08004bf9 	.word	0x08004bf9
 8004c58:	08004cad 	.word	0x08004cad
 8004c5c:	08004bf9 	.word	0x08004bf9
 8004c60:	08004bf9 	.word	0x08004bf9
 8004c64:	08004d73 	.word	0x08004d73
 8004c68:	680b      	ldr	r3, [r1, #0]
 8004c6a:	1d1a      	adds	r2, r3, #4
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	600a      	str	r2, [r1, #0]
 8004c70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e0a3      	b.n	8004dc4 <_printf_i+0x1f4>
 8004c7c:	6825      	ldr	r5, [r4, #0]
 8004c7e:	6808      	ldr	r0, [r1, #0]
 8004c80:	062e      	lsls	r6, r5, #24
 8004c82:	f100 0304 	add.w	r3, r0, #4
 8004c86:	d50a      	bpl.n	8004c9e <_printf_i+0xce>
 8004c88:	6805      	ldr	r5, [r0, #0]
 8004c8a:	600b      	str	r3, [r1, #0]
 8004c8c:	2d00      	cmp	r5, #0
 8004c8e:	da03      	bge.n	8004c98 <_printf_i+0xc8>
 8004c90:	232d      	movs	r3, #45	; 0x2d
 8004c92:	426d      	negs	r5, r5
 8004c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c98:	485e      	ldr	r0, [pc, #376]	; (8004e14 <_printf_i+0x244>)
 8004c9a:	230a      	movs	r3, #10
 8004c9c:	e019      	b.n	8004cd2 <_printf_i+0x102>
 8004c9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004ca2:	6805      	ldr	r5, [r0, #0]
 8004ca4:	600b      	str	r3, [r1, #0]
 8004ca6:	bf18      	it	ne
 8004ca8:	b22d      	sxthne	r5, r5
 8004caa:	e7ef      	b.n	8004c8c <_printf_i+0xbc>
 8004cac:	680b      	ldr	r3, [r1, #0]
 8004cae:	6825      	ldr	r5, [r4, #0]
 8004cb0:	1d18      	adds	r0, r3, #4
 8004cb2:	6008      	str	r0, [r1, #0]
 8004cb4:	0628      	lsls	r0, r5, #24
 8004cb6:	d501      	bpl.n	8004cbc <_printf_i+0xec>
 8004cb8:	681d      	ldr	r5, [r3, #0]
 8004cba:	e002      	b.n	8004cc2 <_printf_i+0xf2>
 8004cbc:	0669      	lsls	r1, r5, #25
 8004cbe:	d5fb      	bpl.n	8004cb8 <_printf_i+0xe8>
 8004cc0:	881d      	ldrh	r5, [r3, #0]
 8004cc2:	4854      	ldr	r0, [pc, #336]	; (8004e14 <_printf_i+0x244>)
 8004cc4:	2f6f      	cmp	r7, #111	; 0x6f
 8004cc6:	bf0c      	ite	eq
 8004cc8:	2308      	moveq	r3, #8
 8004cca:	230a      	movne	r3, #10
 8004ccc:	2100      	movs	r1, #0
 8004cce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cd2:	6866      	ldr	r6, [r4, #4]
 8004cd4:	60a6      	str	r6, [r4, #8]
 8004cd6:	2e00      	cmp	r6, #0
 8004cd8:	bfa2      	ittt	ge
 8004cda:	6821      	ldrge	r1, [r4, #0]
 8004cdc:	f021 0104 	bicge.w	r1, r1, #4
 8004ce0:	6021      	strge	r1, [r4, #0]
 8004ce2:	b90d      	cbnz	r5, 8004ce8 <_printf_i+0x118>
 8004ce4:	2e00      	cmp	r6, #0
 8004ce6:	d04d      	beq.n	8004d84 <_printf_i+0x1b4>
 8004ce8:	4616      	mov	r6, r2
 8004cea:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cee:	fb03 5711 	mls	r7, r3, r1, r5
 8004cf2:	5dc7      	ldrb	r7, [r0, r7]
 8004cf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cf8:	462f      	mov	r7, r5
 8004cfa:	42bb      	cmp	r3, r7
 8004cfc:	460d      	mov	r5, r1
 8004cfe:	d9f4      	bls.n	8004cea <_printf_i+0x11a>
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d10b      	bne.n	8004d1c <_printf_i+0x14c>
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	07df      	lsls	r7, r3, #31
 8004d08:	d508      	bpl.n	8004d1c <_printf_i+0x14c>
 8004d0a:	6923      	ldr	r3, [r4, #16]
 8004d0c:	6861      	ldr	r1, [r4, #4]
 8004d0e:	4299      	cmp	r1, r3
 8004d10:	bfde      	ittt	le
 8004d12:	2330      	movle	r3, #48	; 0x30
 8004d14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d1c:	1b92      	subs	r2, r2, r6
 8004d1e:	6122      	str	r2, [r4, #16]
 8004d20:	f8cd a000 	str.w	sl, [sp]
 8004d24:	464b      	mov	r3, r9
 8004d26:	aa03      	add	r2, sp, #12
 8004d28:	4621      	mov	r1, r4
 8004d2a:	4640      	mov	r0, r8
 8004d2c:	f7ff fee2 	bl	8004af4 <_printf_common>
 8004d30:	3001      	adds	r0, #1
 8004d32:	d14c      	bne.n	8004dce <_printf_i+0x1fe>
 8004d34:	f04f 30ff 	mov.w	r0, #4294967295
 8004d38:	b004      	add	sp, #16
 8004d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d3e:	4835      	ldr	r0, [pc, #212]	; (8004e14 <_printf_i+0x244>)
 8004d40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	680e      	ldr	r6, [r1, #0]
 8004d48:	061f      	lsls	r7, r3, #24
 8004d4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004d4e:	600e      	str	r6, [r1, #0]
 8004d50:	d514      	bpl.n	8004d7c <_printf_i+0x1ac>
 8004d52:	07d9      	lsls	r1, r3, #31
 8004d54:	bf44      	itt	mi
 8004d56:	f043 0320 	orrmi.w	r3, r3, #32
 8004d5a:	6023      	strmi	r3, [r4, #0]
 8004d5c:	b91d      	cbnz	r5, 8004d66 <_printf_i+0x196>
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	f023 0320 	bic.w	r3, r3, #32
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	2310      	movs	r3, #16
 8004d68:	e7b0      	b.n	8004ccc <_printf_i+0xfc>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	f043 0320 	orr.w	r3, r3, #32
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	2378      	movs	r3, #120	; 0x78
 8004d74:	4828      	ldr	r0, [pc, #160]	; (8004e18 <_printf_i+0x248>)
 8004d76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d7a:	e7e3      	b.n	8004d44 <_printf_i+0x174>
 8004d7c:	065e      	lsls	r6, r3, #25
 8004d7e:	bf48      	it	mi
 8004d80:	b2ad      	uxthmi	r5, r5
 8004d82:	e7e6      	b.n	8004d52 <_printf_i+0x182>
 8004d84:	4616      	mov	r6, r2
 8004d86:	e7bb      	b.n	8004d00 <_printf_i+0x130>
 8004d88:	680b      	ldr	r3, [r1, #0]
 8004d8a:	6826      	ldr	r6, [r4, #0]
 8004d8c:	6960      	ldr	r0, [r4, #20]
 8004d8e:	1d1d      	adds	r5, r3, #4
 8004d90:	600d      	str	r5, [r1, #0]
 8004d92:	0635      	lsls	r5, r6, #24
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	d501      	bpl.n	8004d9c <_printf_i+0x1cc>
 8004d98:	6018      	str	r0, [r3, #0]
 8004d9a:	e002      	b.n	8004da2 <_printf_i+0x1d2>
 8004d9c:	0671      	lsls	r1, r6, #25
 8004d9e:	d5fb      	bpl.n	8004d98 <_printf_i+0x1c8>
 8004da0:	8018      	strh	r0, [r3, #0]
 8004da2:	2300      	movs	r3, #0
 8004da4:	6123      	str	r3, [r4, #16]
 8004da6:	4616      	mov	r6, r2
 8004da8:	e7ba      	b.n	8004d20 <_printf_i+0x150>
 8004daa:	680b      	ldr	r3, [r1, #0]
 8004dac:	1d1a      	adds	r2, r3, #4
 8004dae:	600a      	str	r2, [r1, #0]
 8004db0:	681e      	ldr	r6, [r3, #0]
 8004db2:	6862      	ldr	r2, [r4, #4]
 8004db4:	2100      	movs	r1, #0
 8004db6:	4630      	mov	r0, r6
 8004db8:	f7fb fa4a 	bl	8000250 <memchr>
 8004dbc:	b108      	cbz	r0, 8004dc2 <_printf_i+0x1f2>
 8004dbe:	1b80      	subs	r0, r0, r6
 8004dc0:	6060      	str	r0, [r4, #4]
 8004dc2:	6863      	ldr	r3, [r4, #4]
 8004dc4:	6123      	str	r3, [r4, #16]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dcc:	e7a8      	b.n	8004d20 <_printf_i+0x150>
 8004dce:	6923      	ldr	r3, [r4, #16]
 8004dd0:	4632      	mov	r2, r6
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	4640      	mov	r0, r8
 8004dd6:	47d0      	blx	sl
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d0ab      	beq.n	8004d34 <_printf_i+0x164>
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	079b      	lsls	r3, r3, #30
 8004de0:	d413      	bmi.n	8004e0a <_printf_i+0x23a>
 8004de2:	68e0      	ldr	r0, [r4, #12]
 8004de4:	9b03      	ldr	r3, [sp, #12]
 8004de6:	4298      	cmp	r0, r3
 8004de8:	bfb8      	it	lt
 8004dea:	4618      	movlt	r0, r3
 8004dec:	e7a4      	b.n	8004d38 <_printf_i+0x168>
 8004dee:	2301      	movs	r3, #1
 8004df0:	4632      	mov	r2, r6
 8004df2:	4649      	mov	r1, r9
 8004df4:	4640      	mov	r0, r8
 8004df6:	47d0      	blx	sl
 8004df8:	3001      	adds	r0, #1
 8004dfa:	d09b      	beq.n	8004d34 <_printf_i+0x164>
 8004dfc:	3501      	adds	r5, #1
 8004dfe:	68e3      	ldr	r3, [r4, #12]
 8004e00:	9903      	ldr	r1, [sp, #12]
 8004e02:	1a5b      	subs	r3, r3, r1
 8004e04:	42ab      	cmp	r3, r5
 8004e06:	dcf2      	bgt.n	8004dee <_printf_i+0x21e>
 8004e08:	e7eb      	b.n	8004de2 <_printf_i+0x212>
 8004e0a:	2500      	movs	r5, #0
 8004e0c:	f104 0619 	add.w	r6, r4, #25
 8004e10:	e7f5      	b.n	8004dfe <_printf_i+0x22e>
 8004e12:	bf00      	nop
 8004e14:	0800726a 	.word	0x0800726a
 8004e18:	0800727b 	.word	0x0800727b

08004e1c <iprintf>:
 8004e1c:	b40f      	push	{r0, r1, r2, r3}
 8004e1e:	4b0a      	ldr	r3, [pc, #40]	; (8004e48 <iprintf+0x2c>)
 8004e20:	b513      	push	{r0, r1, r4, lr}
 8004e22:	681c      	ldr	r4, [r3, #0]
 8004e24:	b124      	cbz	r4, 8004e30 <iprintf+0x14>
 8004e26:	69a3      	ldr	r3, [r4, #24]
 8004e28:	b913      	cbnz	r3, 8004e30 <iprintf+0x14>
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	f000 fe96 	bl	8005b5c <__sinit>
 8004e30:	ab05      	add	r3, sp, #20
 8004e32:	9a04      	ldr	r2, [sp, #16]
 8004e34:	68a1      	ldr	r1, [r4, #8]
 8004e36:	9301      	str	r3, [sp, #4]
 8004e38:	4620      	mov	r0, r4
 8004e3a:	f001 fd09 	bl	8006850 <_vfiprintf_r>
 8004e3e:	b002      	add	sp, #8
 8004e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e44:	b004      	add	sp, #16
 8004e46:	4770      	bx	lr
 8004e48:	20001010 	.word	0x20001010

08004e4c <siprintf>:
 8004e4c:	b40e      	push	{r1, r2, r3}
 8004e4e:	b500      	push	{lr}
 8004e50:	b09c      	sub	sp, #112	; 0x70
 8004e52:	ab1d      	add	r3, sp, #116	; 0x74
 8004e54:	9002      	str	r0, [sp, #8]
 8004e56:	9006      	str	r0, [sp, #24]
 8004e58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e5c:	4809      	ldr	r0, [pc, #36]	; (8004e84 <siprintf+0x38>)
 8004e5e:	9107      	str	r1, [sp, #28]
 8004e60:	9104      	str	r1, [sp, #16]
 8004e62:	4909      	ldr	r1, [pc, #36]	; (8004e88 <siprintf+0x3c>)
 8004e64:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e68:	9105      	str	r1, [sp, #20]
 8004e6a:	6800      	ldr	r0, [r0, #0]
 8004e6c:	9301      	str	r3, [sp, #4]
 8004e6e:	a902      	add	r1, sp, #8
 8004e70:	f001 fbc4 	bl	80065fc <_svfiprintf_r>
 8004e74:	9b02      	ldr	r3, [sp, #8]
 8004e76:	2200      	movs	r2, #0
 8004e78:	701a      	strb	r2, [r3, #0]
 8004e7a:	b01c      	add	sp, #112	; 0x70
 8004e7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e80:	b003      	add	sp, #12
 8004e82:	4770      	bx	lr
 8004e84:	20001010 	.word	0x20001010
 8004e88:	ffff0208 	.word	0xffff0208

08004e8c <quorem>:
 8004e8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e90:	6903      	ldr	r3, [r0, #16]
 8004e92:	690c      	ldr	r4, [r1, #16]
 8004e94:	42a3      	cmp	r3, r4
 8004e96:	4607      	mov	r7, r0
 8004e98:	f2c0 8081 	blt.w	8004f9e <quorem+0x112>
 8004e9c:	3c01      	subs	r4, #1
 8004e9e:	f101 0814 	add.w	r8, r1, #20
 8004ea2:	f100 0514 	add.w	r5, r0, #20
 8004ea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004eaa:	9301      	str	r3, [sp, #4]
 8004eac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004eb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004ebc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ec0:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ec4:	d331      	bcc.n	8004f2a <quorem+0x9e>
 8004ec6:	f04f 0e00 	mov.w	lr, #0
 8004eca:	4640      	mov	r0, r8
 8004ecc:	46ac      	mov	ip, r5
 8004ece:	46f2      	mov	sl, lr
 8004ed0:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ed4:	b293      	uxth	r3, r2
 8004ed6:	fb06 e303 	mla	r3, r6, r3, lr
 8004eda:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	ebaa 0303 	sub.w	r3, sl, r3
 8004ee4:	0c12      	lsrs	r2, r2, #16
 8004ee6:	f8dc a000 	ldr.w	sl, [ip]
 8004eea:	fb06 e202 	mla	r2, r6, r2, lr
 8004eee:	fa13 f38a 	uxtah	r3, r3, sl
 8004ef2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004ef6:	fa1f fa82 	uxth.w	sl, r2
 8004efa:	f8dc 2000 	ldr.w	r2, [ip]
 8004efe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004f02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f0c:	4581      	cmp	r9, r0
 8004f0e:	f84c 3b04 	str.w	r3, [ip], #4
 8004f12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f16:	d2db      	bcs.n	8004ed0 <quorem+0x44>
 8004f18:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f1c:	b92b      	cbnz	r3, 8004f2a <quorem+0x9e>
 8004f1e:	9b01      	ldr	r3, [sp, #4]
 8004f20:	3b04      	subs	r3, #4
 8004f22:	429d      	cmp	r5, r3
 8004f24:	461a      	mov	r2, r3
 8004f26:	d32e      	bcc.n	8004f86 <quorem+0xfa>
 8004f28:	613c      	str	r4, [r7, #16]
 8004f2a:	4638      	mov	r0, r7
 8004f2c:	f001 f950 	bl	80061d0 <__mcmp>
 8004f30:	2800      	cmp	r0, #0
 8004f32:	db24      	blt.n	8004f7e <quorem+0xf2>
 8004f34:	3601      	adds	r6, #1
 8004f36:	4628      	mov	r0, r5
 8004f38:	f04f 0c00 	mov.w	ip, #0
 8004f3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f40:	f8d0 e000 	ldr.w	lr, [r0]
 8004f44:	b293      	uxth	r3, r2
 8004f46:	ebac 0303 	sub.w	r3, ip, r3
 8004f4a:	0c12      	lsrs	r2, r2, #16
 8004f4c:	fa13 f38e 	uxtah	r3, r3, lr
 8004f50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f5e:	45c1      	cmp	r9, r8
 8004f60:	f840 3b04 	str.w	r3, [r0], #4
 8004f64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f68:	d2e8      	bcs.n	8004f3c <quorem+0xb0>
 8004f6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f72:	b922      	cbnz	r2, 8004f7e <quorem+0xf2>
 8004f74:	3b04      	subs	r3, #4
 8004f76:	429d      	cmp	r5, r3
 8004f78:	461a      	mov	r2, r3
 8004f7a:	d30a      	bcc.n	8004f92 <quorem+0x106>
 8004f7c:	613c      	str	r4, [r7, #16]
 8004f7e:	4630      	mov	r0, r6
 8004f80:	b003      	add	sp, #12
 8004f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f86:	6812      	ldr	r2, [r2, #0]
 8004f88:	3b04      	subs	r3, #4
 8004f8a:	2a00      	cmp	r2, #0
 8004f8c:	d1cc      	bne.n	8004f28 <quorem+0x9c>
 8004f8e:	3c01      	subs	r4, #1
 8004f90:	e7c7      	b.n	8004f22 <quorem+0x96>
 8004f92:	6812      	ldr	r2, [r2, #0]
 8004f94:	3b04      	subs	r3, #4
 8004f96:	2a00      	cmp	r2, #0
 8004f98:	d1f0      	bne.n	8004f7c <quorem+0xf0>
 8004f9a:	3c01      	subs	r4, #1
 8004f9c:	e7eb      	b.n	8004f76 <quorem+0xea>
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	e7ee      	b.n	8004f80 <quorem+0xf4>
 8004fa2:	0000      	movs	r0, r0
 8004fa4:	0000      	movs	r0, r0
	...

08004fa8 <_dtoa_r>:
 8004fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fac:	ec59 8b10 	vmov	r8, r9, d0
 8004fb0:	b095      	sub	sp, #84	; 0x54
 8004fb2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004fb4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8004fb6:	9107      	str	r1, [sp, #28]
 8004fb8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004fbc:	4606      	mov	r6, r0
 8004fbe:	9209      	str	r2, [sp, #36]	; 0x24
 8004fc0:	9310      	str	r3, [sp, #64]	; 0x40
 8004fc2:	b975      	cbnz	r5, 8004fe2 <_dtoa_r+0x3a>
 8004fc4:	2010      	movs	r0, #16
 8004fc6:	f000 fe6f 	bl	8005ca8 <malloc>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	6270      	str	r0, [r6, #36]	; 0x24
 8004fce:	b920      	cbnz	r0, 8004fda <_dtoa_r+0x32>
 8004fd0:	4bab      	ldr	r3, [pc, #684]	; (8005280 <_dtoa_r+0x2d8>)
 8004fd2:	21ea      	movs	r1, #234	; 0xea
 8004fd4:	48ab      	ldr	r0, [pc, #684]	; (8005284 <_dtoa_r+0x2dc>)
 8004fd6:	f001 fe91 	bl	8006cfc <__assert_func>
 8004fda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004fde:	6005      	str	r5, [r0, #0]
 8004fe0:	60c5      	str	r5, [r0, #12]
 8004fe2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004fe4:	6819      	ldr	r1, [r3, #0]
 8004fe6:	b151      	cbz	r1, 8004ffe <_dtoa_r+0x56>
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	604a      	str	r2, [r1, #4]
 8004fec:	2301      	movs	r3, #1
 8004fee:	4093      	lsls	r3, r2
 8004ff0:	608b      	str	r3, [r1, #8]
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	f000 feae 	bl	8005d54 <_Bfree>
 8004ff8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	f1b9 0300 	subs.w	r3, r9, #0
 8005002:	bfbb      	ittet	lt
 8005004:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005008:	9303      	strlt	r3, [sp, #12]
 800500a:	2300      	movge	r3, #0
 800500c:	2201      	movlt	r2, #1
 800500e:	bfac      	ite	ge
 8005010:	6023      	strge	r3, [r4, #0]
 8005012:	6022      	strlt	r2, [r4, #0]
 8005014:	4b9c      	ldr	r3, [pc, #624]	; (8005288 <_dtoa_r+0x2e0>)
 8005016:	9c03      	ldr	r4, [sp, #12]
 8005018:	43a3      	bics	r3, r4
 800501a:	d11a      	bne.n	8005052 <_dtoa_r+0xaa>
 800501c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800501e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005028:	ea53 0308 	orrs.w	r3, r3, r8
 800502c:	f000 8512 	beq.w	8005a54 <_dtoa_r+0xaac>
 8005030:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005032:	b953      	cbnz	r3, 800504a <_dtoa_r+0xa2>
 8005034:	4b95      	ldr	r3, [pc, #596]	; (800528c <_dtoa_r+0x2e4>)
 8005036:	e01f      	b.n	8005078 <_dtoa_r+0xd0>
 8005038:	4b95      	ldr	r3, [pc, #596]	; (8005290 <_dtoa_r+0x2e8>)
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	3308      	adds	r3, #8
 800503e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	9800      	ldr	r0, [sp, #0]
 8005044:	b015      	add	sp, #84	; 0x54
 8005046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800504a:	4b90      	ldr	r3, [pc, #576]	; (800528c <_dtoa_r+0x2e4>)
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	3303      	adds	r3, #3
 8005050:	e7f5      	b.n	800503e <_dtoa_r+0x96>
 8005052:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005056:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800505a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800505e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005062:	d10b      	bne.n	800507c <_dtoa_r+0xd4>
 8005064:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005066:	2301      	movs	r3, #1
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 84ee 	beq.w	8005a4e <_dtoa_r+0xaa6>
 8005072:	4888      	ldr	r0, [pc, #544]	; (8005294 <_dtoa_r+0x2ec>)
 8005074:	6018      	str	r0, [r3, #0]
 8005076:	1e43      	subs	r3, r0, #1
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	e7e2      	b.n	8005042 <_dtoa_r+0x9a>
 800507c:	a913      	add	r1, sp, #76	; 0x4c
 800507e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005082:	aa12      	add	r2, sp, #72	; 0x48
 8005084:	4630      	mov	r0, r6
 8005086:	f001 f947 	bl	8006318 <__d2b>
 800508a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800508e:	4605      	mov	r5, r0
 8005090:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005092:	2900      	cmp	r1, #0
 8005094:	d047      	beq.n	8005126 <_dtoa_r+0x17e>
 8005096:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005098:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800509c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050a0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80050a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80050a8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80050ac:	2400      	movs	r4, #0
 80050ae:	ec43 2b16 	vmov	d6, r2, r3
 80050b2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80050b6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8005268 <_dtoa_r+0x2c0>
 80050ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80050be:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8005270 <_dtoa_r+0x2c8>
 80050c2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80050c6:	eeb0 7b46 	vmov.f64	d7, d6
 80050ca:	ee06 1a90 	vmov	s13, r1
 80050ce:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80050d2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8005278 <_dtoa_r+0x2d0>
 80050d6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80050da:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80050de:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80050e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e6:	ee16 ba90 	vmov	fp, s13
 80050ea:	9411      	str	r4, [sp, #68]	; 0x44
 80050ec:	d508      	bpl.n	8005100 <_dtoa_r+0x158>
 80050ee:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80050f2:	eeb4 6b47 	vcmp.f64	d6, d7
 80050f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050fa:	bf18      	it	ne
 80050fc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8005100:	f1bb 0f16 	cmp.w	fp, #22
 8005104:	d832      	bhi.n	800516c <_dtoa_r+0x1c4>
 8005106:	4b64      	ldr	r3, [pc, #400]	; (8005298 <_dtoa_r+0x2f0>)
 8005108:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800510c:	ed93 7b00 	vldr	d7, [r3]
 8005110:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8005114:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511c:	d501      	bpl.n	8005122 <_dtoa_r+0x17a>
 800511e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005122:	2300      	movs	r3, #0
 8005124:	e023      	b.n	800516e <_dtoa_r+0x1c6>
 8005126:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005128:	4401      	add	r1, r0
 800512a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800512e:	2b20      	cmp	r3, #32
 8005130:	bfc3      	ittte	gt
 8005132:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005136:	fa04 f303 	lslgt.w	r3, r4, r3
 800513a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800513e:	f1c3 0320 	rsble	r3, r3, #32
 8005142:	bfc6      	itte	gt
 8005144:	fa28 f804 	lsrgt.w	r8, r8, r4
 8005148:	ea43 0308 	orrgt.w	r3, r3, r8
 800514c:	fa08 f303 	lslle.w	r3, r8, r3
 8005150:	ee07 3a90 	vmov	s15, r3
 8005154:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005158:	3901      	subs	r1, #1
 800515a:	ed8d 7b00 	vstr	d7, [sp]
 800515e:	9c01      	ldr	r4, [sp, #4]
 8005160:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005164:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8005168:	2401      	movs	r4, #1
 800516a:	e7a0      	b.n	80050ae <_dtoa_r+0x106>
 800516c:	2301      	movs	r3, #1
 800516e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005170:	1a43      	subs	r3, r0, r1
 8005172:	1e5a      	subs	r2, r3, #1
 8005174:	bf45      	ittet	mi
 8005176:	f1c3 0301 	rsbmi	r3, r3, #1
 800517a:	9305      	strmi	r3, [sp, #20]
 800517c:	2300      	movpl	r3, #0
 800517e:	2300      	movmi	r3, #0
 8005180:	9206      	str	r2, [sp, #24]
 8005182:	bf54      	ite	pl
 8005184:	9305      	strpl	r3, [sp, #20]
 8005186:	9306      	strmi	r3, [sp, #24]
 8005188:	f1bb 0f00 	cmp.w	fp, #0
 800518c:	db18      	blt.n	80051c0 <_dtoa_r+0x218>
 800518e:	9b06      	ldr	r3, [sp, #24]
 8005190:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005194:	445b      	add	r3, fp
 8005196:	9306      	str	r3, [sp, #24]
 8005198:	2300      	movs	r3, #0
 800519a:	9a07      	ldr	r2, [sp, #28]
 800519c:	2a09      	cmp	r2, #9
 800519e:	d849      	bhi.n	8005234 <_dtoa_r+0x28c>
 80051a0:	2a05      	cmp	r2, #5
 80051a2:	bfc4      	itt	gt
 80051a4:	3a04      	subgt	r2, #4
 80051a6:	9207      	strgt	r2, [sp, #28]
 80051a8:	9a07      	ldr	r2, [sp, #28]
 80051aa:	f1a2 0202 	sub.w	r2, r2, #2
 80051ae:	bfcc      	ite	gt
 80051b0:	2400      	movgt	r4, #0
 80051b2:	2401      	movle	r4, #1
 80051b4:	2a03      	cmp	r2, #3
 80051b6:	d848      	bhi.n	800524a <_dtoa_r+0x2a2>
 80051b8:	e8df f002 	tbb	[pc, r2]
 80051bc:	3a2c2e0b 	.word	0x3a2c2e0b
 80051c0:	9b05      	ldr	r3, [sp, #20]
 80051c2:	2200      	movs	r2, #0
 80051c4:	eba3 030b 	sub.w	r3, r3, fp
 80051c8:	9305      	str	r3, [sp, #20]
 80051ca:	920e      	str	r2, [sp, #56]	; 0x38
 80051cc:	f1cb 0300 	rsb	r3, fp, #0
 80051d0:	e7e3      	b.n	800519a <_dtoa_r+0x1f2>
 80051d2:	2200      	movs	r2, #0
 80051d4:	9208      	str	r2, [sp, #32]
 80051d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051d8:	2a00      	cmp	r2, #0
 80051da:	dc39      	bgt.n	8005250 <_dtoa_r+0x2a8>
 80051dc:	f04f 0a01 	mov.w	sl, #1
 80051e0:	46d1      	mov	r9, sl
 80051e2:	4652      	mov	r2, sl
 80051e4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80051e8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80051ea:	2100      	movs	r1, #0
 80051ec:	6079      	str	r1, [r7, #4]
 80051ee:	2004      	movs	r0, #4
 80051f0:	f100 0c14 	add.w	ip, r0, #20
 80051f4:	4594      	cmp	ip, r2
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	d92f      	bls.n	800525a <_dtoa_r+0x2b2>
 80051fa:	4630      	mov	r0, r6
 80051fc:	930c      	str	r3, [sp, #48]	; 0x30
 80051fe:	f000 fd69 	bl	8005cd4 <_Balloc>
 8005202:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005204:	9000      	str	r0, [sp, #0]
 8005206:	4602      	mov	r2, r0
 8005208:	2800      	cmp	r0, #0
 800520a:	d149      	bne.n	80052a0 <_dtoa_r+0x2f8>
 800520c:	4b23      	ldr	r3, [pc, #140]	; (800529c <_dtoa_r+0x2f4>)
 800520e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005212:	e6df      	b.n	8004fd4 <_dtoa_r+0x2c>
 8005214:	2201      	movs	r2, #1
 8005216:	e7dd      	b.n	80051d4 <_dtoa_r+0x22c>
 8005218:	2200      	movs	r2, #0
 800521a:	9208      	str	r2, [sp, #32]
 800521c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800521e:	eb0b 0a02 	add.w	sl, fp, r2
 8005222:	f10a 0901 	add.w	r9, sl, #1
 8005226:	464a      	mov	r2, r9
 8005228:	2a01      	cmp	r2, #1
 800522a:	bfb8      	it	lt
 800522c:	2201      	movlt	r2, #1
 800522e:	e7db      	b.n	80051e8 <_dtoa_r+0x240>
 8005230:	2201      	movs	r2, #1
 8005232:	e7f2      	b.n	800521a <_dtoa_r+0x272>
 8005234:	2401      	movs	r4, #1
 8005236:	2200      	movs	r2, #0
 8005238:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800523c:	f04f 3aff 	mov.w	sl, #4294967295
 8005240:	2100      	movs	r1, #0
 8005242:	46d1      	mov	r9, sl
 8005244:	2212      	movs	r2, #18
 8005246:	9109      	str	r1, [sp, #36]	; 0x24
 8005248:	e7ce      	b.n	80051e8 <_dtoa_r+0x240>
 800524a:	2201      	movs	r2, #1
 800524c:	9208      	str	r2, [sp, #32]
 800524e:	e7f5      	b.n	800523c <_dtoa_r+0x294>
 8005250:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8005254:	46d1      	mov	r9, sl
 8005256:	4652      	mov	r2, sl
 8005258:	e7c6      	b.n	80051e8 <_dtoa_r+0x240>
 800525a:	3101      	adds	r1, #1
 800525c:	6079      	str	r1, [r7, #4]
 800525e:	0040      	lsls	r0, r0, #1
 8005260:	e7c6      	b.n	80051f0 <_dtoa_r+0x248>
 8005262:	bf00      	nop
 8005264:	f3af 8000 	nop.w
 8005268:	636f4361 	.word	0x636f4361
 800526c:	3fd287a7 	.word	0x3fd287a7
 8005270:	8b60c8b3 	.word	0x8b60c8b3
 8005274:	3fc68a28 	.word	0x3fc68a28
 8005278:	509f79fb 	.word	0x509f79fb
 800527c:	3fd34413 	.word	0x3fd34413
 8005280:	08007299 	.word	0x08007299
 8005284:	080072b0 	.word	0x080072b0
 8005288:	7ff00000 	.word	0x7ff00000
 800528c:	08007295 	.word	0x08007295
 8005290:	0800728c 	.word	0x0800728c
 8005294:	08007269 	.word	0x08007269
 8005298:	08007408 	.word	0x08007408
 800529c:	0800730f 	.word	0x0800730f
 80052a0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80052a2:	9900      	ldr	r1, [sp, #0]
 80052a4:	6011      	str	r1, [r2, #0]
 80052a6:	f1b9 0f0e 	cmp.w	r9, #14
 80052aa:	d872      	bhi.n	8005392 <_dtoa_r+0x3ea>
 80052ac:	2c00      	cmp	r4, #0
 80052ae:	d070      	beq.n	8005392 <_dtoa_r+0x3ea>
 80052b0:	f1bb 0f00 	cmp.w	fp, #0
 80052b4:	f340 80a6 	ble.w	8005404 <_dtoa_r+0x45c>
 80052b8:	49ca      	ldr	r1, [pc, #808]	; (80055e4 <_dtoa_r+0x63c>)
 80052ba:	f00b 020f 	and.w	r2, fp, #15
 80052be:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80052c2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80052c6:	ed92 7b00 	vldr	d7, [r2]
 80052ca:	ea4f 112b 	mov.w	r1, fp, asr #4
 80052ce:	f000 808d 	beq.w	80053ec <_dtoa_r+0x444>
 80052d2:	4ac5      	ldr	r2, [pc, #788]	; (80055e8 <_dtoa_r+0x640>)
 80052d4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80052d8:	ed92 6b08 	vldr	d6, [r2, #32]
 80052dc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80052e0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80052e4:	f001 010f 	and.w	r1, r1, #15
 80052e8:	2203      	movs	r2, #3
 80052ea:	48bf      	ldr	r0, [pc, #764]	; (80055e8 <_dtoa_r+0x640>)
 80052ec:	2900      	cmp	r1, #0
 80052ee:	d17f      	bne.n	80053f0 <_dtoa_r+0x448>
 80052f0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80052f4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80052f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80052fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80052fe:	2900      	cmp	r1, #0
 8005300:	f000 80b2 	beq.w	8005468 <_dtoa_r+0x4c0>
 8005304:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005308:	ed9d 7b02 	vldr	d7, [sp, #8]
 800530c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005314:	f140 80a8 	bpl.w	8005468 <_dtoa_r+0x4c0>
 8005318:	f1b9 0f00 	cmp.w	r9, #0
 800531c:	f000 80a4 	beq.w	8005468 <_dtoa_r+0x4c0>
 8005320:	f1ba 0f00 	cmp.w	sl, #0
 8005324:	dd31      	ble.n	800538a <_dtoa_r+0x3e2>
 8005326:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800532a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800532e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005332:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005336:	3201      	adds	r2, #1
 8005338:	4650      	mov	r0, sl
 800533a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800533e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005342:	ee07 2a90 	vmov	s15, r2
 8005346:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800534a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800534e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8005352:	9c03      	ldr	r4, [sp, #12]
 8005354:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005358:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800535c:	2800      	cmp	r0, #0
 800535e:	f040 8086 	bne.w	800546e <_dtoa_r+0x4c6>
 8005362:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005366:	ee36 6b47 	vsub.f64	d6, d6, d7
 800536a:	ec42 1b17 	vmov	d7, r1, r2
 800536e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005376:	f300 8272 	bgt.w	800585e <_dtoa_r+0x8b6>
 800537a:	eeb1 7b47 	vneg.f64	d7, d7
 800537e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005386:	f100 8267 	bmi.w	8005858 <_dtoa_r+0x8b0>
 800538a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800538e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005392:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005394:	2a00      	cmp	r2, #0
 8005396:	f2c0 8129 	blt.w	80055ec <_dtoa_r+0x644>
 800539a:	f1bb 0f0e 	cmp.w	fp, #14
 800539e:	f300 8125 	bgt.w	80055ec <_dtoa_r+0x644>
 80053a2:	4b90      	ldr	r3, [pc, #576]	; (80055e4 <_dtoa_r+0x63c>)
 80053a4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80053a8:	ed93 6b00 	vldr	d6, [r3]
 80053ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f280 80c3 	bge.w	800553a <_dtoa_r+0x592>
 80053b4:	f1b9 0f00 	cmp.w	r9, #0
 80053b8:	f300 80bf 	bgt.w	800553a <_dtoa_r+0x592>
 80053bc:	f040 824c 	bne.w	8005858 <_dtoa_r+0x8b0>
 80053c0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80053c4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80053c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80053cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80053d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d4:	464c      	mov	r4, r9
 80053d6:	464f      	mov	r7, r9
 80053d8:	f280 8222 	bge.w	8005820 <_dtoa_r+0x878>
 80053dc:	f8dd 8000 	ldr.w	r8, [sp]
 80053e0:	2331      	movs	r3, #49	; 0x31
 80053e2:	f808 3b01 	strb.w	r3, [r8], #1
 80053e6:	f10b 0b01 	add.w	fp, fp, #1
 80053ea:	e21e      	b.n	800582a <_dtoa_r+0x882>
 80053ec:	2202      	movs	r2, #2
 80053ee:	e77c      	b.n	80052ea <_dtoa_r+0x342>
 80053f0:	07cc      	lsls	r4, r1, #31
 80053f2:	d504      	bpl.n	80053fe <_dtoa_r+0x456>
 80053f4:	ed90 6b00 	vldr	d6, [r0]
 80053f8:	3201      	adds	r2, #1
 80053fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80053fe:	1049      	asrs	r1, r1, #1
 8005400:	3008      	adds	r0, #8
 8005402:	e773      	b.n	80052ec <_dtoa_r+0x344>
 8005404:	d02e      	beq.n	8005464 <_dtoa_r+0x4bc>
 8005406:	f1cb 0100 	rsb	r1, fp, #0
 800540a:	4a76      	ldr	r2, [pc, #472]	; (80055e4 <_dtoa_r+0x63c>)
 800540c:	f001 000f 	and.w	r0, r1, #15
 8005410:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005414:	ed92 7b00 	vldr	d7, [r2]
 8005418:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800541c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005420:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005424:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8005428:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800542c:	486e      	ldr	r0, [pc, #440]	; (80055e8 <_dtoa_r+0x640>)
 800542e:	1109      	asrs	r1, r1, #4
 8005430:	2400      	movs	r4, #0
 8005432:	2202      	movs	r2, #2
 8005434:	b939      	cbnz	r1, 8005446 <_dtoa_r+0x49e>
 8005436:	2c00      	cmp	r4, #0
 8005438:	f43f af60 	beq.w	80052fc <_dtoa_r+0x354>
 800543c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005440:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005444:	e75a      	b.n	80052fc <_dtoa_r+0x354>
 8005446:	07cf      	lsls	r7, r1, #31
 8005448:	d509      	bpl.n	800545e <_dtoa_r+0x4b6>
 800544a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800544e:	ed90 7b00 	vldr	d7, [r0]
 8005452:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005456:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800545a:	3201      	adds	r2, #1
 800545c:	2401      	movs	r4, #1
 800545e:	1049      	asrs	r1, r1, #1
 8005460:	3008      	adds	r0, #8
 8005462:	e7e7      	b.n	8005434 <_dtoa_r+0x48c>
 8005464:	2202      	movs	r2, #2
 8005466:	e749      	b.n	80052fc <_dtoa_r+0x354>
 8005468:	465f      	mov	r7, fp
 800546a:	4648      	mov	r0, r9
 800546c:	e765      	b.n	800533a <_dtoa_r+0x392>
 800546e:	ec42 1b17 	vmov	d7, r1, r2
 8005472:	4a5c      	ldr	r2, [pc, #368]	; (80055e4 <_dtoa_r+0x63c>)
 8005474:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005478:	ed12 4b02 	vldr	d4, [r2, #-8]
 800547c:	9a00      	ldr	r2, [sp, #0]
 800547e:	1814      	adds	r4, r2, r0
 8005480:	9a08      	ldr	r2, [sp, #32]
 8005482:	b352      	cbz	r2, 80054da <_dtoa_r+0x532>
 8005484:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005488:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800548c:	f8dd 8000 	ldr.w	r8, [sp]
 8005490:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005494:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005498:	ee35 7b47 	vsub.f64	d7, d5, d7
 800549c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80054a0:	ee14 2a90 	vmov	r2, s9
 80054a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80054a8:	3230      	adds	r2, #48	; 0x30
 80054aa:	ee36 6b45 	vsub.f64	d6, d6, d5
 80054ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80054b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b6:	f808 2b01 	strb.w	r2, [r8], #1
 80054ba:	d439      	bmi.n	8005530 <_dtoa_r+0x588>
 80054bc:	ee32 5b46 	vsub.f64	d5, d2, d6
 80054c0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80054c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c8:	d472      	bmi.n	80055b0 <_dtoa_r+0x608>
 80054ca:	45a0      	cmp	r8, r4
 80054cc:	f43f af5d 	beq.w	800538a <_dtoa_r+0x3e2>
 80054d0:	ee27 7b03 	vmul.f64	d7, d7, d3
 80054d4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80054d8:	e7e0      	b.n	800549c <_dtoa_r+0x4f4>
 80054da:	f8dd 8000 	ldr.w	r8, [sp]
 80054de:	ee27 7b04 	vmul.f64	d7, d7, d4
 80054e2:	4621      	mov	r1, r4
 80054e4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80054e8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80054ec:	ee14 2a90 	vmov	r2, s9
 80054f0:	3230      	adds	r2, #48	; 0x30
 80054f2:	f808 2b01 	strb.w	r2, [r8], #1
 80054f6:	45a0      	cmp	r8, r4
 80054f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80054fc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005500:	d118      	bne.n	8005534 <_dtoa_r+0x58c>
 8005502:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005506:	ee37 4b05 	vadd.f64	d4, d7, d5
 800550a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800550e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005512:	dc4d      	bgt.n	80055b0 <_dtoa_r+0x608>
 8005514:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005518:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800551c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005520:	f57f af33 	bpl.w	800538a <_dtoa_r+0x3e2>
 8005524:	4688      	mov	r8, r1
 8005526:	3901      	subs	r1, #1
 8005528:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800552c:	2b30      	cmp	r3, #48	; 0x30
 800552e:	d0f9      	beq.n	8005524 <_dtoa_r+0x57c>
 8005530:	46bb      	mov	fp, r7
 8005532:	e02a      	b.n	800558a <_dtoa_r+0x5e2>
 8005534:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005538:	e7d6      	b.n	80054e8 <_dtoa_r+0x540>
 800553a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800553e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005542:	f8dd 8000 	ldr.w	r8, [sp]
 8005546:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800554a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800554e:	ee15 3a10 	vmov	r3, s10
 8005552:	3330      	adds	r3, #48	; 0x30
 8005554:	f808 3b01 	strb.w	r3, [r8], #1
 8005558:	9b00      	ldr	r3, [sp, #0]
 800555a:	eba8 0303 	sub.w	r3, r8, r3
 800555e:	4599      	cmp	r9, r3
 8005560:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005564:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005568:	d133      	bne.n	80055d2 <_dtoa_r+0x62a>
 800556a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800556e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005576:	dc1a      	bgt.n	80055ae <_dtoa_r+0x606>
 8005578:	eeb4 7b46 	vcmp.f64	d7, d6
 800557c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005580:	d103      	bne.n	800558a <_dtoa_r+0x5e2>
 8005582:	ee15 3a10 	vmov	r3, s10
 8005586:	07d9      	lsls	r1, r3, #31
 8005588:	d411      	bmi.n	80055ae <_dtoa_r+0x606>
 800558a:	4629      	mov	r1, r5
 800558c:	4630      	mov	r0, r6
 800558e:	f000 fbe1 	bl	8005d54 <_Bfree>
 8005592:	2300      	movs	r3, #0
 8005594:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005596:	f888 3000 	strb.w	r3, [r8]
 800559a:	f10b 0301 	add.w	r3, fp, #1
 800559e:	6013      	str	r3, [r2, #0]
 80055a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f43f ad4d 	beq.w	8005042 <_dtoa_r+0x9a>
 80055a8:	f8c3 8000 	str.w	r8, [r3]
 80055ac:	e549      	b.n	8005042 <_dtoa_r+0x9a>
 80055ae:	465f      	mov	r7, fp
 80055b0:	4643      	mov	r3, r8
 80055b2:	4698      	mov	r8, r3
 80055b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055b8:	2a39      	cmp	r2, #57	; 0x39
 80055ba:	d106      	bne.n	80055ca <_dtoa_r+0x622>
 80055bc:	9a00      	ldr	r2, [sp, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d1f7      	bne.n	80055b2 <_dtoa_r+0x60a>
 80055c2:	9900      	ldr	r1, [sp, #0]
 80055c4:	2230      	movs	r2, #48	; 0x30
 80055c6:	3701      	adds	r7, #1
 80055c8:	700a      	strb	r2, [r1, #0]
 80055ca:	781a      	ldrb	r2, [r3, #0]
 80055cc:	3201      	adds	r2, #1
 80055ce:	701a      	strb	r2, [r3, #0]
 80055d0:	e7ae      	b.n	8005530 <_dtoa_r+0x588>
 80055d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80055d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80055da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055de:	d1b2      	bne.n	8005546 <_dtoa_r+0x59e>
 80055e0:	e7d3      	b.n	800558a <_dtoa_r+0x5e2>
 80055e2:	bf00      	nop
 80055e4:	08007408 	.word	0x08007408
 80055e8:	080073e0 	.word	0x080073e0
 80055ec:	9908      	ldr	r1, [sp, #32]
 80055ee:	2900      	cmp	r1, #0
 80055f0:	f000 80d1 	beq.w	8005796 <_dtoa_r+0x7ee>
 80055f4:	9907      	ldr	r1, [sp, #28]
 80055f6:	2901      	cmp	r1, #1
 80055f8:	f300 80b4 	bgt.w	8005764 <_dtoa_r+0x7bc>
 80055fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80055fe:	2900      	cmp	r1, #0
 8005600:	f000 80ac 	beq.w	800575c <_dtoa_r+0x7b4>
 8005604:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005608:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800560c:	461c      	mov	r4, r3
 800560e:	930a      	str	r3, [sp, #40]	; 0x28
 8005610:	9b05      	ldr	r3, [sp, #20]
 8005612:	4413      	add	r3, r2
 8005614:	9305      	str	r3, [sp, #20]
 8005616:	9b06      	ldr	r3, [sp, #24]
 8005618:	2101      	movs	r1, #1
 800561a:	4413      	add	r3, r2
 800561c:	4630      	mov	r0, r6
 800561e:	9306      	str	r3, [sp, #24]
 8005620:	f000 fc54 	bl	8005ecc <__i2b>
 8005624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005626:	4607      	mov	r7, r0
 8005628:	f1b8 0f00 	cmp.w	r8, #0
 800562c:	dd0d      	ble.n	800564a <_dtoa_r+0x6a2>
 800562e:	9a06      	ldr	r2, [sp, #24]
 8005630:	2a00      	cmp	r2, #0
 8005632:	dd0a      	ble.n	800564a <_dtoa_r+0x6a2>
 8005634:	4542      	cmp	r2, r8
 8005636:	9905      	ldr	r1, [sp, #20]
 8005638:	bfa8      	it	ge
 800563a:	4642      	movge	r2, r8
 800563c:	1a89      	subs	r1, r1, r2
 800563e:	9105      	str	r1, [sp, #20]
 8005640:	9906      	ldr	r1, [sp, #24]
 8005642:	eba8 0802 	sub.w	r8, r8, r2
 8005646:	1a8a      	subs	r2, r1, r2
 8005648:	9206      	str	r2, [sp, #24]
 800564a:	b303      	cbz	r3, 800568e <_dtoa_r+0x6e6>
 800564c:	9a08      	ldr	r2, [sp, #32]
 800564e:	2a00      	cmp	r2, #0
 8005650:	f000 80a6 	beq.w	80057a0 <_dtoa_r+0x7f8>
 8005654:	2c00      	cmp	r4, #0
 8005656:	dd13      	ble.n	8005680 <_dtoa_r+0x6d8>
 8005658:	4639      	mov	r1, r7
 800565a:	4622      	mov	r2, r4
 800565c:	4630      	mov	r0, r6
 800565e:	930c      	str	r3, [sp, #48]	; 0x30
 8005660:	f000 fcf0 	bl	8006044 <__pow5mult>
 8005664:	462a      	mov	r2, r5
 8005666:	4601      	mov	r1, r0
 8005668:	4607      	mov	r7, r0
 800566a:	4630      	mov	r0, r6
 800566c:	f000 fc44 	bl	8005ef8 <__multiply>
 8005670:	4629      	mov	r1, r5
 8005672:	900a      	str	r0, [sp, #40]	; 0x28
 8005674:	4630      	mov	r0, r6
 8005676:	f000 fb6d 	bl	8005d54 <_Bfree>
 800567a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800567c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800567e:	4615      	mov	r5, r2
 8005680:	1b1a      	subs	r2, r3, r4
 8005682:	d004      	beq.n	800568e <_dtoa_r+0x6e6>
 8005684:	4629      	mov	r1, r5
 8005686:	4630      	mov	r0, r6
 8005688:	f000 fcdc 	bl	8006044 <__pow5mult>
 800568c:	4605      	mov	r5, r0
 800568e:	2101      	movs	r1, #1
 8005690:	4630      	mov	r0, r6
 8005692:	f000 fc1b 	bl	8005ecc <__i2b>
 8005696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005698:	2b00      	cmp	r3, #0
 800569a:	4604      	mov	r4, r0
 800569c:	f340 8082 	ble.w	80057a4 <_dtoa_r+0x7fc>
 80056a0:	461a      	mov	r2, r3
 80056a2:	4601      	mov	r1, r0
 80056a4:	4630      	mov	r0, r6
 80056a6:	f000 fccd 	bl	8006044 <__pow5mult>
 80056aa:	9b07      	ldr	r3, [sp, #28]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	4604      	mov	r4, r0
 80056b0:	dd7b      	ble.n	80057aa <_dtoa_r+0x802>
 80056b2:	2300      	movs	r3, #0
 80056b4:	930a      	str	r3, [sp, #40]	; 0x28
 80056b6:	6922      	ldr	r2, [r4, #16]
 80056b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80056bc:	6910      	ldr	r0, [r2, #16]
 80056be:	f000 fbb5 	bl	8005e2c <__hi0bits>
 80056c2:	f1c0 0020 	rsb	r0, r0, #32
 80056c6:	9b06      	ldr	r3, [sp, #24]
 80056c8:	4418      	add	r0, r3
 80056ca:	f010 001f 	ands.w	r0, r0, #31
 80056ce:	f000 808d 	beq.w	80057ec <_dtoa_r+0x844>
 80056d2:	f1c0 0220 	rsb	r2, r0, #32
 80056d6:	2a04      	cmp	r2, #4
 80056d8:	f340 8086 	ble.w	80057e8 <_dtoa_r+0x840>
 80056dc:	f1c0 001c 	rsb	r0, r0, #28
 80056e0:	9b05      	ldr	r3, [sp, #20]
 80056e2:	4403      	add	r3, r0
 80056e4:	9305      	str	r3, [sp, #20]
 80056e6:	9b06      	ldr	r3, [sp, #24]
 80056e8:	4403      	add	r3, r0
 80056ea:	4480      	add	r8, r0
 80056ec:	9306      	str	r3, [sp, #24]
 80056ee:	9b05      	ldr	r3, [sp, #20]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	dd05      	ble.n	8005700 <_dtoa_r+0x758>
 80056f4:	4629      	mov	r1, r5
 80056f6:	461a      	mov	r2, r3
 80056f8:	4630      	mov	r0, r6
 80056fa:	f000 fcfd 	bl	80060f8 <__lshift>
 80056fe:	4605      	mov	r5, r0
 8005700:	9b06      	ldr	r3, [sp, #24]
 8005702:	2b00      	cmp	r3, #0
 8005704:	dd05      	ble.n	8005712 <_dtoa_r+0x76a>
 8005706:	4621      	mov	r1, r4
 8005708:	461a      	mov	r2, r3
 800570a:	4630      	mov	r0, r6
 800570c:	f000 fcf4 	bl	80060f8 <__lshift>
 8005710:	4604      	mov	r4, r0
 8005712:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005714:	2b00      	cmp	r3, #0
 8005716:	d06b      	beq.n	80057f0 <_dtoa_r+0x848>
 8005718:	4621      	mov	r1, r4
 800571a:	4628      	mov	r0, r5
 800571c:	f000 fd58 	bl	80061d0 <__mcmp>
 8005720:	2800      	cmp	r0, #0
 8005722:	da65      	bge.n	80057f0 <_dtoa_r+0x848>
 8005724:	2300      	movs	r3, #0
 8005726:	4629      	mov	r1, r5
 8005728:	220a      	movs	r2, #10
 800572a:	4630      	mov	r0, r6
 800572c:	f000 fb34 	bl	8005d98 <__multadd>
 8005730:	9b08      	ldr	r3, [sp, #32]
 8005732:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005736:	4605      	mov	r5, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 8192 	beq.w	8005a62 <_dtoa_r+0xaba>
 800573e:	4639      	mov	r1, r7
 8005740:	2300      	movs	r3, #0
 8005742:	220a      	movs	r2, #10
 8005744:	4630      	mov	r0, r6
 8005746:	f000 fb27 	bl	8005d98 <__multadd>
 800574a:	f1ba 0f00 	cmp.w	sl, #0
 800574e:	4607      	mov	r7, r0
 8005750:	f300 808e 	bgt.w	8005870 <_dtoa_r+0x8c8>
 8005754:	9b07      	ldr	r3, [sp, #28]
 8005756:	2b02      	cmp	r3, #2
 8005758:	dc51      	bgt.n	80057fe <_dtoa_r+0x856>
 800575a:	e089      	b.n	8005870 <_dtoa_r+0x8c8>
 800575c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800575e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005762:	e751      	b.n	8005608 <_dtoa_r+0x660>
 8005764:	f109 34ff 	add.w	r4, r9, #4294967295
 8005768:	42a3      	cmp	r3, r4
 800576a:	bfbf      	itttt	lt
 800576c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800576e:	1ae3      	sublt	r3, r4, r3
 8005770:	18d2      	addlt	r2, r2, r3
 8005772:	4613      	movlt	r3, r2
 8005774:	bfb7      	itett	lt
 8005776:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005778:	1b1c      	subge	r4, r3, r4
 800577a:	4623      	movlt	r3, r4
 800577c:	2400      	movlt	r4, #0
 800577e:	f1b9 0f00 	cmp.w	r9, #0
 8005782:	bfb5      	itete	lt
 8005784:	9a05      	ldrlt	r2, [sp, #20]
 8005786:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800578a:	eba2 0809 	sublt.w	r8, r2, r9
 800578e:	464a      	movge	r2, r9
 8005790:	bfb8      	it	lt
 8005792:	2200      	movlt	r2, #0
 8005794:	e73b      	b.n	800560e <_dtoa_r+0x666>
 8005796:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800579a:	9f08      	ldr	r7, [sp, #32]
 800579c:	461c      	mov	r4, r3
 800579e:	e743      	b.n	8005628 <_dtoa_r+0x680>
 80057a0:	461a      	mov	r2, r3
 80057a2:	e76f      	b.n	8005684 <_dtoa_r+0x6dc>
 80057a4:	9b07      	ldr	r3, [sp, #28]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	dc18      	bgt.n	80057dc <_dtoa_r+0x834>
 80057aa:	9b02      	ldr	r3, [sp, #8]
 80057ac:	b9b3      	cbnz	r3, 80057dc <_dtoa_r+0x834>
 80057ae:	9b03      	ldr	r3, [sp, #12]
 80057b0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80057b4:	b9a2      	cbnz	r2, 80057e0 <_dtoa_r+0x838>
 80057b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80057ba:	0d12      	lsrs	r2, r2, #20
 80057bc:	0512      	lsls	r2, r2, #20
 80057be:	b18a      	cbz	r2, 80057e4 <_dtoa_r+0x83c>
 80057c0:	9b05      	ldr	r3, [sp, #20]
 80057c2:	3301      	adds	r3, #1
 80057c4:	9305      	str	r3, [sp, #20]
 80057c6:	9b06      	ldr	r3, [sp, #24]
 80057c8:	3301      	adds	r3, #1
 80057ca:	9306      	str	r3, [sp, #24]
 80057cc:	2301      	movs	r3, #1
 80057ce:	930a      	str	r3, [sp, #40]	; 0x28
 80057d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f47f af6f 	bne.w	80056b6 <_dtoa_r+0x70e>
 80057d8:	2001      	movs	r0, #1
 80057da:	e774      	b.n	80056c6 <_dtoa_r+0x71e>
 80057dc:	2300      	movs	r3, #0
 80057de:	e7f6      	b.n	80057ce <_dtoa_r+0x826>
 80057e0:	9b02      	ldr	r3, [sp, #8]
 80057e2:	e7f4      	b.n	80057ce <_dtoa_r+0x826>
 80057e4:	920a      	str	r2, [sp, #40]	; 0x28
 80057e6:	e7f3      	b.n	80057d0 <_dtoa_r+0x828>
 80057e8:	d081      	beq.n	80056ee <_dtoa_r+0x746>
 80057ea:	4610      	mov	r0, r2
 80057ec:	301c      	adds	r0, #28
 80057ee:	e777      	b.n	80056e0 <_dtoa_r+0x738>
 80057f0:	f1b9 0f00 	cmp.w	r9, #0
 80057f4:	dc37      	bgt.n	8005866 <_dtoa_r+0x8be>
 80057f6:	9b07      	ldr	r3, [sp, #28]
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	dd34      	ble.n	8005866 <_dtoa_r+0x8be>
 80057fc:	46ca      	mov	sl, r9
 80057fe:	f1ba 0f00 	cmp.w	sl, #0
 8005802:	d10d      	bne.n	8005820 <_dtoa_r+0x878>
 8005804:	4621      	mov	r1, r4
 8005806:	4653      	mov	r3, sl
 8005808:	2205      	movs	r2, #5
 800580a:	4630      	mov	r0, r6
 800580c:	f000 fac4 	bl	8005d98 <__multadd>
 8005810:	4601      	mov	r1, r0
 8005812:	4604      	mov	r4, r0
 8005814:	4628      	mov	r0, r5
 8005816:	f000 fcdb 	bl	80061d0 <__mcmp>
 800581a:	2800      	cmp	r0, #0
 800581c:	f73f adde 	bgt.w	80053dc <_dtoa_r+0x434>
 8005820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005822:	f8dd 8000 	ldr.w	r8, [sp]
 8005826:	ea6f 0b03 	mvn.w	fp, r3
 800582a:	f04f 0900 	mov.w	r9, #0
 800582e:	4621      	mov	r1, r4
 8005830:	4630      	mov	r0, r6
 8005832:	f000 fa8f 	bl	8005d54 <_Bfree>
 8005836:	2f00      	cmp	r7, #0
 8005838:	f43f aea7 	beq.w	800558a <_dtoa_r+0x5e2>
 800583c:	f1b9 0f00 	cmp.w	r9, #0
 8005840:	d005      	beq.n	800584e <_dtoa_r+0x8a6>
 8005842:	45b9      	cmp	r9, r7
 8005844:	d003      	beq.n	800584e <_dtoa_r+0x8a6>
 8005846:	4649      	mov	r1, r9
 8005848:	4630      	mov	r0, r6
 800584a:	f000 fa83 	bl	8005d54 <_Bfree>
 800584e:	4639      	mov	r1, r7
 8005850:	4630      	mov	r0, r6
 8005852:	f000 fa7f 	bl	8005d54 <_Bfree>
 8005856:	e698      	b.n	800558a <_dtoa_r+0x5e2>
 8005858:	2400      	movs	r4, #0
 800585a:	4627      	mov	r7, r4
 800585c:	e7e0      	b.n	8005820 <_dtoa_r+0x878>
 800585e:	46bb      	mov	fp, r7
 8005860:	4604      	mov	r4, r0
 8005862:	4607      	mov	r7, r0
 8005864:	e5ba      	b.n	80053dc <_dtoa_r+0x434>
 8005866:	9b08      	ldr	r3, [sp, #32]
 8005868:	46ca      	mov	sl, r9
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 8100 	beq.w	8005a70 <_dtoa_r+0xac8>
 8005870:	f1b8 0f00 	cmp.w	r8, #0
 8005874:	dd05      	ble.n	8005882 <_dtoa_r+0x8da>
 8005876:	4639      	mov	r1, r7
 8005878:	4642      	mov	r2, r8
 800587a:	4630      	mov	r0, r6
 800587c:	f000 fc3c 	bl	80060f8 <__lshift>
 8005880:	4607      	mov	r7, r0
 8005882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005884:	2b00      	cmp	r3, #0
 8005886:	d05d      	beq.n	8005944 <_dtoa_r+0x99c>
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	4630      	mov	r0, r6
 800588c:	f000 fa22 	bl	8005cd4 <_Balloc>
 8005890:	4680      	mov	r8, r0
 8005892:	b928      	cbnz	r0, 80058a0 <_dtoa_r+0x8f8>
 8005894:	4b82      	ldr	r3, [pc, #520]	; (8005aa0 <_dtoa_r+0xaf8>)
 8005896:	4602      	mov	r2, r0
 8005898:	f240 21ea 	movw	r1, #746	; 0x2ea
 800589c:	f7ff bb9a 	b.w	8004fd4 <_dtoa_r+0x2c>
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	3202      	adds	r2, #2
 80058a4:	0092      	lsls	r2, r2, #2
 80058a6:	f107 010c 	add.w	r1, r7, #12
 80058aa:	300c      	adds	r0, #12
 80058ac:	f000 fa04 	bl	8005cb8 <memcpy>
 80058b0:	2201      	movs	r2, #1
 80058b2:	4641      	mov	r1, r8
 80058b4:	4630      	mov	r0, r6
 80058b6:	f000 fc1f 	bl	80060f8 <__lshift>
 80058ba:	9b00      	ldr	r3, [sp, #0]
 80058bc:	3301      	adds	r3, #1
 80058be:	9305      	str	r3, [sp, #20]
 80058c0:	9b00      	ldr	r3, [sp, #0]
 80058c2:	4453      	add	r3, sl
 80058c4:	9309      	str	r3, [sp, #36]	; 0x24
 80058c6:	9b02      	ldr	r3, [sp, #8]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	46b9      	mov	r9, r7
 80058ce:	9308      	str	r3, [sp, #32]
 80058d0:	4607      	mov	r7, r0
 80058d2:	9b05      	ldr	r3, [sp, #20]
 80058d4:	4621      	mov	r1, r4
 80058d6:	3b01      	subs	r3, #1
 80058d8:	4628      	mov	r0, r5
 80058da:	9302      	str	r3, [sp, #8]
 80058dc:	f7ff fad6 	bl	8004e8c <quorem>
 80058e0:	4603      	mov	r3, r0
 80058e2:	3330      	adds	r3, #48	; 0x30
 80058e4:	9006      	str	r0, [sp, #24]
 80058e6:	4649      	mov	r1, r9
 80058e8:	4628      	mov	r0, r5
 80058ea:	930a      	str	r3, [sp, #40]	; 0x28
 80058ec:	f000 fc70 	bl	80061d0 <__mcmp>
 80058f0:	463a      	mov	r2, r7
 80058f2:	4682      	mov	sl, r0
 80058f4:	4621      	mov	r1, r4
 80058f6:	4630      	mov	r0, r6
 80058f8:	f000 fc86 	bl	8006208 <__mdiff>
 80058fc:	68c2      	ldr	r2, [r0, #12]
 80058fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005900:	4680      	mov	r8, r0
 8005902:	bb0a      	cbnz	r2, 8005948 <_dtoa_r+0x9a0>
 8005904:	4601      	mov	r1, r0
 8005906:	4628      	mov	r0, r5
 8005908:	f000 fc62 	bl	80061d0 <__mcmp>
 800590c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800590e:	4602      	mov	r2, r0
 8005910:	4641      	mov	r1, r8
 8005912:	4630      	mov	r0, r6
 8005914:	920e      	str	r2, [sp, #56]	; 0x38
 8005916:	930a      	str	r3, [sp, #40]	; 0x28
 8005918:	f000 fa1c 	bl	8005d54 <_Bfree>
 800591c:	9b07      	ldr	r3, [sp, #28]
 800591e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005920:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8005924:	ea43 0102 	orr.w	r1, r3, r2
 8005928:	9b08      	ldr	r3, [sp, #32]
 800592a:	430b      	orrs	r3, r1
 800592c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800592e:	d10d      	bne.n	800594c <_dtoa_r+0x9a4>
 8005930:	2b39      	cmp	r3, #57	; 0x39
 8005932:	d029      	beq.n	8005988 <_dtoa_r+0x9e0>
 8005934:	f1ba 0f00 	cmp.w	sl, #0
 8005938:	dd01      	ble.n	800593e <_dtoa_r+0x996>
 800593a:	9b06      	ldr	r3, [sp, #24]
 800593c:	3331      	adds	r3, #49	; 0x31
 800593e:	9a02      	ldr	r2, [sp, #8]
 8005940:	7013      	strb	r3, [r2, #0]
 8005942:	e774      	b.n	800582e <_dtoa_r+0x886>
 8005944:	4638      	mov	r0, r7
 8005946:	e7b8      	b.n	80058ba <_dtoa_r+0x912>
 8005948:	2201      	movs	r2, #1
 800594a:	e7e1      	b.n	8005910 <_dtoa_r+0x968>
 800594c:	f1ba 0f00 	cmp.w	sl, #0
 8005950:	db06      	blt.n	8005960 <_dtoa_r+0x9b8>
 8005952:	9907      	ldr	r1, [sp, #28]
 8005954:	ea41 0a0a 	orr.w	sl, r1, sl
 8005958:	9908      	ldr	r1, [sp, #32]
 800595a:	ea5a 0101 	orrs.w	r1, sl, r1
 800595e:	d120      	bne.n	80059a2 <_dtoa_r+0x9fa>
 8005960:	2a00      	cmp	r2, #0
 8005962:	ddec      	ble.n	800593e <_dtoa_r+0x996>
 8005964:	4629      	mov	r1, r5
 8005966:	2201      	movs	r2, #1
 8005968:	4630      	mov	r0, r6
 800596a:	9305      	str	r3, [sp, #20]
 800596c:	f000 fbc4 	bl	80060f8 <__lshift>
 8005970:	4621      	mov	r1, r4
 8005972:	4605      	mov	r5, r0
 8005974:	f000 fc2c 	bl	80061d0 <__mcmp>
 8005978:	2800      	cmp	r0, #0
 800597a:	9b05      	ldr	r3, [sp, #20]
 800597c:	dc02      	bgt.n	8005984 <_dtoa_r+0x9dc>
 800597e:	d1de      	bne.n	800593e <_dtoa_r+0x996>
 8005980:	07da      	lsls	r2, r3, #31
 8005982:	d5dc      	bpl.n	800593e <_dtoa_r+0x996>
 8005984:	2b39      	cmp	r3, #57	; 0x39
 8005986:	d1d8      	bne.n	800593a <_dtoa_r+0x992>
 8005988:	9a02      	ldr	r2, [sp, #8]
 800598a:	2339      	movs	r3, #57	; 0x39
 800598c:	7013      	strb	r3, [r2, #0]
 800598e:	4643      	mov	r3, r8
 8005990:	4698      	mov	r8, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8005998:	2a39      	cmp	r2, #57	; 0x39
 800599a:	d051      	beq.n	8005a40 <_dtoa_r+0xa98>
 800599c:	3201      	adds	r2, #1
 800599e:	701a      	strb	r2, [r3, #0]
 80059a0:	e745      	b.n	800582e <_dtoa_r+0x886>
 80059a2:	2a00      	cmp	r2, #0
 80059a4:	dd03      	ble.n	80059ae <_dtoa_r+0xa06>
 80059a6:	2b39      	cmp	r3, #57	; 0x39
 80059a8:	d0ee      	beq.n	8005988 <_dtoa_r+0x9e0>
 80059aa:	3301      	adds	r3, #1
 80059ac:	e7c7      	b.n	800593e <_dtoa_r+0x996>
 80059ae:	9a05      	ldr	r2, [sp, #20]
 80059b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059b2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80059b6:	428a      	cmp	r2, r1
 80059b8:	d02b      	beq.n	8005a12 <_dtoa_r+0xa6a>
 80059ba:	4629      	mov	r1, r5
 80059bc:	2300      	movs	r3, #0
 80059be:	220a      	movs	r2, #10
 80059c0:	4630      	mov	r0, r6
 80059c2:	f000 f9e9 	bl	8005d98 <__multadd>
 80059c6:	45b9      	cmp	r9, r7
 80059c8:	4605      	mov	r5, r0
 80059ca:	f04f 0300 	mov.w	r3, #0
 80059ce:	f04f 020a 	mov.w	r2, #10
 80059d2:	4649      	mov	r1, r9
 80059d4:	4630      	mov	r0, r6
 80059d6:	d107      	bne.n	80059e8 <_dtoa_r+0xa40>
 80059d8:	f000 f9de 	bl	8005d98 <__multadd>
 80059dc:	4681      	mov	r9, r0
 80059de:	4607      	mov	r7, r0
 80059e0:	9b05      	ldr	r3, [sp, #20]
 80059e2:	3301      	adds	r3, #1
 80059e4:	9305      	str	r3, [sp, #20]
 80059e6:	e774      	b.n	80058d2 <_dtoa_r+0x92a>
 80059e8:	f000 f9d6 	bl	8005d98 <__multadd>
 80059ec:	4639      	mov	r1, r7
 80059ee:	4681      	mov	r9, r0
 80059f0:	2300      	movs	r3, #0
 80059f2:	220a      	movs	r2, #10
 80059f4:	4630      	mov	r0, r6
 80059f6:	f000 f9cf 	bl	8005d98 <__multadd>
 80059fa:	4607      	mov	r7, r0
 80059fc:	e7f0      	b.n	80059e0 <_dtoa_r+0xa38>
 80059fe:	f1ba 0f00 	cmp.w	sl, #0
 8005a02:	9a00      	ldr	r2, [sp, #0]
 8005a04:	bfcc      	ite	gt
 8005a06:	46d0      	movgt	r8, sl
 8005a08:	f04f 0801 	movle.w	r8, #1
 8005a0c:	4490      	add	r8, r2
 8005a0e:	f04f 0900 	mov.w	r9, #0
 8005a12:	4629      	mov	r1, r5
 8005a14:	2201      	movs	r2, #1
 8005a16:	4630      	mov	r0, r6
 8005a18:	9302      	str	r3, [sp, #8]
 8005a1a:	f000 fb6d 	bl	80060f8 <__lshift>
 8005a1e:	4621      	mov	r1, r4
 8005a20:	4605      	mov	r5, r0
 8005a22:	f000 fbd5 	bl	80061d0 <__mcmp>
 8005a26:	2800      	cmp	r0, #0
 8005a28:	dcb1      	bgt.n	800598e <_dtoa_r+0x9e6>
 8005a2a:	d102      	bne.n	8005a32 <_dtoa_r+0xa8a>
 8005a2c:	9b02      	ldr	r3, [sp, #8]
 8005a2e:	07db      	lsls	r3, r3, #31
 8005a30:	d4ad      	bmi.n	800598e <_dtoa_r+0x9e6>
 8005a32:	4643      	mov	r3, r8
 8005a34:	4698      	mov	r8, r3
 8005a36:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a3a:	2a30      	cmp	r2, #48	; 0x30
 8005a3c:	d0fa      	beq.n	8005a34 <_dtoa_r+0xa8c>
 8005a3e:	e6f6      	b.n	800582e <_dtoa_r+0x886>
 8005a40:	9a00      	ldr	r2, [sp, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d1a4      	bne.n	8005990 <_dtoa_r+0x9e8>
 8005a46:	f10b 0b01 	add.w	fp, fp, #1
 8005a4a:	2331      	movs	r3, #49	; 0x31
 8005a4c:	e778      	b.n	8005940 <_dtoa_r+0x998>
 8005a4e:	4b15      	ldr	r3, [pc, #84]	; (8005aa4 <_dtoa_r+0xafc>)
 8005a50:	f7ff bb12 	b.w	8005078 <_dtoa_r+0xd0>
 8005a54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f47f aaee 	bne.w	8005038 <_dtoa_r+0x90>
 8005a5c:	4b12      	ldr	r3, [pc, #72]	; (8005aa8 <_dtoa_r+0xb00>)
 8005a5e:	f7ff bb0b 	b.w	8005078 <_dtoa_r+0xd0>
 8005a62:	f1ba 0f00 	cmp.w	sl, #0
 8005a66:	dc03      	bgt.n	8005a70 <_dtoa_r+0xac8>
 8005a68:	9b07      	ldr	r3, [sp, #28]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	f73f aec7 	bgt.w	80057fe <_dtoa_r+0x856>
 8005a70:	f8dd 8000 	ldr.w	r8, [sp]
 8005a74:	4621      	mov	r1, r4
 8005a76:	4628      	mov	r0, r5
 8005a78:	f7ff fa08 	bl	8004e8c <quorem>
 8005a7c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005a80:	f808 3b01 	strb.w	r3, [r8], #1
 8005a84:	9a00      	ldr	r2, [sp, #0]
 8005a86:	eba8 0202 	sub.w	r2, r8, r2
 8005a8a:	4592      	cmp	sl, r2
 8005a8c:	ddb7      	ble.n	80059fe <_dtoa_r+0xa56>
 8005a8e:	4629      	mov	r1, r5
 8005a90:	2300      	movs	r3, #0
 8005a92:	220a      	movs	r2, #10
 8005a94:	4630      	mov	r0, r6
 8005a96:	f000 f97f 	bl	8005d98 <__multadd>
 8005a9a:	4605      	mov	r5, r0
 8005a9c:	e7ea      	b.n	8005a74 <_dtoa_r+0xacc>
 8005a9e:	bf00      	nop
 8005aa0:	0800730f 	.word	0x0800730f
 8005aa4:	08007268 	.word	0x08007268
 8005aa8:	0800728c 	.word	0x0800728c

08005aac <std>:
 8005aac:	2300      	movs	r3, #0
 8005aae:	b510      	push	{r4, lr}
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8005ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005aba:	6083      	str	r3, [r0, #8]
 8005abc:	8181      	strh	r1, [r0, #12]
 8005abe:	6643      	str	r3, [r0, #100]	; 0x64
 8005ac0:	81c2      	strh	r2, [r0, #14]
 8005ac2:	6183      	str	r3, [r0, #24]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	2208      	movs	r2, #8
 8005ac8:	305c      	adds	r0, #92	; 0x5c
 8005aca:	f7fe fd5b 	bl	8004584 <memset>
 8005ace:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <std+0x38>)
 8005ad0:	6263      	str	r3, [r4, #36]	; 0x24
 8005ad2:	4b05      	ldr	r3, [pc, #20]	; (8005ae8 <std+0x3c>)
 8005ad4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ad6:	4b05      	ldr	r3, [pc, #20]	; (8005aec <std+0x40>)
 8005ad8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ada:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <std+0x44>)
 8005adc:	6224      	str	r4, [r4, #32]
 8005ade:	6323      	str	r3, [r4, #48]	; 0x30
 8005ae0:	bd10      	pop	{r4, pc}
 8005ae2:	bf00      	nop
 8005ae4:	08006ad1 	.word	0x08006ad1
 8005ae8:	08006af3 	.word	0x08006af3
 8005aec:	08006b2b 	.word	0x08006b2b
 8005af0:	08006b4f 	.word	0x08006b4f

08005af4 <_cleanup_r>:
 8005af4:	4901      	ldr	r1, [pc, #4]	; (8005afc <_cleanup_r+0x8>)
 8005af6:	f000 b8af 	b.w	8005c58 <_fwalk_reent>
 8005afa:	bf00      	nop
 8005afc:	08006e65 	.word	0x08006e65

08005b00 <__sfmoreglue>:
 8005b00:	b570      	push	{r4, r5, r6, lr}
 8005b02:	1e4a      	subs	r2, r1, #1
 8005b04:	2568      	movs	r5, #104	; 0x68
 8005b06:	4355      	muls	r5, r2
 8005b08:	460e      	mov	r6, r1
 8005b0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b0e:	f000 fcbf 	bl	8006490 <_malloc_r>
 8005b12:	4604      	mov	r4, r0
 8005b14:	b140      	cbz	r0, 8005b28 <__sfmoreglue+0x28>
 8005b16:	2100      	movs	r1, #0
 8005b18:	e9c0 1600 	strd	r1, r6, [r0]
 8005b1c:	300c      	adds	r0, #12
 8005b1e:	60a0      	str	r0, [r4, #8]
 8005b20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b24:	f7fe fd2e 	bl	8004584 <memset>
 8005b28:	4620      	mov	r0, r4
 8005b2a:	bd70      	pop	{r4, r5, r6, pc}

08005b2c <__sfp_lock_acquire>:
 8005b2c:	4801      	ldr	r0, [pc, #4]	; (8005b34 <__sfp_lock_acquire+0x8>)
 8005b2e:	f000 b8b8 	b.w	8005ca2 <__retarget_lock_acquire_recursive>
 8005b32:	bf00      	nop
 8005b34:	20003938 	.word	0x20003938

08005b38 <__sfp_lock_release>:
 8005b38:	4801      	ldr	r0, [pc, #4]	; (8005b40 <__sfp_lock_release+0x8>)
 8005b3a:	f000 b8b3 	b.w	8005ca4 <__retarget_lock_release_recursive>
 8005b3e:	bf00      	nop
 8005b40:	20003938 	.word	0x20003938

08005b44 <__sinit_lock_acquire>:
 8005b44:	4801      	ldr	r0, [pc, #4]	; (8005b4c <__sinit_lock_acquire+0x8>)
 8005b46:	f000 b8ac 	b.w	8005ca2 <__retarget_lock_acquire_recursive>
 8005b4a:	bf00      	nop
 8005b4c:	20003933 	.word	0x20003933

08005b50 <__sinit_lock_release>:
 8005b50:	4801      	ldr	r0, [pc, #4]	; (8005b58 <__sinit_lock_release+0x8>)
 8005b52:	f000 b8a7 	b.w	8005ca4 <__retarget_lock_release_recursive>
 8005b56:	bf00      	nop
 8005b58:	20003933 	.word	0x20003933

08005b5c <__sinit>:
 8005b5c:	b510      	push	{r4, lr}
 8005b5e:	4604      	mov	r4, r0
 8005b60:	f7ff fff0 	bl	8005b44 <__sinit_lock_acquire>
 8005b64:	69a3      	ldr	r3, [r4, #24]
 8005b66:	b11b      	cbz	r3, 8005b70 <__sinit+0x14>
 8005b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b6c:	f7ff bff0 	b.w	8005b50 <__sinit_lock_release>
 8005b70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b74:	6523      	str	r3, [r4, #80]	; 0x50
 8005b76:	4b13      	ldr	r3, [pc, #76]	; (8005bc4 <__sinit+0x68>)
 8005b78:	4a13      	ldr	r2, [pc, #76]	; (8005bc8 <__sinit+0x6c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b7e:	42a3      	cmp	r3, r4
 8005b80:	bf04      	itt	eq
 8005b82:	2301      	moveq	r3, #1
 8005b84:	61a3      	streq	r3, [r4, #24]
 8005b86:	4620      	mov	r0, r4
 8005b88:	f000 f820 	bl	8005bcc <__sfp>
 8005b8c:	6060      	str	r0, [r4, #4]
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f000 f81c 	bl	8005bcc <__sfp>
 8005b94:	60a0      	str	r0, [r4, #8]
 8005b96:	4620      	mov	r0, r4
 8005b98:	f000 f818 	bl	8005bcc <__sfp>
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	60e0      	str	r0, [r4, #12]
 8005ba0:	2104      	movs	r1, #4
 8005ba2:	6860      	ldr	r0, [r4, #4]
 8005ba4:	f7ff ff82 	bl	8005aac <std>
 8005ba8:	68a0      	ldr	r0, [r4, #8]
 8005baa:	2201      	movs	r2, #1
 8005bac:	2109      	movs	r1, #9
 8005bae:	f7ff ff7d 	bl	8005aac <std>
 8005bb2:	68e0      	ldr	r0, [r4, #12]
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	2112      	movs	r1, #18
 8005bb8:	f7ff ff78 	bl	8005aac <std>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	61a3      	str	r3, [r4, #24]
 8005bc0:	e7d2      	b.n	8005b68 <__sinit+0xc>
 8005bc2:	bf00      	nop
 8005bc4:	08007254 	.word	0x08007254
 8005bc8:	08005af5 	.word	0x08005af5

08005bcc <__sfp>:
 8005bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bce:	4607      	mov	r7, r0
 8005bd0:	f7ff ffac 	bl	8005b2c <__sfp_lock_acquire>
 8005bd4:	4b1e      	ldr	r3, [pc, #120]	; (8005c50 <__sfp+0x84>)
 8005bd6:	681e      	ldr	r6, [r3, #0]
 8005bd8:	69b3      	ldr	r3, [r6, #24]
 8005bda:	b913      	cbnz	r3, 8005be2 <__sfp+0x16>
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f7ff ffbd 	bl	8005b5c <__sinit>
 8005be2:	3648      	adds	r6, #72	; 0x48
 8005be4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005be8:	3b01      	subs	r3, #1
 8005bea:	d503      	bpl.n	8005bf4 <__sfp+0x28>
 8005bec:	6833      	ldr	r3, [r6, #0]
 8005bee:	b30b      	cbz	r3, 8005c34 <__sfp+0x68>
 8005bf0:	6836      	ldr	r6, [r6, #0]
 8005bf2:	e7f7      	b.n	8005be4 <__sfp+0x18>
 8005bf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005bf8:	b9d5      	cbnz	r5, 8005c30 <__sfp+0x64>
 8005bfa:	4b16      	ldr	r3, [pc, #88]	; (8005c54 <__sfp+0x88>)
 8005bfc:	60e3      	str	r3, [r4, #12]
 8005bfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c02:	6665      	str	r5, [r4, #100]	; 0x64
 8005c04:	f000 f84c 	bl	8005ca0 <__retarget_lock_init_recursive>
 8005c08:	f7ff ff96 	bl	8005b38 <__sfp_lock_release>
 8005c0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c14:	6025      	str	r5, [r4, #0]
 8005c16:	61a5      	str	r5, [r4, #24]
 8005c18:	2208      	movs	r2, #8
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c20:	f7fe fcb0 	bl	8004584 <memset>
 8005c24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c30:	3468      	adds	r4, #104	; 0x68
 8005c32:	e7d9      	b.n	8005be8 <__sfp+0x1c>
 8005c34:	2104      	movs	r1, #4
 8005c36:	4638      	mov	r0, r7
 8005c38:	f7ff ff62 	bl	8005b00 <__sfmoreglue>
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	6030      	str	r0, [r6, #0]
 8005c40:	2800      	cmp	r0, #0
 8005c42:	d1d5      	bne.n	8005bf0 <__sfp+0x24>
 8005c44:	f7ff ff78 	bl	8005b38 <__sfp_lock_release>
 8005c48:	230c      	movs	r3, #12
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	e7ee      	b.n	8005c2c <__sfp+0x60>
 8005c4e:	bf00      	nop
 8005c50:	08007254 	.word	0x08007254
 8005c54:	ffff0001 	.word	0xffff0001

08005c58 <_fwalk_reent>:
 8005c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c5c:	4606      	mov	r6, r0
 8005c5e:	4688      	mov	r8, r1
 8005c60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c64:	2700      	movs	r7, #0
 8005c66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c6a:	f1b9 0901 	subs.w	r9, r9, #1
 8005c6e:	d505      	bpl.n	8005c7c <_fwalk_reent+0x24>
 8005c70:	6824      	ldr	r4, [r4, #0]
 8005c72:	2c00      	cmp	r4, #0
 8005c74:	d1f7      	bne.n	8005c66 <_fwalk_reent+0xe>
 8005c76:	4638      	mov	r0, r7
 8005c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c7c:	89ab      	ldrh	r3, [r5, #12]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d907      	bls.n	8005c92 <_fwalk_reent+0x3a>
 8005c82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c86:	3301      	adds	r3, #1
 8005c88:	d003      	beq.n	8005c92 <_fwalk_reent+0x3a>
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	47c0      	blx	r8
 8005c90:	4307      	orrs	r7, r0
 8005c92:	3568      	adds	r5, #104	; 0x68
 8005c94:	e7e9      	b.n	8005c6a <_fwalk_reent+0x12>
	...

08005c98 <_localeconv_r>:
 8005c98:	4800      	ldr	r0, [pc, #0]	; (8005c9c <_localeconv_r+0x4>)
 8005c9a:	4770      	bx	lr
 8005c9c:	20001164 	.word	0x20001164

08005ca0 <__retarget_lock_init_recursive>:
 8005ca0:	4770      	bx	lr

08005ca2 <__retarget_lock_acquire_recursive>:
 8005ca2:	4770      	bx	lr

08005ca4 <__retarget_lock_release_recursive>:
 8005ca4:	4770      	bx	lr
	...

08005ca8 <malloc>:
 8005ca8:	4b02      	ldr	r3, [pc, #8]	; (8005cb4 <malloc+0xc>)
 8005caa:	4601      	mov	r1, r0
 8005cac:	6818      	ldr	r0, [r3, #0]
 8005cae:	f000 bbef 	b.w	8006490 <_malloc_r>
 8005cb2:	bf00      	nop
 8005cb4:	20001010 	.word	0x20001010

08005cb8 <memcpy>:
 8005cb8:	440a      	add	r2, r1
 8005cba:	4291      	cmp	r1, r2
 8005cbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cc0:	d100      	bne.n	8005cc4 <memcpy+0xc>
 8005cc2:	4770      	bx	lr
 8005cc4:	b510      	push	{r4, lr}
 8005cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cce:	4291      	cmp	r1, r2
 8005cd0:	d1f9      	bne.n	8005cc6 <memcpy+0xe>
 8005cd2:	bd10      	pop	{r4, pc}

08005cd4 <_Balloc>:
 8005cd4:	b570      	push	{r4, r5, r6, lr}
 8005cd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005cd8:	4604      	mov	r4, r0
 8005cda:	460d      	mov	r5, r1
 8005cdc:	b976      	cbnz	r6, 8005cfc <_Balloc+0x28>
 8005cde:	2010      	movs	r0, #16
 8005ce0:	f7ff ffe2 	bl	8005ca8 <malloc>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	6260      	str	r0, [r4, #36]	; 0x24
 8005ce8:	b920      	cbnz	r0, 8005cf4 <_Balloc+0x20>
 8005cea:	4b18      	ldr	r3, [pc, #96]	; (8005d4c <_Balloc+0x78>)
 8005cec:	4818      	ldr	r0, [pc, #96]	; (8005d50 <_Balloc+0x7c>)
 8005cee:	2166      	movs	r1, #102	; 0x66
 8005cf0:	f001 f804 	bl	8006cfc <__assert_func>
 8005cf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cf8:	6006      	str	r6, [r0, #0]
 8005cfa:	60c6      	str	r6, [r0, #12]
 8005cfc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005cfe:	68f3      	ldr	r3, [r6, #12]
 8005d00:	b183      	cbz	r3, 8005d24 <_Balloc+0x50>
 8005d02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d0a:	b9b8      	cbnz	r0, 8005d3c <_Balloc+0x68>
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	fa01 f605 	lsl.w	r6, r1, r5
 8005d12:	1d72      	adds	r2, r6, #5
 8005d14:	0092      	lsls	r2, r2, #2
 8005d16:	4620      	mov	r0, r4
 8005d18:	f000 fb5a 	bl	80063d0 <_calloc_r>
 8005d1c:	b160      	cbz	r0, 8005d38 <_Balloc+0x64>
 8005d1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d22:	e00e      	b.n	8005d42 <_Balloc+0x6e>
 8005d24:	2221      	movs	r2, #33	; 0x21
 8005d26:	2104      	movs	r1, #4
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f000 fb51 	bl	80063d0 <_calloc_r>
 8005d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d30:	60f0      	str	r0, [r6, #12]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e4      	bne.n	8005d02 <_Balloc+0x2e>
 8005d38:	2000      	movs	r0, #0
 8005d3a:	bd70      	pop	{r4, r5, r6, pc}
 8005d3c:	6802      	ldr	r2, [r0, #0]
 8005d3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d42:	2300      	movs	r3, #0
 8005d44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d48:	e7f7      	b.n	8005d3a <_Balloc+0x66>
 8005d4a:	bf00      	nop
 8005d4c:	08007299 	.word	0x08007299
 8005d50:	08007380 	.word	0x08007380

08005d54 <_Bfree>:
 8005d54:	b570      	push	{r4, r5, r6, lr}
 8005d56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d58:	4605      	mov	r5, r0
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	b976      	cbnz	r6, 8005d7c <_Bfree+0x28>
 8005d5e:	2010      	movs	r0, #16
 8005d60:	f7ff ffa2 	bl	8005ca8 <malloc>
 8005d64:	4602      	mov	r2, r0
 8005d66:	6268      	str	r0, [r5, #36]	; 0x24
 8005d68:	b920      	cbnz	r0, 8005d74 <_Bfree+0x20>
 8005d6a:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <_Bfree+0x3c>)
 8005d6c:	4809      	ldr	r0, [pc, #36]	; (8005d94 <_Bfree+0x40>)
 8005d6e:	218a      	movs	r1, #138	; 0x8a
 8005d70:	f000 ffc4 	bl	8006cfc <__assert_func>
 8005d74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d78:	6006      	str	r6, [r0, #0]
 8005d7a:	60c6      	str	r6, [r0, #12]
 8005d7c:	b13c      	cbz	r4, 8005d8e <_Bfree+0x3a>
 8005d7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d80:	6862      	ldr	r2, [r4, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d88:	6021      	str	r1, [r4, #0]
 8005d8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d8e:	bd70      	pop	{r4, r5, r6, pc}
 8005d90:	08007299 	.word	0x08007299
 8005d94:	08007380 	.word	0x08007380

08005d98 <__multadd>:
 8005d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9c:	690e      	ldr	r6, [r1, #16]
 8005d9e:	4607      	mov	r7, r0
 8005da0:	4698      	mov	r8, r3
 8005da2:	460c      	mov	r4, r1
 8005da4:	f101 0014 	add.w	r0, r1, #20
 8005da8:	2300      	movs	r3, #0
 8005daa:	6805      	ldr	r5, [r0, #0]
 8005dac:	b2a9      	uxth	r1, r5
 8005dae:	fb02 8101 	mla	r1, r2, r1, r8
 8005db2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005db6:	0c2d      	lsrs	r5, r5, #16
 8005db8:	fb02 c505 	mla	r5, r2, r5, ip
 8005dbc:	b289      	uxth	r1, r1
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005dc4:	429e      	cmp	r6, r3
 8005dc6:	f840 1b04 	str.w	r1, [r0], #4
 8005dca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005dce:	dcec      	bgt.n	8005daa <__multadd+0x12>
 8005dd0:	f1b8 0f00 	cmp.w	r8, #0
 8005dd4:	d022      	beq.n	8005e1c <__multadd+0x84>
 8005dd6:	68a3      	ldr	r3, [r4, #8]
 8005dd8:	42b3      	cmp	r3, r6
 8005dda:	dc19      	bgt.n	8005e10 <__multadd+0x78>
 8005ddc:	6861      	ldr	r1, [r4, #4]
 8005dde:	4638      	mov	r0, r7
 8005de0:	3101      	adds	r1, #1
 8005de2:	f7ff ff77 	bl	8005cd4 <_Balloc>
 8005de6:	4605      	mov	r5, r0
 8005de8:	b928      	cbnz	r0, 8005df6 <__multadd+0x5e>
 8005dea:	4602      	mov	r2, r0
 8005dec:	4b0d      	ldr	r3, [pc, #52]	; (8005e24 <__multadd+0x8c>)
 8005dee:	480e      	ldr	r0, [pc, #56]	; (8005e28 <__multadd+0x90>)
 8005df0:	21b5      	movs	r1, #181	; 0xb5
 8005df2:	f000 ff83 	bl	8006cfc <__assert_func>
 8005df6:	6922      	ldr	r2, [r4, #16]
 8005df8:	3202      	adds	r2, #2
 8005dfa:	f104 010c 	add.w	r1, r4, #12
 8005dfe:	0092      	lsls	r2, r2, #2
 8005e00:	300c      	adds	r0, #12
 8005e02:	f7ff ff59 	bl	8005cb8 <memcpy>
 8005e06:	4621      	mov	r1, r4
 8005e08:	4638      	mov	r0, r7
 8005e0a:	f7ff ffa3 	bl	8005d54 <_Bfree>
 8005e0e:	462c      	mov	r4, r5
 8005e10:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005e14:	3601      	adds	r6, #1
 8005e16:	f8c3 8014 	str.w	r8, [r3, #20]
 8005e1a:	6126      	str	r6, [r4, #16]
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e22:	bf00      	nop
 8005e24:	0800730f 	.word	0x0800730f
 8005e28:	08007380 	.word	0x08007380

08005e2c <__hi0bits>:
 8005e2c:	0c03      	lsrs	r3, r0, #16
 8005e2e:	041b      	lsls	r3, r3, #16
 8005e30:	b9d3      	cbnz	r3, 8005e68 <__hi0bits+0x3c>
 8005e32:	0400      	lsls	r0, r0, #16
 8005e34:	2310      	movs	r3, #16
 8005e36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005e3a:	bf04      	itt	eq
 8005e3c:	0200      	lsleq	r0, r0, #8
 8005e3e:	3308      	addeq	r3, #8
 8005e40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005e44:	bf04      	itt	eq
 8005e46:	0100      	lsleq	r0, r0, #4
 8005e48:	3304      	addeq	r3, #4
 8005e4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005e4e:	bf04      	itt	eq
 8005e50:	0080      	lsleq	r0, r0, #2
 8005e52:	3302      	addeq	r3, #2
 8005e54:	2800      	cmp	r0, #0
 8005e56:	db05      	blt.n	8005e64 <__hi0bits+0x38>
 8005e58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005e5c:	f103 0301 	add.w	r3, r3, #1
 8005e60:	bf08      	it	eq
 8005e62:	2320      	moveq	r3, #32
 8005e64:	4618      	mov	r0, r3
 8005e66:	4770      	bx	lr
 8005e68:	2300      	movs	r3, #0
 8005e6a:	e7e4      	b.n	8005e36 <__hi0bits+0xa>

08005e6c <__lo0bits>:
 8005e6c:	6803      	ldr	r3, [r0, #0]
 8005e6e:	f013 0207 	ands.w	r2, r3, #7
 8005e72:	4601      	mov	r1, r0
 8005e74:	d00b      	beq.n	8005e8e <__lo0bits+0x22>
 8005e76:	07da      	lsls	r2, r3, #31
 8005e78:	d424      	bmi.n	8005ec4 <__lo0bits+0x58>
 8005e7a:	0798      	lsls	r0, r3, #30
 8005e7c:	bf49      	itett	mi
 8005e7e:	085b      	lsrmi	r3, r3, #1
 8005e80:	089b      	lsrpl	r3, r3, #2
 8005e82:	2001      	movmi	r0, #1
 8005e84:	600b      	strmi	r3, [r1, #0]
 8005e86:	bf5c      	itt	pl
 8005e88:	600b      	strpl	r3, [r1, #0]
 8005e8a:	2002      	movpl	r0, #2
 8005e8c:	4770      	bx	lr
 8005e8e:	b298      	uxth	r0, r3
 8005e90:	b9b0      	cbnz	r0, 8005ec0 <__lo0bits+0x54>
 8005e92:	0c1b      	lsrs	r3, r3, #16
 8005e94:	2010      	movs	r0, #16
 8005e96:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005e9a:	bf04      	itt	eq
 8005e9c:	0a1b      	lsreq	r3, r3, #8
 8005e9e:	3008      	addeq	r0, #8
 8005ea0:	071a      	lsls	r2, r3, #28
 8005ea2:	bf04      	itt	eq
 8005ea4:	091b      	lsreq	r3, r3, #4
 8005ea6:	3004      	addeq	r0, #4
 8005ea8:	079a      	lsls	r2, r3, #30
 8005eaa:	bf04      	itt	eq
 8005eac:	089b      	lsreq	r3, r3, #2
 8005eae:	3002      	addeq	r0, #2
 8005eb0:	07da      	lsls	r2, r3, #31
 8005eb2:	d403      	bmi.n	8005ebc <__lo0bits+0x50>
 8005eb4:	085b      	lsrs	r3, r3, #1
 8005eb6:	f100 0001 	add.w	r0, r0, #1
 8005eba:	d005      	beq.n	8005ec8 <__lo0bits+0x5c>
 8005ebc:	600b      	str	r3, [r1, #0]
 8005ebe:	4770      	bx	lr
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	e7e8      	b.n	8005e96 <__lo0bits+0x2a>
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	4770      	bx	lr
 8005ec8:	2020      	movs	r0, #32
 8005eca:	4770      	bx	lr

08005ecc <__i2b>:
 8005ecc:	b510      	push	{r4, lr}
 8005ece:	460c      	mov	r4, r1
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	f7ff feff 	bl	8005cd4 <_Balloc>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	b928      	cbnz	r0, 8005ee6 <__i2b+0x1a>
 8005eda:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <__i2b+0x24>)
 8005edc:	4805      	ldr	r0, [pc, #20]	; (8005ef4 <__i2b+0x28>)
 8005ede:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005ee2:	f000 ff0b 	bl	8006cfc <__assert_func>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	6144      	str	r4, [r0, #20]
 8005eea:	6103      	str	r3, [r0, #16]
 8005eec:	bd10      	pop	{r4, pc}
 8005eee:	bf00      	nop
 8005ef0:	0800730f 	.word	0x0800730f
 8005ef4:	08007380 	.word	0x08007380

08005ef8 <__multiply>:
 8005ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efc:	4614      	mov	r4, r2
 8005efe:	690a      	ldr	r2, [r1, #16]
 8005f00:	6923      	ldr	r3, [r4, #16]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	bfb8      	it	lt
 8005f06:	460b      	movlt	r3, r1
 8005f08:	460d      	mov	r5, r1
 8005f0a:	bfbc      	itt	lt
 8005f0c:	4625      	movlt	r5, r4
 8005f0e:	461c      	movlt	r4, r3
 8005f10:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005f14:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005f18:	68ab      	ldr	r3, [r5, #8]
 8005f1a:	6869      	ldr	r1, [r5, #4]
 8005f1c:	eb0a 0709 	add.w	r7, sl, r9
 8005f20:	42bb      	cmp	r3, r7
 8005f22:	b085      	sub	sp, #20
 8005f24:	bfb8      	it	lt
 8005f26:	3101      	addlt	r1, #1
 8005f28:	f7ff fed4 	bl	8005cd4 <_Balloc>
 8005f2c:	b930      	cbnz	r0, 8005f3c <__multiply+0x44>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	4b42      	ldr	r3, [pc, #264]	; (800603c <__multiply+0x144>)
 8005f32:	4843      	ldr	r0, [pc, #268]	; (8006040 <__multiply+0x148>)
 8005f34:	f240 115d 	movw	r1, #349	; 0x15d
 8005f38:	f000 fee0 	bl	8006cfc <__assert_func>
 8005f3c:	f100 0614 	add.w	r6, r0, #20
 8005f40:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005f44:	4633      	mov	r3, r6
 8005f46:	2200      	movs	r2, #0
 8005f48:	4543      	cmp	r3, r8
 8005f4a:	d31e      	bcc.n	8005f8a <__multiply+0x92>
 8005f4c:	f105 0c14 	add.w	ip, r5, #20
 8005f50:	f104 0314 	add.w	r3, r4, #20
 8005f54:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005f58:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005f5c:	9202      	str	r2, [sp, #8]
 8005f5e:	ebac 0205 	sub.w	r2, ip, r5
 8005f62:	3a15      	subs	r2, #21
 8005f64:	f022 0203 	bic.w	r2, r2, #3
 8005f68:	3204      	adds	r2, #4
 8005f6a:	f105 0115 	add.w	r1, r5, #21
 8005f6e:	458c      	cmp	ip, r1
 8005f70:	bf38      	it	cc
 8005f72:	2204      	movcc	r2, #4
 8005f74:	9201      	str	r2, [sp, #4]
 8005f76:	9a02      	ldr	r2, [sp, #8]
 8005f78:	9303      	str	r3, [sp, #12]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d808      	bhi.n	8005f90 <__multiply+0x98>
 8005f7e:	2f00      	cmp	r7, #0
 8005f80:	dc55      	bgt.n	800602e <__multiply+0x136>
 8005f82:	6107      	str	r7, [r0, #16]
 8005f84:	b005      	add	sp, #20
 8005f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8a:	f843 2b04 	str.w	r2, [r3], #4
 8005f8e:	e7db      	b.n	8005f48 <__multiply+0x50>
 8005f90:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f94:	f1ba 0f00 	cmp.w	sl, #0
 8005f98:	d020      	beq.n	8005fdc <__multiply+0xe4>
 8005f9a:	f105 0e14 	add.w	lr, r5, #20
 8005f9e:	46b1      	mov	r9, r6
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005fa6:	f8d9 b000 	ldr.w	fp, [r9]
 8005faa:	b2a1      	uxth	r1, r4
 8005fac:	fa1f fb8b 	uxth.w	fp, fp
 8005fb0:	fb0a b101 	mla	r1, sl, r1, fp
 8005fb4:	4411      	add	r1, r2
 8005fb6:	f8d9 2000 	ldr.w	r2, [r9]
 8005fba:	0c24      	lsrs	r4, r4, #16
 8005fbc:	0c12      	lsrs	r2, r2, #16
 8005fbe:	fb0a 2404 	mla	r4, sl, r4, r2
 8005fc2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005fc6:	b289      	uxth	r1, r1
 8005fc8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005fcc:	45f4      	cmp	ip, lr
 8005fce:	f849 1b04 	str.w	r1, [r9], #4
 8005fd2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005fd6:	d8e4      	bhi.n	8005fa2 <__multiply+0xaa>
 8005fd8:	9901      	ldr	r1, [sp, #4]
 8005fda:	5072      	str	r2, [r6, r1]
 8005fdc:	9a03      	ldr	r2, [sp, #12]
 8005fde:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	f1b9 0f00 	cmp.w	r9, #0
 8005fe8:	d01f      	beq.n	800602a <__multiply+0x132>
 8005fea:	6834      	ldr	r4, [r6, #0]
 8005fec:	f105 0114 	add.w	r1, r5, #20
 8005ff0:	46b6      	mov	lr, r6
 8005ff2:	f04f 0a00 	mov.w	sl, #0
 8005ff6:	880a      	ldrh	r2, [r1, #0]
 8005ff8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005ffc:	fb09 b202 	mla	r2, r9, r2, fp
 8006000:	4492      	add	sl, r2
 8006002:	b2a4      	uxth	r4, r4
 8006004:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006008:	f84e 4b04 	str.w	r4, [lr], #4
 800600c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006010:	f8be 2000 	ldrh.w	r2, [lr]
 8006014:	0c24      	lsrs	r4, r4, #16
 8006016:	fb09 2404 	mla	r4, r9, r4, r2
 800601a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800601e:	458c      	cmp	ip, r1
 8006020:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006024:	d8e7      	bhi.n	8005ff6 <__multiply+0xfe>
 8006026:	9a01      	ldr	r2, [sp, #4]
 8006028:	50b4      	str	r4, [r6, r2]
 800602a:	3604      	adds	r6, #4
 800602c:	e7a3      	b.n	8005f76 <__multiply+0x7e>
 800602e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1a5      	bne.n	8005f82 <__multiply+0x8a>
 8006036:	3f01      	subs	r7, #1
 8006038:	e7a1      	b.n	8005f7e <__multiply+0x86>
 800603a:	bf00      	nop
 800603c:	0800730f 	.word	0x0800730f
 8006040:	08007380 	.word	0x08007380

08006044 <__pow5mult>:
 8006044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006048:	4615      	mov	r5, r2
 800604a:	f012 0203 	ands.w	r2, r2, #3
 800604e:	4606      	mov	r6, r0
 8006050:	460f      	mov	r7, r1
 8006052:	d007      	beq.n	8006064 <__pow5mult+0x20>
 8006054:	4c25      	ldr	r4, [pc, #148]	; (80060ec <__pow5mult+0xa8>)
 8006056:	3a01      	subs	r2, #1
 8006058:	2300      	movs	r3, #0
 800605a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800605e:	f7ff fe9b 	bl	8005d98 <__multadd>
 8006062:	4607      	mov	r7, r0
 8006064:	10ad      	asrs	r5, r5, #2
 8006066:	d03d      	beq.n	80060e4 <__pow5mult+0xa0>
 8006068:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800606a:	b97c      	cbnz	r4, 800608c <__pow5mult+0x48>
 800606c:	2010      	movs	r0, #16
 800606e:	f7ff fe1b 	bl	8005ca8 <malloc>
 8006072:	4602      	mov	r2, r0
 8006074:	6270      	str	r0, [r6, #36]	; 0x24
 8006076:	b928      	cbnz	r0, 8006084 <__pow5mult+0x40>
 8006078:	4b1d      	ldr	r3, [pc, #116]	; (80060f0 <__pow5mult+0xac>)
 800607a:	481e      	ldr	r0, [pc, #120]	; (80060f4 <__pow5mult+0xb0>)
 800607c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006080:	f000 fe3c 	bl	8006cfc <__assert_func>
 8006084:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006088:	6004      	str	r4, [r0, #0]
 800608a:	60c4      	str	r4, [r0, #12]
 800608c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006090:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006094:	b94c      	cbnz	r4, 80060aa <__pow5mult+0x66>
 8006096:	f240 2171 	movw	r1, #625	; 0x271
 800609a:	4630      	mov	r0, r6
 800609c:	f7ff ff16 	bl	8005ecc <__i2b>
 80060a0:	2300      	movs	r3, #0
 80060a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80060a6:	4604      	mov	r4, r0
 80060a8:	6003      	str	r3, [r0, #0]
 80060aa:	f04f 0900 	mov.w	r9, #0
 80060ae:	07eb      	lsls	r3, r5, #31
 80060b0:	d50a      	bpl.n	80060c8 <__pow5mult+0x84>
 80060b2:	4639      	mov	r1, r7
 80060b4:	4622      	mov	r2, r4
 80060b6:	4630      	mov	r0, r6
 80060b8:	f7ff ff1e 	bl	8005ef8 <__multiply>
 80060bc:	4639      	mov	r1, r7
 80060be:	4680      	mov	r8, r0
 80060c0:	4630      	mov	r0, r6
 80060c2:	f7ff fe47 	bl	8005d54 <_Bfree>
 80060c6:	4647      	mov	r7, r8
 80060c8:	106d      	asrs	r5, r5, #1
 80060ca:	d00b      	beq.n	80060e4 <__pow5mult+0xa0>
 80060cc:	6820      	ldr	r0, [r4, #0]
 80060ce:	b938      	cbnz	r0, 80060e0 <__pow5mult+0x9c>
 80060d0:	4622      	mov	r2, r4
 80060d2:	4621      	mov	r1, r4
 80060d4:	4630      	mov	r0, r6
 80060d6:	f7ff ff0f 	bl	8005ef8 <__multiply>
 80060da:	6020      	str	r0, [r4, #0]
 80060dc:	f8c0 9000 	str.w	r9, [r0]
 80060e0:	4604      	mov	r4, r0
 80060e2:	e7e4      	b.n	80060ae <__pow5mult+0x6a>
 80060e4:	4638      	mov	r0, r7
 80060e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ea:	bf00      	nop
 80060ec:	080074d0 	.word	0x080074d0
 80060f0:	08007299 	.word	0x08007299
 80060f4:	08007380 	.word	0x08007380

080060f8 <__lshift>:
 80060f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060fc:	460c      	mov	r4, r1
 80060fe:	6849      	ldr	r1, [r1, #4]
 8006100:	6923      	ldr	r3, [r4, #16]
 8006102:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006106:	68a3      	ldr	r3, [r4, #8]
 8006108:	4607      	mov	r7, r0
 800610a:	4691      	mov	r9, r2
 800610c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006110:	f108 0601 	add.w	r6, r8, #1
 8006114:	42b3      	cmp	r3, r6
 8006116:	db0b      	blt.n	8006130 <__lshift+0x38>
 8006118:	4638      	mov	r0, r7
 800611a:	f7ff fddb 	bl	8005cd4 <_Balloc>
 800611e:	4605      	mov	r5, r0
 8006120:	b948      	cbnz	r0, 8006136 <__lshift+0x3e>
 8006122:	4602      	mov	r2, r0
 8006124:	4b28      	ldr	r3, [pc, #160]	; (80061c8 <__lshift+0xd0>)
 8006126:	4829      	ldr	r0, [pc, #164]	; (80061cc <__lshift+0xd4>)
 8006128:	f240 11d9 	movw	r1, #473	; 0x1d9
 800612c:	f000 fde6 	bl	8006cfc <__assert_func>
 8006130:	3101      	adds	r1, #1
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	e7ee      	b.n	8006114 <__lshift+0x1c>
 8006136:	2300      	movs	r3, #0
 8006138:	f100 0114 	add.w	r1, r0, #20
 800613c:	f100 0210 	add.w	r2, r0, #16
 8006140:	4618      	mov	r0, r3
 8006142:	4553      	cmp	r3, sl
 8006144:	db33      	blt.n	80061ae <__lshift+0xb6>
 8006146:	6920      	ldr	r0, [r4, #16]
 8006148:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800614c:	f104 0314 	add.w	r3, r4, #20
 8006150:	f019 091f 	ands.w	r9, r9, #31
 8006154:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006158:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800615c:	d02b      	beq.n	80061b6 <__lshift+0xbe>
 800615e:	f1c9 0e20 	rsb	lr, r9, #32
 8006162:	468a      	mov	sl, r1
 8006164:	2200      	movs	r2, #0
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	fa00 f009 	lsl.w	r0, r0, r9
 800616c:	4302      	orrs	r2, r0
 800616e:	f84a 2b04 	str.w	r2, [sl], #4
 8006172:	f853 2b04 	ldr.w	r2, [r3], #4
 8006176:	459c      	cmp	ip, r3
 8006178:	fa22 f20e 	lsr.w	r2, r2, lr
 800617c:	d8f3      	bhi.n	8006166 <__lshift+0x6e>
 800617e:	ebac 0304 	sub.w	r3, ip, r4
 8006182:	3b15      	subs	r3, #21
 8006184:	f023 0303 	bic.w	r3, r3, #3
 8006188:	3304      	adds	r3, #4
 800618a:	f104 0015 	add.w	r0, r4, #21
 800618e:	4584      	cmp	ip, r0
 8006190:	bf38      	it	cc
 8006192:	2304      	movcc	r3, #4
 8006194:	50ca      	str	r2, [r1, r3]
 8006196:	b10a      	cbz	r2, 800619c <__lshift+0xa4>
 8006198:	f108 0602 	add.w	r6, r8, #2
 800619c:	3e01      	subs	r6, #1
 800619e:	4638      	mov	r0, r7
 80061a0:	612e      	str	r6, [r5, #16]
 80061a2:	4621      	mov	r1, r4
 80061a4:	f7ff fdd6 	bl	8005d54 <_Bfree>
 80061a8:	4628      	mov	r0, r5
 80061aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80061b2:	3301      	adds	r3, #1
 80061b4:	e7c5      	b.n	8006142 <__lshift+0x4a>
 80061b6:	3904      	subs	r1, #4
 80061b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80061bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80061c0:	459c      	cmp	ip, r3
 80061c2:	d8f9      	bhi.n	80061b8 <__lshift+0xc0>
 80061c4:	e7ea      	b.n	800619c <__lshift+0xa4>
 80061c6:	bf00      	nop
 80061c8:	0800730f 	.word	0x0800730f
 80061cc:	08007380 	.word	0x08007380

080061d0 <__mcmp>:
 80061d0:	b530      	push	{r4, r5, lr}
 80061d2:	6902      	ldr	r2, [r0, #16]
 80061d4:	690c      	ldr	r4, [r1, #16]
 80061d6:	1b12      	subs	r2, r2, r4
 80061d8:	d10e      	bne.n	80061f8 <__mcmp+0x28>
 80061da:	f100 0314 	add.w	r3, r0, #20
 80061de:	3114      	adds	r1, #20
 80061e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80061e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80061e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80061ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80061f0:	42a5      	cmp	r5, r4
 80061f2:	d003      	beq.n	80061fc <__mcmp+0x2c>
 80061f4:	d305      	bcc.n	8006202 <__mcmp+0x32>
 80061f6:	2201      	movs	r2, #1
 80061f8:	4610      	mov	r0, r2
 80061fa:	bd30      	pop	{r4, r5, pc}
 80061fc:	4283      	cmp	r3, r0
 80061fe:	d3f3      	bcc.n	80061e8 <__mcmp+0x18>
 8006200:	e7fa      	b.n	80061f8 <__mcmp+0x28>
 8006202:	f04f 32ff 	mov.w	r2, #4294967295
 8006206:	e7f7      	b.n	80061f8 <__mcmp+0x28>

08006208 <__mdiff>:
 8006208:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620c:	460c      	mov	r4, r1
 800620e:	4606      	mov	r6, r0
 8006210:	4611      	mov	r1, r2
 8006212:	4620      	mov	r0, r4
 8006214:	4617      	mov	r7, r2
 8006216:	f7ff ffdb 	bl	80061d0 <__mcmp>
 800621a:	1e05      	subs	r5, r0, #0
 800621c:	d110      	bne.n	8006240 <__mdiff+0x38>
 800621e:	4629      	mov	r1, r5
 8006220:	4630      	mov	r0, r6
 8006222:	f7ff fd57 	bl	8005cd4 <_Balloc>
 8006226:	b930      	cbnz	r0, 8006236 <__mdiff+0x2e>
 8006228:	4b39      	ldr	r3, [pc, #228]	; (8006310 <__mdiff+0x108>)
 800622a:	4602      	mov	r2, r0
 800622c:	f240 2132 	movw	r1, #562	; 0x232
 8006230:	4838      	ldr	r0, [pc, #224]	; (8006314 <__mdiff+0x10c>)
 8006232:	f000 fd63 	bl	8006cfc <__assert_func>
 8006236:	2301      	movs	r3, #1
 8006238:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800623c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006240:	bfa4      	itt	ge
 8006242:	463b      	movge	r3, r7
 8006244:	4627      	movge	r7, r4
 8006246:	4630      	mov	r0, r6
 8006248:	6879      	ldr	r1, [r7, #4]
 800624a:	bfa6      	itte	ge
 800624c:	461c      	movge	r4, r3
 800624e:	2500      	movge	r5, #0
 8006250:	2501      	movlt	r5, #1
 8006252:	f7ff fd3f 	bl	8005cd4 <_Balloc>
 8006256:	b920      	cbnz	r0, 8006262 <__mdiff+0x5a>
 8006258:	4b2d      	ldr	r3, [pc, #180]	; (8006310 <__mdiff+0x108>)
 800625a:	4602      	mov	r2, r0
 800625c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006260:	e7e6      	b.n	8006230 <__mdiff+0x28>
 8006262:	693e      	ldr	r6, [r7, #16]
 8006264:	60c5      	str	r5, [r0, #12]
 8006266:	6925      	ldr	r5, [r4, #16]
 8006268:	f107 0114 	add.w	r1, r7, #20
 800626c:	f104 0914 	add.w	r9, r4, #20
 8006270:	f100 0e14 	add.w	lr, r0, #20
 8006274:	f107 0210 	add.w	r2, r7, #16
 8006278:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800627c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006280:	46f2      	mov	sl, lr
 8006282:	2700      	movs	r7, #0
 8006284:	f859 3b04 	ldr.w	r3, [r9], #4
 8006288:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800628c:	fa1f f883 	uxth.w	r8, r3
 8006290:	fa17 f78b 	uxtah	r7, r7, fp
 8006294:	0c1b      	lsrs	r3, r3, #16
 8006296:	eba7 0808 	sub.w	r8, r7, r8
 800629a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800629e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80062a2:	fa1f f888 	uxth.w	r8, r8
 80062a6:	141f      	asrs	r7, r3, #16
 80062a8:	454d      	cmp	r5, r9
 80062aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80062ae:	f84a 3b04 	str.w	r3, [sl], #4
 80062b2:	d8e7      	bhi.n	8006284 <__mdiff+0x7c>
 80062b4:	1b2b      	subs	r3, r5, r4
 80062b6:	3b15      	subs	r3, #21
 80062b8:	f023 0303 	bic.w	r3, r3, #3
 80062bc:	3304      	adds	r3, #4
 80062be:	3415      	adds	r4, #21
 80062c0:	42a5      	cmp	r5, r4
 80062c2:	bf38      	it	cc
 80062c4:	2304      	movcc	r3, #4
 80062c6:	4419      	add	r1, r3
 80062c8:	4473      	add	r3, lr
 80062ca:	469e      	mov	lr, r3
 80062cc:	460d      	mov	r5, r1
 80062ce:	4565      	cmp	r5, ip
 80062d0:	d30e      	bcc.n	80062f0 <__mdiff+0xe8>
 80062d2:	f10c 0203 	add.w	r2, ip, #3
 80062d6:	1a52      	subs	r2, r2, r1
 80062d8:	f022 0203 	bic.w	r2, r2, #3
 80062dc:	3903      	subs	r1, #3
 80062de:	458c      	cmp	ip, r1
 80062e0:	bf38      	it	cc
 80062e2:	2200      	movcc	r2, #0
 80062e4:	441a      	add	r2, r3
 80062e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80062ea:	b17b      	cbz	r3, 800630c <__mdiff+0x104>
 80062ec:	6106      	str	r6, [r0, #16]
 80062ee:	e7a5      	b.n	800623c <__mdiff+0x34>
 80062f0:	f855 8b04 	ldr.w	r8, [r5], #4
 80062f4:	fa17 f488 	uxtah	r4, r7, r8
 80062f8:	1422      	asrs	r2, r4, #16
 80062fa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80062fe:	b2a4      	uxth	r4, r4
 8006300:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006304:	f84e 4b04 	str.w	r4, [lr], #4
 8006308:	1417      	asrs	r7, r2, #16
 800630a:	e7e0      	b.n	80062ce <__mdiff+0xc6>
 800630c:	3e01      	subs	r6, #1
 800630e:	e7ea      	b.n	80062e6 <__mdiff+0xde>
 8006310:	0800730f 	.word	0x0800730f
 8006314:	08007380 	.word	0x08007380

08006318 <__d2b>:
 8006318:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800631c:	4689      	mov	r9, r1
 800631e:	2101      	movs	r1, #1
 8006320:	ec57 6b10 	vmov	r6, r7, d0
 8006324:	4690      	mov	r8, r2
 8006326:	f7ff fcd5 	bl	8005cd4 <_Balloc>
 800632a:	4604      	mov	r4, r0
 800632c:	b930      	cbnz	r0, 800633c <__d2b+0x24>
 800632e:	4602      	mov	r2, r0
 8006330:	4b25      	ldr	r3, [pc, #148]	; (80063c8 <__d2b+0xb0>)
 8006332:	4826      	ldr	r0, [pc, #152]	; (80063cc <__d2b+0xb4>)
 8006334:	f240 310a 	movw	r1, #778	; 0x30a
 8006338:	f000 fce0 	bl	8006cfc <__assert_func>
 800633c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006340:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006344:	bb35      	cbnz	r5, 8006394 <__d2b+0x7c>
 8006346:	2e00      	cmp	r6, #0
 8006348:	9301      	str	r3, [sp, #4]
 800634a:	d028      	beq.n	800639e <__d2b+0x86>
 800634c:	4668      	mov	r0, sp
 800634e:	9600      	str	r6, [sp, #0]
 8006350:	f7ff fd8c 	bl	8005e6c <__lo0bits>
 8006354:	9900      	ldr	r1, [sp, #0]
 8006356:	b300      	cbz	r0, 800639a <__d2b+0x82>
 8006358:	9a01      	ldr	r2, [sp, #4]
 800635a:	f1c0 0320 	rsb	r3, r0, #32
 800635e:	fa02 f303 	lsl.w	r3, r2, r3
 8006362:	430b      	orrs	r3, r1
 8006364:	40c2      	lsrs	r2, r0
 8006366:	6163      	str	r3, [r4, #20]
 8006368:	9201      	str	r2, [sp, #4]
 800636a:	9b01      	ldr	r3, [sp, #4]
 800636c:	61a3      	str	r3, [r4, #24]
 800636e:	2b00      	cmp	r3, #0
 8006370:	bf14      	ite	ne
 8006372:	2202      	movne	r2, #2
 8006374:	2201      	moveq	r2, #1
 8006376:	6122      	str	r2, [r4, #16]
 8006378:	b1d5      	cbz	r5, 80063b0 <__d2b+0x98>
 800637a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800637e:	4405      	add	r5, r0
 8006380:	f8c9 5000 	str.w	r5, [r9]
 8006384:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006388:	f8c8 0000 	str.w	r0, [r8]
 800638c:	4620      	mov	r0, r4
 800638e:	b003      	add	sp, #12
 8006390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006394:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006398:	e7d5      	b.n	8006346 <__d2b+0x2e>
 800639a:	6161      	str	r1, [r4, #20]
 800639c:	e7e5      	b.n	800636a <__d2b+0x52>
 800639e:	a801      	add	r0, sp, #4
 80063a0:	f7ff fd64 	bl	8005e6c <__lo0bits>
 80063a4:	9b01      	ldr	r3, [sp, #4]
 80063a6:	6163      	str	r3, [r4, #20]
 80063a8:	2201      	movs	r2, #1
 80063aa:	6122      	str	r2, [r4, #16]
 80063ac:	3020      	adds	r0, #32
 80063ae:	e7e3      	b.n	8006378 <__d2b+0x60>
 80063b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80063b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80063b8:	f8c9 0000 	str.w	r0, [r9]
 80063bc:	6918      	ldr	r0, [r3, #16]
 80063be:	f7ff fd35 	bl	8005e2c <__hi0bits>
 80063c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80063c6:	e7df      	b.n	8006388 <__d2b+0x70>
 80063c8:	0800730f 	.word	0x0800730f
 80063cc:	08007380 	.word	0x08007380

080063d0 <_calloc_r>:
 80063d0:	b513      	push	{r0, r1, r4, lr}
 80063d2:	434a      	muls	r2, r1
 80063d4:	4611      	mov	r1, r2
 80063d6:	9201      	str	r2, [sp, #4]
 80063d8:	f000 f85a 	bl	8006490 <_malloc_r>
 80063dc:	4604      	mov	r4, r0
 80063de:	b118      	cbz	r0, 80063e8 <_calloc_r+0x18>
 80063e0:	9a01      	ldr	r2, [sp, #4]
 80063e2:	2100      	movs	r1, #0
 80063e4:	f7fe f8ce 	bl	8004584 <memset>
 80063e8:	4620      	mov	r0, r4
 80063ea:	b002      	add	sp, #8
 80063ec:	bd10      	pop	{r4, pc}
	...

080063f0 <_free_r>:
 80063f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063f2:	2900      	cmp	r1, #0
 80063f4:	d048      	beq.n	8006488 <_free_r+0x98>
 80063f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063fa:	9001      	str	r0, [sp, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006402:	bfb8      	it	lt
 8006404:	18e4      	addlt	r4, r4, r3
 8006406:	f000 fe1d 	bl	8007044 <__malloc_lock>
 800640a:	4a20      	ldr	r2, [pc, #128]	; (800648c <_free_r+0x9c>)
 800640c:	9801      	ldr	r0, [sp, #4]
 800640e:	6813      	ldr	r3, [r2, #0]
 8006410:	4615      	mov	r5, r2
 8006412:	b933      	cbnz	r3, 8006422 <_free_r+0x32>
 8006414:	6063      	str	r3, [r4, #4]
 8006416:	6014      	str	r4, [r2, #0]
 8006418:	b003      	add	sp, #12
 800641a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800641e:	f000 be17 	b.w	8007050 <__malloc_unlock>
 8006422:	42a3      	cmp	r3, r4
 8006424:	d90b      	bls.n	800643e <_free_r+0x4e>
 8006426:	6821      	ldr	r1, [r4, #0]
 8006428:	1862      	adds	r2, r4, r1
 800642a:	4293      	cmp	r3, r2
 800642c:	bf04      	itt	eq
 800642e:	681a      	ldreq	r2, [r3, #0]
 8006430:	685b      	ldreq	r3, [r3, #4]
 8006432:	6063      	str	r3, [r4, #4]
 8006434:	bf04      	itt	eq
 8006436:	1852      	addeq	r2, r2, r1
 8006438:	6022      	streq	r2, [r4, #0]
 800643a:	602c      	str	r4, [r5, #0]
 800643c:	e7ec      	b.n	8006418 <_free_r+0x28>
 800643e:	461a      	mov	r2, r3
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	b10b      	cbz	r3, 8006448 <_free_r+0x58>
 8006444:	42a3      	cmp	r3, r4
 8006446:	d9fa      	bls.n	800643e <_free_r+0x4e>
 8006448:	6811      	ldr	r1, [r2, #0]
 800644a:	1855      	adds	r5, r2, r1
 800644c:	42a5      	cmp	r5, r4
 800644e:	d10b      	bne.n	8006468 <_free_r+0x78>
 8006450:	6824      	ldr	r4, [r4, #0]
 8006452:	4421      	add	r1, r4
 8006454:	1854      	adds	r4, r2, r1
 8006456:	42a3      	cmp	r3, r4
 8006458:	6011      	str	r1, [r2, #0]
 800645a:	d1dd      	bne.n	8006418 <_free_r+0x28>
 800645c:	681c      	ldr	r4, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	6053      	str	r3, [r2, #4]
 8006462:	4421      	add	r1, r4
 8006464:	6011      	str	r1, [r2, #0]
 8006466:	e7d7      	b.n	8006418 <_free_r+0x28>
 8006468:	d902      	bls.n	8006470 <_free_r+0x80>
 800646a:	230c      	movs	r3, #12
 800646c:	6003      	str	r3, [r0, #0]
 800646e:	e7d3      	b.n	8006418 <_free_r+0x28>
 8006470:	6825      	ldr	r5, [r4, #0]
 8006472:	1961      	adds	r1, r4, r5
 8006474:	428b      	cmp	r3, r1
 8006476:	bf04      	itt	eq
 8006478:	6819      	ldreq	r1, [r3, #0]
 800647a:	685b      	ldreq	r3, [r3, #4]
 800647c:	6063      	str	r3, [r4, #4]
 800647e:	bf04      	itt	eq
 8006480:	1949      	addeq	r1, r1, r5
 8006482:	6021      	streq	r1, [r4, #0]
 8006484:	6054      	str	r4, [r2, #4]
 8006486:	e7c7      	b.n	8006418 <_free_r+0x28>
 8006488:	b003      	add	sp, #12
 800648a:	bd30      	pop	{r4, r5, pc}
 800648c:	20003454 	.word	0x20003454

08006490 <_malloc_r>:
 8006490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006492:	1ccd      	adds	r5, r1, #3
 8006494:	f025 0503 	bic.w	r5, r5, #3
 8006498:	3508      	adds	r5, #8
 800649a:	2d0c      	cmp	r5, #12
 800649c:	bf38      	it	cc
 800649e:	250c      	movcc	r5, #12
 80064a0:	2d00      	cmp	r5, #0
 80064a2:	4606      	mov	r6, r0
 80064a4:	db01      	blt.n	80064aa <_malloc_r+0x1a>
 80064a6:	42a9      	cmp	r1, r5
 80064a8:	d903      	bls.n	80064b2 <_malloc_r+0x22>
 80064aa:	230c      	movs	r3, #12
 80064ac:	6033      	str	r3, [r6, #0]
 80064ae:	2000      	movs	r0, #0
 80064b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064b2:	f000 fdc7 	bl	8007044 <__malloc_lock>
 80064b6:	4921      	ldr	r1, [pc, #132]	; (800653c <_malloc_r+0xac>)
 80064b8:	680a      	ldr	r2, [r1, #0]
 80064ba:	4614      	mov	r4, r2
 80064bc:	b99c      	cbnz	r4, 80064e6 <_malloc_r+0x56>
 80064be:	4f20      	ldr	r7, [pc, #128]	; (8006540 <_malloc_r+0xb0>)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	b923      	cbnz	r3, 80064ce <_malloc_r+0x3e>
 80064c4:	4621      	mov	r1, r4
 80064c6:	4630      	mov	r0, r6
 80064c8:	f000 faf2 	bl	8006ab0 <_sbrk_r>
 80064cc:	6038      	str	r0, [r7, #0]
 80064ce:	4629      	mov	r1, r5
 80064d0:	4630      	mov	r0, r6
 80064d2:	f000 faed 	bl	8006ab0 <_sbrk_r>
 80064d6:	1c43      	adds	r3, r0, #1
 80064d8:	d123      	bne.n	8006522 <_malloc_r+0x92>
 80064da:	230c      	movs	r3, #12
 80064dc:	6033      	str	r3, [r6, #0]
 80064de:	4630      	mov	r0, r6
 80064e0:	f000 fdb6 	bl	8007050 <__malloc_unlock>
 80064e4:	e7e3      	b.n	80064ae <_malloc_r+0x1e>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	1b5b      	subs	r3, r3, r5
 80064ea:	d417      	bmi.n	800651c <_malloc_r+0x8c>
 80064ec:	2b0b      	cmp	r3, #11
 80064ee:	d903      	bls.n	80064f8 <_malloc_r+0x68>
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	441c      	add	r4, r3
 80064f4:	6025      	str	r5, [r4, #0]
 80064f6:	e004      	b.n	8006502 <_malloc_r+0x72>
 80064f8:	6863      	ldr	r3, [r4, #4]
 80064fa:	42a2      	cmp	r2, r4
 80064fc:	bf0c      	ite	eq
 80064fe:	600b      	streq	r3, [r1, #0]
 8006500:	6053      	strne	r3, [r2, #4]
 8006502:	4630      	mov	r0, r6
 8006504:	f000 fda4 	bl	8007050 <__malloc_unlock>
 8006508:	f104 000b 	add.w	r0, r4, #11
 800650c:	1d23      	adds	r3, r4, #4
 800650e:	f020 0007 	bic.w	r0, r0, #7
 8006512:	1ac2      	subs	r2, r0, r3
 8006514:	d0cc      	beq.n	80064b0 <_malloc_r+0x20>
 8006516:	1a1b      	subs	r3, r3, r0
 8006518:	50a3      	str	r3, [r4, r2]
 800651a:	e7c9      	b.n	80064b0 <_malloc_r+0x20>
 800651c:	4622      	mov	r2, r4
 800651e:	6864      	ldr	r4, [r4, #4]
 8006520:	e7cc      	b.n	80064bc <_malloc_r+0x2c>
 8006522:	1cc4      	adds	r4, r0, #3
 8006524:	f024 0403 	bic.w	r4, r4, #3
 8006528:	42a0      	cmp	r0, r4
 800652a:	d0e3      	beq.n	80064f4 <_malloc_r+0x64>
 800652c:	1a21      	subs	r1, r4, r0
 800652e:	4630      	mov	r0, r6
 8006530:	f000 fabe 	bl	8006ab0 <_sbrk_r>
 8006534:	3001      	adds	r0, #1
 8006536:	d1dd      	bne.n	80064f4 <_malloc_r+0x64>
 8006538:	e7cf      	b.n	80064da <_malloc_r+0x4a>
 800653a:	bf00      	nop
 800653c:	20003454 	.word	0x20003454
 8006540:	20003458 	.word	0x20003458

08006544 <__ssputs_r>:
 8006544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006548:	688e      	ldr	r6, [r1, #8]
 800654a:	429e      	cmp	r6, r3
 800654c:	4682      	mov	sl, r0
 800654e:	460c      	mov	r4, r1
 8006550:	4690      	mov	r8, r2
 8006552:	461f      	mov	r7, r3
 8006554:	d838      	bhi.n	80065c8 <__ssputs_r+0x84>
 8006556:	898a      	ldrh	r2, [r1, #12]
 8006558:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800655c:	d032      	beq.n	80065c4 <__ssputs_r+0x80>
 800655e:	6825      	ldr	r5, [r4, #0]
 8006560:	6909      	ldr	r1, [r1, #16]
 8006562:	eba5 0901 	sub.w	r9, r5, r1
 8006566:	6965      	ldr	r5, [r4, #20]
 8006568:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800656c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006570:	3301      	adds	r3, #1
 8006572:	444b      	add	r3, r9
 8006574:	106d      	asrs	r5, r5, #1
 8006576:	429d      	cmp	r5, r3
 8006578:	bf38      	it	cc
 800657a:	461d      	movcc	r5, r3
 800657c:	0553      	lsls	r3, r2, #21
 800657e:	d531      	bpl.n	80065e4 <__ssputs_r+0xa0>
 8006580:	4629      	mov	r1, r5
 8006582:	f7ff ff85 	bl	8006490 <_malloc_r>
 8006586:	4606      	mov	r6, r0
 8006588:	b950      	cbnz	r0, 80065a0 <__ssputs_r+0x5c>
 800658a:	230c      	movs	r3, #12
 800658c:	f8ca 3000 	str.w	r3, [sl]
 8006590:	89a3      	ldrh	r3, [r4, #12]
 8006592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006596:	81a3      	strh	r3, [r4, #12]
 8006598:	f04f 30ff 	mov.w	r0, #4294967295
 800659c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a0:	6921      	ldr	r1, [r4, #16]
 80065a2:	464a      	mov	r2, r9
 80065a4:	f7ff fb88 	bl	8005cb8 <memcpy>
 80065a8:	89a3      	ldrh	r3, [r4, #12]
 80065aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b2:	81a3      	strh	r3, [r4, #12]
 80065b4:	6126      	str	r6, [r4, #16]
 80065b6:	6165      	str	r5, [r4, #20]
 80065b8:	444e      	add	r6, r9
 80065ba:	eba5 0509 	sub.w	r5, r5, r9
 80065be:	6026      	str	r6, [r4, #0]
 80065c0:	60a5      	str	r5, [r4, #8]
 80065c2:	463e      	mov	r6, r7
 80065c4:	42be      	cmp	r6, r7
 80065c6:	d900      	bls.n	80065ca <__ssputs_r+0x86>
 80065c8:	463e      	mov	r6, r7
 80065ca:	4632      	mov	r2, r6
 80065cc:	6820      	ldr	r0, [r4, #0]
 80065ce:	4641      	mov	r1, r8
 80065d0:	f000 fd1e 	bl	8007010 <memmove>
 80065d4:	68a3      	ldr	r3, [r4, #8]
 80065d6:	6822      	ldr	r2, [r4, #0]
 80065d8:	1b9b      	subs	r3, r3, r6
 80065da:	4432      	add	r2, r6
 80065dc:	60a3      	str	r3, [r4, #8]
 80065de:	6022      	str	r2, [r4, #0]
 80065e0:	2000      	movs	r0, #0
 80065e2:	e7db      	b.n	800659c <__ssputs_r+0x58>
 80065e4:	462a      	mov	r2, r5
 80065e6:	f000 fd39 	bl	800705c <_realloc_r>
 80065ea:	4606      	mov	r6, r0
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d1e1      	bne.n	80065b4 <__ssputs_r+0x70>
 80065f0:	6921      	ldr	r1, [r4, #16]
 80065f2:	4650      	mov	r0, sl
 80065f4:	f7ff fefc 	bl	80063f0 <_free_r>
 80065f8:	e7c7      	b.n	800658a <__ssputs_r+0x46>
	...

080065fc <_svfiprintf_r>:
 80065fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006600:	4698      	mov	r8, r3
 8006602:	898b      	ldrh	r3, [r1, #12]
 8006604:	061b      	lsls	r3, r3, #24
 8006606:	b09d      	sub	sp, #116	; 0x74
 8006608:	4607      	mov	r7, r0
 800660a:	460d      	mov	r5, r1
 800660c:	4614      	mov	r4, r2
 800660e:	d50e      	bpl.n	800662e <_svfiprintf_r+0x32>
 8006610:	690b      	ldr	r3, [r1, #16]
 8006612:	b963      	cbnz	r3, 800662e <_svfiprintf_r+0x32>
 8006614:	2140      	movs	r1, #64	; 0x40
 8006616:	f7ff ff3b 	bl	8006490 <_malloc_r>
 800661a:	6028      	str	r0, [r5, #0]
 800661c:	6128      	str	r0, [r5, #16]
 800661e:	b920      	cbnz	r0, 800662a <_svfiprintf_r+0x2e>
 8006620:	230c      	movs	r3, #12
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	f04f 30ff 	mov.w	r0, #4294967295
 8006628:	e0d1      	b.n	80067ce <_svfiprintf_r+0x1d2>
 800662a:	2340      	movs	r3, #64	; 0x40
 800662c:	616b      	str	r3, [r5, #20]
 800662e:	2300      	movs	r3, #0
 8006630:	9309      	str	r3, [sp, #36]	; 0x24
 8006632:	2320      	movs	r3, #32
 8006634:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006638:	f8cd 800c 	str.w	r8, [sp, #12]
 800663c:	2330      	movs	r3, #48	; 0x30
 800663e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80067e8 <_svfiprintf_r+0x1ec>
 8006642:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006646:	f04f 0901 	mov.w	r9, #1
 800664a:	4623      	mov	r3, r4
 800664c:	469a      	mov	sl, r3
 800664e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006652:	b10a      	cbz	r2, 8006658 <_svfiprintf_r+0x5c>
 8006654:	2a25      	cmp	r2, #37	; 0x25
 8006656:	d1f9      	bne.n	800664c <_svfiprintf_r+0x50>
 8006658:	ebba 0b04 	subs.w	fp, sl, r4
 800665c:	d00b      	beq.n	8006676 <_svfiprintf_r+0x7a>
 800665e:	465b      	mov	r3, fp
 8006660:	4622      	mov	r2, r4
 8006662:	4629      	mov	r1, r5
 8006664:	4638      	mov	r0, r7
 8006666:	f7ff ff6d 	bl	8006544 <__ssputs_r>
 800666a:	3001      	adds	r0, #1
 800666c:	f000 80aa 	beq.w	80067c4 <_svfiprintf_r+0x1c8>
 8006670:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006672:	445a      	add	r2, fp
 8006674:	9209      	str	r2, [sp, #36]	; 0x24
 8006676:	f89a 3000 	ldrb.w	r3, [sl]
 800667a:	2b00      	cmp	r3, #0
 800667c:	f000 80a2 	beq.w	80067c4 <_svfiprintf_r+0x1c8>
 8006680:	2300      	movs	r3, #0
 8006682:	f04f 32ff 	mov.w	r2, #4294967295
 8006686:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800668a:	f10a 0a01 	add.w	sl, sl, #1
 800668e:	9304      	str	r3, [sp, #16]
 8006690:	9307      	str	r3, [sp, #28]
 8006692:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006696:	931a      	str	r3, [sp, #104]	; 0x68
 8006698:	4654      	mov	r4, sl
 800669a:	2205      	movs	r2, #5
 800669c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a0:	4851      	ldr	r0, [pc, #324]	; (80067e8 <_svfiprintf_r+0x1ec>)
 80066a2:	f7f9 fdd5 	bl	8000250 <memchr>
 80066a6:	9a04      	ldr	r2, [sp, #16]
 80066a8:	b9d8      	cbnz	r0, 80066e2 <_svfiprintf_r+0xe6>
 80066aa:	06d0      	lsls	r0, r2, #27
 80066ac:	bf44      	itt	mi
 80066ae:	2320      	movmi	r3, #32
 80066b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066b4:	0711      	lsls	r1, r2, #28
 80066b6:	bf44      	itt	mi
 80066b8:	232b      	movmi	r3, #43	; 0x2b
 80066ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066be:	f89a 3000 	ldrb.w	r3, [sl]
 80066c2:	2b2a      	cmp	r3, #42	; 0x2a
 80066c4:	d015      	beq.n	80066f2 <_svfiprintf_r+0xf6>
 80066c6:	9a07      	ldr	r2, [sp, #28]
 80066c8:	4654      	mov	r4, sl
 80066ca:	2000      	movs	r0, #0
 80066cc:	f04f 0c0a 	mov.w	ip, #10
 80066d0:	4621      	mov	r1, r4
 80066d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066d6:	3b30      	subs	r3, #48	; 0x30
 80066d8:	2b09      	cmp	r3, #9
 80066da:	d94e      	bls.n	800677a <_svfiprintf_r+0x17e>
 80066dc:	b1b0      	cbz	r0, 800670c <_svfiprintf_r+0x110>
 80066de:	9207      	str	r2, [sp, #28]
 80066e0:	e014      	b.n	800670c <_svfiprintf_r+0x110>
 80066e2:	eba0 0308 	sub.w	r3, r0, r8
 80066e6:	fa09 f303 	lsl.w	r3, r9, r3
 80066ea:	4313      	orrs	r3, r2
 80066ec:	9304      	str	r3, [sp, #16]
 80066ee:	46a2      	mov	sl, r4
 80066f0:	e7d2      	b.n	8006698 <_svfiprintf_r+0x9c>
 80066f2:	9b03      	ldr	r3, [sp, #12]
 80066f4:	1d19      	adds	r1, r3, #4
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	9103      	str	r1, [sp, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	bfbb      	ittet	lt
 80066fe:	425b      	neglt	r3, r3
 8006700:	f042 0202 	orrlt.w	r2, r2, #2
 8006704:	9307      	strge	r3, [sp, #28]
 8006706:	9307      	strlt	r3, [sp, #28]
 8006708:	bfb8      	it	lt
 800670a:	9204      	strlt	r2, [sp, #16]
 800670c:	7823      	ldrb	r3, [r4, #0]
 800670e:	2b2e      	cmp	r3, #46	; 0x2e
 8006710:	d10c      	bne.n	800672c <_svfiprintf_r+0x130>
 8006712:	7863      	ldrb	r3, [r4, #1]
 8006714:	2b2a      	cmp	r3, #42	; 0x2a
 8006716:	d135      	bne.n	8006784 <_svfiprintf_r+0x188>
 8006718:	9b03      	ldr	r3, [sp, #12]
 800671a:	1d1a      	adds	r2, r3, #4
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	9203      	str	r2, [sp, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	bfb8      	it	lt
 8006724:	f04f 33ff 	movlt.w	r3, #4294967295
 8006728:	3402      	adds	r4, #2
 800672a:	9305      	str	r3, [sp, #20]
 800672c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80067f8 <_svfiprintf_r+0x1fc>
 8006730:	7821      	ldrb	r1, [r4, #0]
 8006732:	2203      	movs	r2, #3
 8006734:	4650      	mov	r0, sl
 8006736:	f7f9 fd8b 	bl	8000250 <memchr>
 800673a:	b140      	cbz	r0, 800674e <_svfiprintf_r+0x152>
 800673c:	2340      	movs	r3, #64	; 0x40
 800673e:	eba0 000a 	sub.w	r0, r0, sl
 8006742:	fa03 f000 	lsl.w	r0, r3, r0
 8006746:	9b04      	ldr	r3, [sp, #16]
 8006748:	4303      	orrs	r3, r0
 800674a:	3401      	adds	r4, #1
 800674c:	9304      	str	r3, [sp, #16]
 800674e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006752:	4826      	ldr	r0, [pc, #152]	; (80067ec <_svfiprintf_r+0x1f0>)
 8006754:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006758:	2206      	movs	r2, #6
 800675a:	f7f9 fd79 	bl	8000250 <memchr>
 800675e:	2800      	cmp	r0, #0
 8006760:	d038      	beq.n	80067d4 <_svfiprintf_r+0x1d8>
 8006762:	4b23      	ldr	r3, [pc, #140]	; (80067f0 <_svfiprintf_r+0x1f4>)
 8006764:	bb1b      	cbnz	r3, 80067ae <_svfiprintf_r+0x1b2>
 8006766:	9b03      	ldr	r3, [sp, #12]
 8006768:	3307      	adds	r3, #7
 800676a:	f023 0307 	bic.w	r3, r3, #7
 800676e:	3308      	adds	r3, #8
 8006770:	9303      	str	r3, [sp, #12]
 8006772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006774:	4433      	add	r3, r6
 8006776:	9309      	str	r3, [sp, #36]	; 0x24
 8006778:	e767      	b.n	800664a <_svfiprintf_r+0x4e>
 800677a:	fb0c 3202 	mla	r2, ip, r2, r3
 800677e:	460c      	mov	r4, r1
 8006780:	2001      	movs	r0, #1
 8006782:	e7a5      	b.n	80066d0 <_svfiprintf_r+0xd4>
 8006784:	2300      	movs	r3, #0
 8006786:	3401      	adds	r4, #1
 8006788:	9305      	str	r3, [sp, #20]
 800678a:	4619      	mov	r1, r3
 800678c:	f04f 0c0a 	mov.w	ip, #10
 8006790:	4620      	mov	r0, r4
 8006792:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006796:	3a30      	subs	r2, #48	; 0x30
 8006798:	2a09      	cmp	r2, #9
 800679a:	d903      	bls.n	80067a4 <_svfiprintf_r+0x1a8>
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0c5      	beq.n	800672c <_svfiprintf_r+0x130>
 80067a0:	9105      	str	r1, [sp, #20]
 80067a2:	e7c3      	b.n	800672c <_svfiprintf_r+0x130>
 80067a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80067a8:	4604      	mov	r4, r0
 80067aa:	2301      	movs	r3, #1
 80067ac:	e7f0      	b.n	8006790 <_svfiprintf_r+0x194>
 80067ae:	ab03      	add	r3, sp, #12
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	462a      	mov	r2, r5
 80067b4:	4b0f      	ldr	r3, [pc, #60]	; (80067f4 <_svfiprintf_r+0x1f8>)
 80067b6:	a904      	add	r1, sp, #16
 80067b8:	4638      	mov	r0, r7
 80067ba:	f7fd ff7d 	bl	80046b8 <_printf_float>
 80067be:	1c42      	adds	r2, r0, #1
 80067c0:	4606      	mov	r6, r0
 80067c2:	d1d6      	bne.n	8006772 <_svfiprintf_r+0x176>
 80067c4:	89ab      	ldrh	r3, [r5, #12]
 80067c6:	065b      	lsls	r3, r3, #25
 80067c8:	f53f af2c 	bmi.w	8006624 <_svfiprintf_r+0x28>
 80067cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067ce:	b01d      	add	sp, #116	; 0x74
 80067d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d4:	ab03      	add	r3, sp, #12
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	462a      	mov	r2, r5
 80067da:	4b06      	ldr	r3, [pc, #24]	; (80067f4 <_svfiprintf_r+0x1f8>)
 80067dc:	a904      	add	r1, sp, #16
 80067de:	4638      	mov	r0, r7
 80067e0:	f7fe f9f6 	bl	8004bd0 <_printf_i>
 80067e4:	e7eb      	b.n	80067be <_svfiprintf_r+0x1c2>
 80067e6:	bf00      	nop
 80067e8:	080074dc 	.word	0x080074dc
 80067ec:	080074e6 	.word	0x080074e6
 80067f0:	080046b9 	.word	0x080046b9
 80067f4:	08006545 	.word	0x08006545
 80067f8:	080074e2 	.word	0x080074e2

080067fc <__sfputc_r>:
 80067fc:	6893      	ldr	r3, [r2, #8]
 80067fe:	3b01      	subs	r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	b410      	push	{r4}
 8006804:	6093      	str	r3, [r2, #8]
 8006806:	da08      	bge.n	800681a <__sfputc_r+0x1e>
 8006808:	6994      	ldr	r4, [r2, #24]
 800680a:	42a3      	cmp	r3, r4
 800680c:	db01      	blt.n	8006812 <__sfputc_r+0x16>
 800680e:	290a      	cmp	r1, #10
 8006810:	d103      	bne.n	800681a <__sfputc_r+0x1e>
 8006812:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006816:	f000 b99f 	b.w	8006b58 <__swbuf_r>
 800681a:	6813      	ldr	r3, [r2, #0]
 800681c:	1c58      	adds	r0, r3, #1
 800681e:	6010      	str	r0, [r2, #0]
 8006820:	7019      	strb	r1, [r3, #0]
 8006822:	4608      	mov	r0, r1
 8006824:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006828:	4770      	bx	lr

0800682a <__sfputs_r>:
 800682a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682c:	4606      	mov	r6, r0
 800682e:	460f      	mov	r7, r1
 8006830:	4614      	mov	r4, r2
 8006832:	18d5      	adds	r5, r2, r3
 8006834:	42ac      	cmp	r4, r5
 8006836:	d101      	bne.n	800683c <__sfputs_r+0x12>
 8006838:	2000      	movs	r0, #0
 800683a:	e007      	b.n	800684c <__sfputs_r+0x22>
 800683c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006840:	463a      	mov	r2, r7
 8006842:	4630      	mov	r0, r6
 8006844:	f7ff ffda 	bl	80067fc <__sfputc_r>
 8006848:	1c43      	adds	r3, r0, #1
 800684a:	d1f3      	bne.n	8006834 <__sfputs_r+0xa>
 800684c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006850 <_vfiprintf_r>:
 8006850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006854:	460d      	mov	r5, r1
 8006856:	b09d      	sub	sp, #116	; 0x74
 8006858:	4614      	mov	r4, r2
 800685a:	4698      	mov	r8, r3
 800685c:	4606      	mov	r6, r0
 800685e:	b118      	cbz	r0, 8006868 <_vfiprintf_r+0x18>
 8006860:	6983      	ldr	r3, [r0, #24]
 8006862:	b90b      	cbnz	r3, 8006868 <_vfiprintf_r+0x18>
 8006864:	f7ff f97a 	bl	8005b5c <__sinit>
 8006868:	4b89      	ldr	r3, [pc, #548]	; (8006a90 <_vfiprintf_r+0x240>)
 800686a:	429d      	cmp	r5, r3
 800686c:	d11b      	bne.n	80068a6 <_vfiprintf_r+0x56>
 800686e:	6875      	ldr	r5, [r6, #4]
 8006870:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006872:	07d9      	lsls	r1, r3, #31
 8006874:	d405      	bmi.n	8006882 <_vfiprintf_r+0x32>
 8006876:	89ab      	ldrh	r3, [r5, #12]
 8006878:	059a      	lsls	r2, r3, #22
 800687a:	d402      	bmi.n	8006882 <_vfiprintf_r+0x32>
 800687c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800687e:	f7ff fa10 	bl	8005ca2 <__retarget_lock_acquire_recursive>
 8006882:	89ab      	ldrh	r3, [r5, #12]
 8006884:	071b      	lsls	r3, r3, #28
 8006886:	d501      	bpl.n	800688c <_vfiprintf_r+0x3c>
 8006888:	692b      	ldr	r3, [r5, #16]
 800688a:	b9eb      	cbnz	r3, 80068c8 <_vfiprintf_r+0x78>
 800688c:	4629      	mov	r1, r5
 800688e:	4630      	mov	r0, r6
 8006890:	f000 f9c6 	bl	8006c20 <__swsetup_r>
 8006894:	b1c0      	cbz	r0, 80068c8 <_vfiprintf_r+0x78>
 8006896:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006898:	07dc      	lsls	r4, r3, #31
 800689a:	d50e      	bpl.n	80068ba <_vfiprintf_r+0x6a>
 800689c:	f04f 30ff 	mov.w	r0, #4294967295
 80068a0:	b01d      	add	sp, #116	; 0x74
 80068a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a6:	4b7b      	ldr	r3, [pc, #492]	; (8006a94 <_vfiprintf_r+0x244>)
 80068a8:	429d      	cmp	r5, r3
 80068aa:	d101      	bne.n	80068b0 <_vfiprintf_r+0x60>
 80068ac:	68b5      	ldr	r5, [r6, #8]
 80068ae:	e7df      	b.n	8006870 <_vfiprintf_r+0x20>
 80068b0:	4b79      	ldr	r3, [pc, #484]	; (8006a98 <_vfiprintf_r+0x248>)
 80068b2:	429d      	cmp	r5, r3
 80068b4:	bf08      	it	eq
 80068b6:	68f5      	ldreq	r5, [r6, #12]
 80068b8:	e7da      	b.n	8006870 <_vfiprintf_r+0x20>
 80068ba:	89ab      	ldrh	r3, [r5, #12]
 80068bc:	0598      	lsls	r0, r3, #22
 80068be:	d4ed      	bmi.n	800689c <_vfiprintf_r+0x4c>
 80068c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068c2:	f7ff f9ef 	bl	8005ca4 <__retarget_lock_release_recursive>
 80068c6:	e7e9      	b.n	800689c <_vfiprintf_r+0x4c>
 80068c8:	2300      	movs	r3, #0
 80068ca:	9309      	str	r3, [sp, #36]	; 0x24
 80068cc:	2320      	movs	r3, #32
 80068ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80068d6:	2330      	movs	r3, #48	; 0x30
 80068d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006a9c <_vfiprintf_r+0x24c>
 80068dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068e0:	f04f 0901 	mov.w	r9, #1
 80068e4:	4623      	mov	r3, r4
 80068e6:	469a      	mov	sl, r3
 80068e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068ec:	b10a      	cbz	r2, 80068f2 <_vfiprintf_r+0xa2>
 80068ee:	2a25      	cmp	r2, #37	; 0x25
 80068f0:	d1f9      	bne.n	80068e6 <_vfiprintf_r+0x96>
 80068f2:	ebba 0b04 	subs.w	fp, sl, r4
 80068f6:	d00b      	beq.n	8006910 <_vfiprintf_r+0xc0>
 80068f8:	465b      	mov	r3, fp
 80068fa:	4622      	mov	r2, r4
 80068fc:	4629      	mov	r1, r5
 80068fe:	4630      	mov	r0, r6
 8006900:	f7ff ff93 	bl	800682a <__sfputs_r>
 8006904:	3001      	adds	r0, #1
 8006906:	f000 80aa 	beq.w	8006a5e <_vfiprintf_r+0x20e>
 800690a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800690c:	445a      	add	r2, fp
 800690e:	9209      	str	r2, [sp, #36]	; 0x24
 8006910:	f89a 3000 	ldrb.w	r3, [sl]
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 80a2 	beq.w	8006a5e <_vfiprintf_r+0x20e>
 800691a:	2300      	movs	r3, #0
 800691c:	f04f 32ff 	mov.w	r2, #4294967295
 8006920:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006924:	f10a 0a01 	add.w	sl, sl, #1
 8006928:	9304      	str	r3, [sp, #16]
 800692a:	9307      	str	r3, [sp, #28]
 800692c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006930:	931a      	str	r3, [sp, #104]	; 0x68
 8006932:	4654      	mov	r4, sl
 8006934:	2205      	movs	r2, #5
 8006936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800693a:	4858      	ldr	r0, [pc, #352]	; (8006a9c <_vfiprintf_r+0x24c>)
 800693c:	f7f9 fc88 	bl	8000250 <memchr>
 8006940:	9a04      	ldr	r2, [sp, #16]
 8006942:	b9d8      	cbnz	r0, 800697c <_vfiprintf_r+0x12c>
 8006944:	06d1      	lsls	r1, r2, #27
 8006946:	bf44      	itt	mi
 8006948:	2320      	movmi	r3, #32
 800694a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800694e:	0713      	lsls	r3, r2, #28
 8006950:	bf44      	itt	mi
 8006952:	232b      	movmi	r3, #43	; 0x2b
 8006954:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006958:	f89a 3000 	ldrb.w	r3, [sl]
 800695c:	2b2a      	cmp	r3, #42	; 0x2a
 800695e:	d015      	beq.n	800698c <_vfiprintf_r+0x13c>
 8006960:	9a07      	ldr	r2, [sp, #28]
 8006962:	4654      	mov	r4, sl
 8006964:	2000      	movs	r0, #0
 8006966:	f04f 0c0a 	mov.w	ip, #10
 800696a:	4621      	mov	r1, r4
 800696c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006970:	3b30      	subs	r3, #48	; 0x30
 8006972:	2b09      	cmp	r3, #9
 8006974:	d94e      	bls.n	8006a14 <_vfiprintf_r+0x1c4>
 8006976:	b1b0      	cbz	r0, 80069a6 <_vfiprintf_r+0x156>
 8006978:	9207      	str	r2, [sp, #28]
 800697a:	e014      	b.n	80069a6 <_vfiprintf_r+0x156>
 800697c:	eba0 0308 	sub.w	r3, r0, r8
 8006980:	fa09 f303 	lsl.w	r3, r9, r3
 8006984:	4313      	orrs	r3, r2
 8006986:	9304      	str	r3, [sp, #16]
 8006988:	46a2      	mov	sl, r4
 800698a:	e7d2      	b.n	8006932 <_vfiprintf_r+0xe2>
 800698c:	9b03      	ldr	r3, [sp, #12]
 800698e:	1d19      	adds	r1, r3, #4
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	9103      	str	r1, [sp, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	bfbb      	ittet	lt
 8006998:	425b      	neglt	r3, r3
 800699a:	f042 0202 	orrlt.w	r2, r2, #2
 800699e:	9307      	strge	r3, [sp, #28]
 80069a0:	9307      	strlt	r3, [sp, #28]
 80069a2:	bfb8      	it	lt
 80069a4:	9204      	strlt	r2, [sp, #16]
 80069a6:	7823      	ldrb	r3, [r4, #0]
 80069a8:	2b2e      	cmp	r3, #46	; 0x2e
 80069aa:	d10c      	bne.n	80069c6 <_vfiprintf_r+0x176>
 80069ac:	7863      	ldrb	r3, [r4, #1]
 80069ae:	2b2a      	cmp	r3, #42	; 0x2a
 80069b0:	d135      	bne.n	8006a1e <_vfiprintf_r+0x1ce>
 80069b2:	9b03      	ldr	r3, [sp, #12]
 80069b4:	1d1a      	adds	r2, r3, #4
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	9203      	str	r2, [sp, #12]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	bfb8      	it	lt
 80069be:	f04f 33ff 	movlt.w	r3, #4294967295
 80069c2:	3402      	adds	r4, #2
 80069c4:	9305      	str	r3, [sp, #20]
 80069c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006aac <_vfiprintf_r+0x25c>
 80069ca:	7821      	ldrb	r1, [r4, #0]
 80069cc:	2203      	movs	r2, #3
 80069ce:	4650      	mov	r0, sl
 80069d0:	f7f9 fc3e 	bl	8000250 <memchr>
 80069d4:	b140      	cbz	r0, 80069e8 <_vfiprintf_r+0x198>
 80069d6:	2340      	movs	r3, #64	; 0x40
 80069d8:	eba0 000a 	sub.w	r0, r0, sl
 80069dc:	fa03 f000 	lsl.w	r0, r3, r0
 80069e0:	9b04      	ldr	r3, [sp, #16]
 80069e2:	4303      	orrs	r3, r0
 80069e4:	3401      	adds	r4, #1
 80069e6:	9304      	str	r3, [sp, #16]
 80069e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069ec:	482c      	ldr	r0, [pc, #176]	; (8006aa0 <_vfiprintf_r+0x250>)
 80069ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069f2:	2206      	movs	r2, #6
 80069f4:	f7f9 fc2c 	bl	8000250 <memchr>
 80069f8:	2800      	cmp	r0, #0
 80069fa:	d03f      	beq.n	8006a7c <_vfiprintf_r+0x22c>
 80069fc:	4b29      	ldr	r3, [pc, #164]	; (8006aa4 <_vfiprintf_r+0x254>)
 80069fe:	bb1b      	cbnz	r3, 8006a48 <_vfiprintf_r+0x1f8>
 8006a00:	9b03      	ldr	r3, [sp, #12]
 8006a02:	3307      	adds	r3, #7
 8006a04:	f023 0307 	bic.w	r3, r3, #7
 8006a08:	3308      	adds	r3, #8
 8006a0a:	9303      	str	r3, [sp, #12]
 8006a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a0e:	443b      	add	r3, r7
 8006a10:	9309      	str	r3, [sp, #36]	; 0x24
 8006a12:	e767      	b.n	80068e4 <_vfiprintf_r+0x94>
 8006a14:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a18:	460c      	mov	r4, r1
 8006a1a:	2001      	movs	r0, #1
 8006a1c:	e7a5      	b.n	800696a <_vfiprintf_r+0x11a>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	3401      	adds	r4, #1
 8006a22:	9305      	str	r3, [sp, #20]
 8006a24:	4619      	mov	r1, r3
 8006a26:	f04f 0c0a 	mov.w	ip, #10
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a30:	3a30      	subs	r2, #48	; 0x30
 8006a32:	2a09      	cmp	r2, #9
 8006a34:	d903      	bls.n	8006a3e <_vfiprintf_r+0x1ee>
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0c5      	beq.n	80069c6 <_vfiprintf_r+0x176>
 8006a3a:	9105      	str	r1, [sp, #20]
 8006a3c:	e7c3      	b.n	80069c6 <_vfiprintf_r+0x176>
 8006a3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a42:	4604      	mov	r4, r0
 8006a44:	2301      	movs	r3, #1
 8006a46:	e7f0      	b.n	8006a2a <_vfiprintf_r+0x1da>
 8006a48:	ab03      	add	r3, sp, #12
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	462a      	mov	r2, r5
 8006a4e:	4b16      	ldr	r3, [pc, #88]	; (8006aa8 <_vfiprintf_r+0x258>)
 8006a50:	a904      	add	r1, sp, #16
 8006a52:	4630      	mov	r0, r6
 8006a54:	f7fd fe30 	bl	80046b8 <_printf_float>
 8006a58:	4607      	mov	r7, r0
 8006a5a:	1c78      	adds	r0, r7, #1
 8006a5c:	d1d6      	bne.n	8006a0c <_vfiprintf_r+0x1bc>
 8006a5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a60:	07d9      	lsls	r1, r3, #31
 8006a62:	d405      	bmi.n	8006a70 <_vfiprintf_r+0x220>
 8006a64:	89ab      	ldrh	r3, [r5, #12]
 8006a66:	059a      	lsls	r2, r3, #22
 8006a68:	d402      	bmi.n	8006a70 <_vfiprintf_r+0x220>
 8006a6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a6c:	f7ff f91a 	bl	8005ca4 <__retarget_lock_release_recursive>
 8006a70:	89ab      	ldrh	r3, [r5, #12]
 8006a72:	065b      	lsls	r3, r3, #25
 8006a74:	f53f af12 	bmi.w	800689c <_vfiprintf_r+0x4c>
 8006a78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a7a:	e711      	b.n	80068a0 <_vfiprintf_r+0x50>
 8006a7c:	ab03      	add	r3, sp, #12
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	462a      	mov	r2, r5
 8006a82:	4b09      	ldr	r3, [pc, #36]	; (8006aa8 <_vfiprintf_r+0x258>)
 8006a84:	a904      	add	r1, sp, #16
 8006a86:	4630      	mov	r0, r6
 8006a88:	f7fe f8a2 	bl	8004bd0 <_printf_i>
 8006a8c:	e7e4      	b.n	8006a58 <_vfiprintf_r+0x208>
 8006a8e:	bf00      	nop
 8006a90:	08007340 	.word	0x08007340
 8006a94:	08007360 	.word	0x08007360
 8006a98:	08007320 	.word	0x08007320
 8006a9c:	080074dc 	.word	0x080074dc
 8006aa0:	080074e6 	.word	0x080074e6
 8006aa4:	080046b9 	.word	0x080046b9
 8006aa8:	0800682b 	.word	0x0800682b
 8006aac:	080074e2 	.word	0x080074e2

08006ab0 <_sbrk_r>:
 8006ab0:	b538      	push	{r3, r4, r5, lr}
 8006ab2:	4d06      	ldr	r5, [pc, #24]	; (8006acc <_sbrk_r+0x1c>)
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	4608      	mov	r0, r1
 8006aba:	602b      	str	r3, [r5, #0]
 8006abc:	f7fa f94c 	bl	8000d58 <_sbrk>
 8006ac0:	1c43      	adds	r3, r0, #1
 8006ac2:	d102      	bne.n	8006aca <_sbrk_r+0x1a>
 8006ac4:	682b      	ldr	r3, [r5, #0]
 8006ac6:	b103      	cbz	r3, 8006aca <_sbrk_r+0x1a>
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	bd38      	pop	{r3, r4, r5, pc}
 8006acc:	2000393c 	.word	0x2000393c

08006ad0 <__sread>:
 8006ad0:	b510      	push	{r4, lr}
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ad8:	f000 fae6 	bl	80070a8 <_read_r>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	bfab      	itete	ge
 8006ae0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ae2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ae4:	181b      	addge	r3, r3, r0
 8006ae6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006aea:	bfac      	ite	ge
 8006aec:	6563      	strge	r3, [r4, #84]	; 0x54
 8006aee:	81a3      	strhlt	r3, [r4, #12]
 8006af0:	bd10      	pop	{r4, pc}

08006af2 <__swrite>:
 8006af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af6:	461f      	mov	r7, r3
 8006af8:	898b      	ldrh	r3, [r1, #12]
 8006afa:	05db      	lsls	r3, r3, #23
 8006afc:	4605      	mov	r5, r0
 8006afe:	460c      	mov	r4, r1
 8006b00:	4616      	mov	r6, r2
 8006b02:	d505      	bpl.n	8006b10 <__swrite+0x1e>
 8006b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b08:	2302      	movs	r3, #2
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f000 f9f8 	bl	8006f00 <_lseek_r>
 8006b10:	89a3      	ldrh	r3, [r4, #12]
 8006b12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b1a:	81a3      	strh	r3, [r4, #12]
 8006b1c:	4632      	mov	r2, r6
 8006b1e:	463b      	mov	r3, r7
 8006b20:	4628      	mov	r0, r5
 8006b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b26:	f000 b869 	b.w	8006bfc <_write_r>

08006b2a <__sseek>:
 8006b2a:	b510      	push	{r4, lr}
 8006b2c:	460c      	mov	r4, r1
 8006b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b32:	f000 f9e5 	bl	8006f00 <_lseek_r>
 8006b36:	1c43      	adds	r3, r0, #1
 8006b38:	89a3      	ldrh	r3, [r4, #12]
 8006b3a:	bf15      	itete	ne
 8006b3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b46:	81a3      	strheq	r3, [r4, #12]
 8006b48:	bf18      	it	ne
 8006b4a:	81a3      	strhne	r3, [r4, #12]
 8006b4c:	bd10      	pop	{r4, pc}

08006b4e <__sclose>:
 8006b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b52:	f000 b8f1 	b.w	8006d38 <_close_r>
	...

08006b58 <__swbuf_r>:
 8006b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5a:	460e      	mov	r6, r1
 8006b5c:	4614      	mov	r4, r2
 8006b5e:	4605      	mov	r5, r0
 8006b60:	b118      	cbz	r0, 8006b6a <__swbuf_r+0x12>
 8006b62:	6983      	ldr	r3, [r0, #24]
 8006b64:	b90b      	cbnz	r3, 8006b6a <__swbuf_r+0x12>
 8006b66:	f7fe fff9 	bl	8005b5c <__sinit>
 8006b6a:	4b21      	ldr	r3, [pc, #132]	; (8006bf0 <__swbuf_r+0x98>)
 8006b6c:	429c      	cmp	r4, r3
 8006b6e:	d12b      	bne.n	8006bc8 <__swbuf_r+0x70>
 8006b70:	686c      	ldr	r4, [r5, #4]
 8006b72:	69a3      	ldr	r3, [r4, #24]
 8006b74:	60a3      	str	r3, [r4, #8]
 8006b76:	89a3      	ldrh	r3, [r4, #12]
 8006b78:	071a      	lsls	r2, r3, #28
 8006b7a:	d52f      	bpl.n	8006bdc <__swbuf_r+0x84>
 8006b7c:	6923      	ldr	r3, [r4, #16]
 8006b7e:	b36b      	cbz	r3, 8006bdc <__swbuf_r+0x84>
 8006b80:	6923      	ldr	r3, [r4, #16]
 8006b82:	6820      	ldr	r0, [r4, #0]
 8006b84:	1ac0      	subs	r0, r0, r3
 8006b86:	6963      	ldr	r3, [r4, #20]
 8006b88:	b2f6      	uxtb	r6, r6
 8006b8a:	4283      	cmp	r3, r0
 8006b8c:	4637      	mov	r7, r6
 8006b8e:	dc04      	bgt.n	8006b9a <__swbuf_r+0x42>
 8006b90:	4621      	mov	r1, r4
 8006b92:	4628      	mov	r0, r5
 8006b94:	f000 f966 	bl	8006e64 <_fflush_r>
 8006b98:	bb30      	cbnz	r0, 8006be8 <__swbuf_r+0x90>
 8006b9a:	68a3      	ldr	r3, [r4, #8]
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	60a3      	str	r3, [r4, #8]
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	6022      	str	r2, [r4, #0]
 8006ba6:	701e      	strb	r6, [r3, #0]
 8006ba8:	6963      	ldr	r3, [r4, #20]
 8006baa:	3001      	adds	r0, #1
 8006bac:	4283      	cmp	r3, r0
 8006bae:	d004      	beq.n	8006bba <__swbuf_r+0x62>
 8006bb0:	89a3      	ldrh	r3, [r4, #12]
 8006bb2:	07db      	lsls	r3, r3, #31
 8006bb4:	d506      	bpl.n	8006bc4 <__swbuf_r+0x6c>
 8006bb6:	2e0a      	cmp	r6, #10
 8006bb8:	d104      	bne.n	8006bc4 <__swbuf_r+0x6c>
 8006bba:	4621      	mov	r1, r4
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	f000 f951 	bl	8006e64 <_fflush_r>
 8006bc2:	b988      	cbnz	r0, 8006be8 <__swbuf_r+0x90>
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc8:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <__swbuf_r+0x9c>)
 8006bca:	429c      	cmp	r4, r3
 8006bcc:	d101      	bne.n	8006bd2 <__swbuf_r+0x7a>
 8006bce:	68ac      	ldr	r4, [r5, #8]
 8006bd0:	e7cf      	b.n	8006b72 <__swbuf_r+0x1a>
 8006bd2:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <__swbuf_r+0xa0>)
 8006bd4:	429c      	cmp	r4, r3
 8006bd6:	bf08      	it	eq
 8006bd8:	68ec      	ldreq	r4, [r5, #12]
 8006bda:	e7ca      	b.n	8006b72 <__swbuf_r+0x1a>
 8006bdc:	4621      	mov	r1, r4
 8006bde:	4628      	mov	r0, r5
 8006be0:	f000 f81e 	bl	8006c20 <__swsetup_r>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	d0cb      	beq.n	8006b80 <__swbuf_r+0x28>
 8006be8:	f04f 37ff 	mov.w	r7, #4294967295
 8006bec:	e7ea      	b.n	8006bc4 <__swbuf_r+0x6c>
 8006bee:	bf00      	nop
 8006bf0:	08007340 	.word	0x08007340
 8006bf4:	08007360 	.word	0x08007360
 8006bf8:	08007320 	.word	0x08007320

08006bfc <_write_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	4d07      	ldr	r5, [pc, #28]	; (8006c1c <_write_r+0x20>)
 8006c00:	4604      	mov	r4, r0
 8006c02:	4608      	mov	r0, r1
 8006c04:	4611      	mov	r1, r2
 8006c06:	2200      	movs	r2, #0
 8006c08:	602a      	str	r2, [r5, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f7fa f853 	bl	8000cb6 <_write>
 8006c10:	1c43      	adds	r3, r0, #1
 8006c12:	d102      	bne.n	8006c1a <_write_r+0x1e>
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	b103      	cbz	r3, 8006c1a <_write_r+0x1e>
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	bd38      	pop	{r3, r4, r5, pc}
 8006c1c:	2000393c 	.word	0x2000393c

08006c20 <__swsetup_r>:
 8006c20:	4b32      	ldr	r3, [pc, #200]	; (8006cec <__swsetup_r+0xcc>)
 8006c22:	b570      	push	{r4, r5, r6, lr}
 8006c24:	681d      	ldr	r5, [r3, #0]
 8006c26:	4606      	mov	r6, r0
 8006c28:	460c      	mov	r4, r1
 8006c2a:	b125      	cbz	r5, 8006c36 <__swsetup_r+0x16>
 8006c2c:	69ab      	ldr	r3, [r5, #24]
 8006c2e:	b913      	cbnz	r3, 8006c36 <__swsetup_r+0x16>
 8006c30:	4628      	mov	r0, r5
 8006c32:	f7fe ff93 	bl	8005b5c <__sinit>
 8006c36:	4b2e      	ldr	r3, [pc, #184]	; (8006cf0 <__swsetup_r+0xd0>)
 8006c38:	429c      	cmp	r4, r3
 8006c3a:	d10f      	bne.n	8006c5c <__swsetup_r+0x3c>
 8006c3c:	686c      	ldr	r4, [r5, #4]
 8006c3e:	89a3      	ldrh	r3, [r4, #12]
 8006c40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c44:	0719      	lsls	r1, r3, #28
 8006c46:	d42c      	bmi.n	8006ca2 <__swsetup_r+0x82>
 8006c48:	06dd      	lsls	r5, r3, #27
 8006c4a:	d411      	bmi.n	8006c70 <__swsetup_r+0x50>
 8006c4c:	2309      	movs	r3, #9
 8006c4e:	6033      	str	r3, [r6, #0]
 8006c50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c54:	81a3      	strh	r3, [r4, #12]
 8006c56:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5a:	e03e      	b.n	8006cda <__swsetup_r+0xba>
 8006c5c:	4b25      	ldr	r3, [pc, #148]	; (8006cf4 <__swsetup_r+0xd4>)
 8006c5e:	429c      	cmp	r4, r3
 8006c60:	d101      	bne.n	8006c66 <__swsetup_r+0x46>
 8006c62:	68ac      	ldr	r4, [r5, #8]
 8006c64:	e7eb      	b.n	8006c3e <__swsetup_r+0x1e>
 8006c66:	4b24      	ldr	r3, [pc, #144]	; (8006cf8 <__swsetup_r+0xd8>)
 8006c68:	429c      	cmp	r4, r3
 8006c6a:	bf08      	it	eq
 8006c6c:	68ec      	ldreq	r4, [r5, #12]
 8006c6e:	e7e6      	b.n	8006c3e <__swsetup_r+0x1e>
 8006c70:	0758      	lsls	r0, r3, #29
 8006c72:	d512      	bpl.n	8006c9a <__swsetup_r+0x7a>
 8006c74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c76:	b141      	cbz	r1, 8006c8a <__swsetup_r+0x6a>
 8006c78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c7c:	4299      	cmp	r1, r3
 8006c7e:	d002      	beq.n	8006c86 <__swsetup_r+0x66>
 8006c80:	4630      	mov	r0, r6
 8006c82:	f7ff fbb5 	bl	80063f0 <_free_r>
 8006c86:	2300      	movs	r3, #0
 8006c88:	6363      	str	r3, [r4, #52]	; 0x34
 8006c8a:	89a3      	ldrh	r3, [r4, #12]
 8006c8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c90:	81a3      	strh	r3, [r4, #12]
 8006c92:	2300      	movs	r3, #0
 8006c94:	6063      	str	r3, [r4, #4]
 8006c96:	6923      	ldr	r3, [r4, #16]
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	89a3      	ldrh	r3, [r4, #12]
 8006c9c:	f043 0308 	orr.w	r3, r3, #8
 8006ca0:	81a3      	strh	r3, [r4, #12]
 8006ca2:	6923      	ldr	r3, [r4, #16]
 8006ca4:	b94b      	cbnz	r3, 8006cba <__swsetup_r+0x9a>
 8006ca6:	89a3      	ldrh	r3, [r4, #12]
 8006ca8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb0:	d003      	beq.n	8006cba <__swsetup_r+0x9a>
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	f000 f959 	bl	8006f6c <__smakebuf_r>
 8006cba:	89a0      	ldrh	r0, [r4, #12]
 8006cbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cc0:	f010 0301 	ands.w	r3, r0, #1
 8006cc4:	d00a      	beq.n	8006cdc <__swsetup_r+0xbc>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60a3      	str	r3, [r4, #8]
 8006cca:	6963      	ldr	r3, [r4, #20]
 8006ccc:	425b      	negs	r3, r3
 8006cce:	61a3      	str	r3, [r4, #24]
 8006cd0:	6923      	ldr	r3, [r4, #16]
 8006cd2:	b943      	cbnz	r3, 8006ce6 <__swsetup_r+0xc6>
 8006cd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006cd8:	d1ba      	bne.n	8006c50 <__swsetup_r+0x30>
 8006cda:	bd70      	pop	{r4, r5, r6, pc}
 8006cdc:	0781      	lsls	r1, r0, #30
 8006cde:	bf58      	it	pl
 8006ce0:	6963      	ldrpl	r3, [r4, #20]
 8006ce2:	60a3      	str	r3, [r4, #8]
 8006ce4:	e7f4      	b.n	8006cd0 <__swsetup_r+0xb0>
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	e7f7      	b.n	8006cda <__swsetup_r+0xba>
 8006cea:	bf00      	nop
 8006cec:	20001010 	.word	0x20001010
 8006cf0:	08007340 	.word	0x08007340
 8006cf4:	08007360 	.word	0x08007360
 8006cf8:	08007320 	.word	0x08007320

08006cfc <__assert_func>:
 8006cfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cfe:	4614      	mov	r4, r2
 8006d00:	461a      	mov	r2, r3
 8006d02:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <__assert_func+0x2c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4605      	mov	r5, r0
 8006d08:	68d8      	ldr	r0, [r3, #12]
 8006d0a:	b14c      	cbz	r4, 8006d20 <__assert_func+0x24>
 8006d0c:	4b07      	ldr	r3, [pc, #28]	; (8006d2c <__assert_func+0x30>)
 8006d0e:	9100      	str	r1, [sp, #0]
 8006d10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d14:	4906      	ldr	r1, [pc, #24]	; (8006d30 <__assert_func+0x34>)
 8006d16:	462b      	mov	r3, r5
 8006d18:	f000 f8e0 	bl	8006edc <fiprintf>
 8006d1c:	f000 f9e3 	bl	80070e6 <abort>
 8006d20:	4b04      	ldr	r3, [pc, #16]	; (8006d34 <__assert_func+0x38>)
 8006d22:	461c      	mov	r4, r3
 8006d24:	e7f3      	b.n	8006d0e <__assert_func+0x12>
 8006d26:	bf00      	nop
 8006d28:	20001010 	.word	0x20001010
 8006d2c:	080074ed 	.word	0x080074ed
 8006d30:	080074fa 	.word	0x080074fa
 8006d34:	08007528 	.word	0x08007528

08006d38 <_close_r>:
 8006d38:	b538      	push	{r3, r4, r5, lr}
 8006d3a:	4d06      	ldr	r5, [pc, #24]	; (8006d54 <_close_r+0x1c>)
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	4604      	mov	r4, r0
 8006d40:	4608      	mov	r0, r1
 8006d42:	602b      	str	r3, [r5, #0]
 8006d44:	f7f9 ffd3 	bl	8000cee <_close>
 8006d48:	1c43      	adds	r3, r0, #1
 8006d4a:	d102      	bne.n	8006d52 <_close_r+0x1a>
 8006d4c:	682b      	ldr	r3, [r5, #0]
 8006d4e:	b103      	cbz	r3, 8006d52 <_close_r+0x1a>
 8006d50:	6023      	str	r3, [r4, #0]
 8006d52:	bd38      	pop	{r3, r4, r5, pc}
 8006d54:	2000393c 	.word	0x2000393c

08006d58 <__sflush_r>:
 8006d58:	898a      	ldrh	r2, [r1, #12]
 8006d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d5e:	4605      	mov	r5, r0
 8006d60:	0710      	lsls	r0, r2, #28
 8006d62:	460c      	mov	r4, r1
 8006d64:	d458      	bmi.n	8006e18 <__sflush_r+0xc0>
 8006d66:	684b      	ldr	r3, [r1, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	dc05      	bgt.n	8006d78 <__sflush_r+0x20>
 8006d6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	dc02      	bgt.n	8006d78 <__sflush_r+0x20>
 8006d72:	2000      	movs	r0, #0
 8006d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d7a:	2e00      	cmp	r6, #0
 8006d7c:	d0f9      	beq.n	8006d72 <__sflush_r+0x1a>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d84:	682f      	ldr	r7, [r5, #0]
 8006d86:	602b      	str	r3, [r5, #0]
 8006d88:	d032      	beq.n	8006df0 <__sflush_r+0x98>
 8006d8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d8c:	89a3      	ldrh	r3, [r4, #12]
 8006d8e:	075a      	lsls	r2, r3, #29
 8006d90:	d505      	bpl.n	8006d9e <__sflush_r+0x46>
 8006d92:	6863      	ldr	r3, [r4, #4]
 8006d94:	1ac0      	subs	r0, r0, r3
 8006d96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d98:	b10b      	cbz	r3, 8006d9e <__sflush_r+0x46>
 8006d9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d9c:	1ac0      	subs	r0, r0, r3
 8006d9e:	2300      	movs	r3, #0
 8006da0:	4602      	mov	r2, r0
 8006da2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006da4:	6a21      	ldr	r1, [r4, #32]
 8006da6:	4628      	mov	r0, r5
 8006da8:	47b0      	blx	r6
 8006daa:	1c43      	adds	r3, r0, #1
 8006dac:	89a3      	ldrh	r3, [r4, #12]
 8006dae:	d106      	bne.n	8006dbe <__sflush_r+0x66>
 8006db0:	6829      	ldr	r1, [r5, #0]
 8006db2:	291d      	cmp	r1, #29
 8006db4:	d82c      	bhi.n	8006e10 <__sflush_r+0xb8>
 8006db6:	4a2a      	ldr	r2, [pc, #168]	; (8006e60 <__sflush_r+0x108>)
 8006db8:	40ca      	lsrs	r2, r1
 8006dba:	07d6      	lsls	r6, r2, #31
 8006dbc:	d528      	bpl.n	8006e10 <__sflush_r+0xb8>
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	6062      	str	r2, [r4, #4]
 8006dc2:	04d9      	lsls	r1, r3, #19
 8006dc4:	6922      	ldr	r2, [r4, #16]
 8006dc6:	6022      	str	r2, [r4, #0]
 8006dc8:	d504      	bpl.n	8006dd4 <__sflush_r+0x7c>
 8006dca:	1c42      	adds	r2, r0, #1
 8006dcc:	d101      	bne.n	8006dd2 <__sflush_r+0x7a>
 8006dce:	682b      	ldr	r3, [r5, #0]
 8006dd0:	b903      	cbnz	r3, 8006dd4 <__sflush_r+0x7c>
 8006dd2:	6560      	str	r0, [r4, #84]	; 0x54
 8006dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dd6:	602f      	str	r7, [r5, #0]
 8006dd8:	2900      	cmp	r1, #0
 8006dda:	d0ca      	beq.n	8006d72 <__sflush_r+0x1a>
 8006ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006de0:	4299      	cmp	r1, r3
 8006de2:	d002      	beq.n	8006dea <__sflush_r+0x92>
 8006de4:	4628      	mov	r0, r5
 8006de6:	f7ff fb03 	bl	80063f0 <_free_r>
 8006dea:	2000      	movs	r0, #0
 8006dec:	6360      	str	r0, [r4, #52]	; 0x34
 8006dee:	e7c1      	b.n	8006d74 <__sflush_r+0x1c>
 8006df0:	6a21      	ldr	r1, [r4, #32]
 8006df2:	2301      	movs	r3, #1
 8006df4:	4628      	mov	r0, r5
 8006df6:	47b0      	blx	r6
 8006df8:	1c41      	adds	r1, r0, #1
 8006dfa:	d1c7      	bne.n	8006d8c <__sflush_r+0x34>
 8006dfc:	682b      	ldr	r3, [r5, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0c4      	beq.n	8006d8c <__sflush_r+0x34>
 8006e02:	2b1d      	cmp	r3, #29
 8006e04:	d001      	beq.n	8006e0a <__sflush_r+0xb2>
 8006e06:	2b16      	cmp	r3, #22
 8006e08:	d101      	bne.n	8006e0e <__sflush_r+0xb6>
 8006e0a:	602f      	str	r7, [r5, #0]
 8006e0c:	e7b1      	b.n	8006d72 <__sflush_r+0x1a>
 8006e0e:	89a3      	ldrh	r3, [r4, #12]
 8006e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e14:	81a3      	strh	r3, [r4, #12]
 8006e16:	e7ad      	b.n	8006d74 <__sflush_r+0x1c>
 8006e18:	690f      	ldr	r7, [r1, #16]
 8006e1a:	2f00      	cmp	r7, #0
 8006e1c:	d0a9      	beq.n	8006d72 <__sflush_r+0x1a>
 8006e1e:	0793      	lsls	r3, r2, #30
 8006e20:	680e      	ldr	r6, [r1, #0]
 8006e22:	bf08      	it	eq
 8006e24:	694b      	ldreq	r3, [r1, #20]
 8006e26:	600f      	str	r7, [r1, #0]
 8006e28:	bf18      	it	ne
 8006e2a:	2300      	movne	r3, #0
 8006e2c:	eba6 0807 	sub.w	r8, r6, r7
 8006e30:	608b      	str	r3, [r1, #8]
 8006e32:	f1b8 0f00 	cmp.w	r8, #0
 8006e36:	dd9c      	ble.n	8006d72 <__sflush_r+0x1a>
 8006e38:	6a21      	ldr	r1, [r4, #32]
 8006e3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e3c:	4643      	mov	r3, r8
 8006e3e:	463a      	mov	r2, r7
 8006e40:	4628      	mov	r0, r5
 8006e42:	47b0      	blx	r6
 8006e44:	2800      	cmp	r0, #0
 8006e46:	dc06      	bgt.n	8006e56 <__sflush_r+0xfe>
 8006e48:	89a3      	ldrh	r3, [r4, #12]
 8006e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e4e:	81a3      	strh	r3, [r4, #12]
 8006e50:	f04f 30ff 	mov.w	r0, #4294967295
 8006e54:	e78e      	b.n	8006d74 <__sflush_r+0x1c>
 8006e56:	4407      	add	r7, r0
 8006e58:	eba8 0800 	sub.w	r8, r8, r0
 8006e5c:	e7e9      	b.n	8006e32 <__sflush_r+0xda>
 8006e5e:	bf00      	nop
 8006e60:	20400001 	.word	0x20400001

08006e64 <_fflush_r>:
 8006e64:	b538      	push	{r3, r4, r5, lr}
 8006e66:	690b      	ldr	r3, [r1, #16]
 8006e68:	4605      	mov	r5, r0
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	b913      	cbnz	r3, 8006e74 <_fflush_r+0x10>
 8006e6e:	2500      	movs	r5, #0
 8006e70:	4628      	mov	r0, r5
 8006e72:	bd38      	pop	{r3, r4, r5, pc}
 8006e74:	b118      	cbz	r0, 8006e7e <_fflush_r+0x1a>
 8006e76:	6983      	ldr	r3, [r0, #24]
 8006e78:	b90b      	cbnz	r3, 8006e7e <_fflush_r+0x1a>
 8006e7a:	f7fe fe6f 	bl	8005b5c <__sinit>
 8006e7e:	4b14      	ldr	r3, [pc, #80]	; (8006ed0 <_fflush_r+0x6c>)
 8006e80:	429c      	cmp	r4, r3
 8006e82:	d11b      	bne.n	8006ebc <_fflush_r+0x58>
 8006e84:	686c      	ldr	r4, [r5, #4]
 8006e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d0ef      	beq.n	8006e6e <_fflush_r+0xa>
 8006e8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e90:	07d0      	lsls	r0, r2, #31
 8006e92:	d404      	bmi.n	8006e9e <_fflush_r+0x3a>
 8006e94:	0599      	lsls	r1, r3, #22
 8006e96:	d402      	bmi.n	8006e9e <_fflush_r+0x3a>
 8006e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e9a:	f7fe ff02 	bl	8005ca2 <__retarget_lock_acquire_recursive>
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	4621      	mov	r1, r4
 8006ea2:	f7ff ff59 	bl	8006d58 <__sflush_r>
 8006ea6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ea8:	07da      	lsls	r2, r3, #31
 8006eaa:	4605      	mov	r5, r0
 8006eac:	d4e0      	bmi.n	8006e70 <_fflush_r+0xc>
 8006eae:	89a3      	ldrh	r3, [r4, #12]
 8006eb0:	059b      	lsls	r3, r3, #22
 8006eb2:	d4dd      	bmi.n	8006e70 <_fflush_r+0xc>
 8006eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eb6:	f7fe fef5 	bl	8005ca4 <__retarget_lock_release_recursive>
 8006eba:	e7d9      	b.n	8006e70 <_fflush_r+0xc>
 8006ebc:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <_fflush_r+0x70>)
 8006ebe:	429c      	cmp	r4, r3
 8006ec0:	d101      	bne.n	8006ec6 <_fflush_r+0x62>
 8006ec2:	68ac      	ldr	r4, [r5, #8]
 8006ec4:	e7df      	b.n	8006e86 <_fflush_r+0x22>
 8006ec6:	4b04      	ldr	r3, [pc, #16]	; (8006ed8 <_fflush_r+0x74>)
 8006ec8:	429c      	cmp	r4, r3
 8006eca:	bf08      	it	eq
 8006ecc:	68ec      	ldreq	r4, [r5, #12]
 8006ece:	e7da      	b.n	8006e86 <_fflush_r+0x22>
 8006ed0:	08007340 	.word	0x08007340
 8006ed4:	08007360 	.word	0x08007360
 8006ed8:	08007320 	.word	0x08007320

08006edc <fiprintf>:
 8006edc:	b40e      	push	{r1, r2, r3}
 8006ede:	b503      	push	{r0, r1, lr}
 8006ee0:	4601      	mov	r1, r0
 8006ee2:	ab03      	add	r3, sp, #12
 8006ee4:	4805      	ldr	r0, [pc, #20]	; (8006efc <fiprintf+0x20>)
 8006ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eea:	6800      	ldr	r0, [r0, #0]
 8006eec:	9301      	str	r3, [sp, #4]
 8006eee:	f7ff fcaf 	bl	8006850 <_vfiprintf_r>
 8006ef2:	b002      	add	sp, #8
 8006ef4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ef8:	b003      	add	sp, #12
 8006efa:	4770      	bx	lr
 8006efc:	20001010 	.word	0x20001010

08006f00 <_lseek_r>:
 8006f00:	b538      	push	{r3, r4, r5, lr}
 8006f02:	4d07      	ldr	r5, [pc, #28]	; (8006f20 <_lseek_r+0x20>)
 8006f04:	4604      	mov	r4, r0
 8006f06:	4608      	mov	r0, r1
 8006f08:	4611      	mov	r1, r2
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	602a      	str	r2, [r5, #0]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f7f9 ff14 	bl	8000d3c <_lseek>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d102      	bne.n	8006f1e <_lseek_r+0x1e>
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	b103      	cbz	r3, 8006f1e <_lseek_r+0x1e>
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	2000393c 	.word	0x2000393c

08006f24 <__swhatbuf_r>:
 8006f24:	b570      	push	{r4, r5, r6, lr}
 8006f26:	460e      	mov	r6, r1
 8006f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f2c:	2900      	cmp	r1, #0
 8006f2e:	b096      	sub	sp, #88	; 0x58
 8006f30:	4614      	mov	r4, r2
 8006f32:	461d      	mov	r5, r3
 8006f34:	da07      	bge.n	8006f46 <__swhatbuf_r+0x22>
 8006f36:	2300      	movs	r3, #0
 8006f38:	602b      	str	r3, [r5, #0]
 8006f3a:	89b3      	ldrh	r3, [r6, #12]
 8006f3c:	061a      	lsls	r2, r3, #24
 8006f3e:	d410      	bmi.n	8006f62 <__swhatbuf_r+0x3e>
 8006f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f44:	e00e      	b.n	8006f64 <__swhatbuf_r+0x40>
 8006f46:	466a      	mov	r2, sp
 8006f48:	f000 f8d4 	bl	80070f4 <_fstat_r>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	dbf2      	blt.n	8006f36 <__swhatbuf_r+0x12>
 8006f50:	9a01      	ldr	r2, [sp, #4]
 8006f52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f5a:	425a      	negs	r2, r3
 8006f5c:	415a      	adcs	r2, r3
 8006f5e:	602a      	str	r2, [r5, #0]
 8006f60:	e7ee      	b.n	8006f40 <__swhatbuf_r+0x1c>
 8006f62:	2340      	movs	r3, #64	; 0x40
 8006f64:	2000      	movs	r0, #0
 8006f66:	6023      	str	r3, [r4, #0]
 8006f68:	b016      	add	sp, #88	; 0x58
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}

08006f6c <__smakebuf_r>:
 8006f6c:	898b      	ldrh	r3, [r1, #12]
 8006f6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f70:	079d      	lsls	r5, r3, #30
 8006f72:	4606      	mov	r6, r0
 8006f74:	460c      	mov	r4, r1
 8006f76:	d507      	bpl.n	8006f88 <__smakebuf_r+0x1c>
 8006f78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	6123      	str	r3, [r4, #16]
 8006f80:	2301      	movs	r3, #1
 8006f82:	6163      	str	r3, [r4, #20]
 8006f84:	b002      	add	sp, #8
 8006f86:	bd70      	pop	{r4, r5, r6, pc}
 8006f88:	ab01      	add	r3, sp, #4
 8006f8a:	466a      	mov	r2, sp
 8006f8c:	f7ff ffca 	bl	8006f24 <__swhatbuf_r>
 8006f90:	9900      	ldr	r1, [sp, #0]
 8006f92:	4605      	mov	r5, r0
 8006f94:	4630      	mov	r0, r6
 8006f96:	f7ff fa7b 	bl	8006490 <_malloc_r>
 8006f9a:	b948      	cbnz	r0, 8006fb0 <__smakebuf_r+0x44>
 8006f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fa0:	059a      	lsls	r2, r3, #22
 8006fa2:	d4ef      	bmi.n	8006f84 <__smakebuf_r+0x18>
 8006fa4:	f023 0303 	bic.w	r3, r3, #3
 8006fa8:	f043 0302 	orr.w	r3, r3, #2
 8006fac:	81a3      	strh	r3, [r4, #12]
 8006fae:	e7e3      	b.n	8006f78 <__smakebuf_r+0xc>
 8006fb0:	4b0d      	ldr	r3, [pc, #52]	; (8006fe8 <__smakebuf_r+0x7c>)
 8006fb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006fb4:	89a3      	ldrh	r3, [r4, #12]
 8006fb6:	6020      	str	r0, [r4, #0]
 8006fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fbc:	81a3      	strh	r3, [r4, #12]
 8006fbe:	9b00      	ldr	r3, [sp, #0]
 8006fc0:	6163      	str	r3, [r4, #20]
 8006fc2:	9b01      	ldr	r3, [sp, #4]
 8006fc4:	6120      	str	r0, [r4, #16]
 8006fc6:	b15b      	cbz	r3, 8006fe0 <__smakebuf_r+0x74>
 8006fc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fcc:	4630      	mov	r0, r6
 8006fce:	f000 f8a3 	bl	8007118 <_isatty_r>
 8006fd2:	b128      	cbz	r0, 8006fe0 <__smakebuf_r+0x74>
 8006fd4:	89a3      	ldrh	r3, [r4, #12]
 8006fd6:	f023 0303 	bic.w	r3, r3, #3
 8006fda:	f043 0301 	orr.w	r3, r3, #1
 8006fde:	81a3      	strh	r3, [r4, #12]
 8006fe0:	89a0      	ldrh	r0, [r4, #12]
 8006fe2:	4305      	orrs	r5, r0
 8006fe4:	81a5      	strh	r5, [r4, #12]
 8006fe6:	e7cd      	b.n	8006f84 <__smakebuf_r+0x18>
 8006fe8:	08005af5 	.word	0x08005af5

08006fec <__ascii_mbtowc>:
 8006fec:	b082      	sub	sp, #8
 8006fee:	b901      	cbnz	r1, 8006ff2 <__ascii_mbtowc+0x6>
 8006ff0:	a901      	add	r1, sp, #4
 8006ff2:	b142      	cbz	r2, 8007006 <__ascii_mbtowc+0x1a>
 8006ff4:	b14b      	cbz	r3, 800700a <__ascii_mbtowc+0x1e>
 8006ff6:	7813      	ldrb	r3, [r2, #0]
 8006ff8:	600b      	str	r3, [r1, #0]
 8006ffa:	7812      	ldrb	r2, [r2, #0]
 8006ffc:	1e10      	subs	r0, r2, #0
 8006ffe:	bf18      	it	ne
 8007000:	2001      	movne	r0, #1
 8007002:	b002      	add	sp, #8
 8007004:	4770      	bx	lr
 8007006:	4610      	mov	r0, r2
 8007008:	e7fb      	b.n	8007002 <__ascii_mbtowc+0x16>
 800700a:	f06f 0001 	mvn.w	r0, #1
 800700e:	e7f8      	b.n	8007002 <__ascii_mbtowc+0x16>

08007010 <memmove>:
 8007010:	4288      	cmp	r0, r1
 8007012:	b510      	push	{r4, lr}
 8007014:	eb01 0402 	add.w	r4, r1, r2
 8007018:	d902      	bls.n	8007020 <memmove+0x10>
 800701a:	4284      	cmp	r4, r0
 800701c:	4623      	mov	r3, r4
 800701e:	d807      	bhi.n	8007030 <memmove+0x20>
 8007020:	1e43      	subs	r3, r0, #1
 8007022:	42a1      	cmp	r1, r4
 8007024:	d008      	beq.n	8007038 <memmove+0x28>
 8007026:	f811 2b01 	ldrb.w	r2, [r1], #1
 800702a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800702e:	e7f8      	b.n	8007022 <memmove+0x12>
 8007030:	4402      	add	r2, r0
 8007032:	4601      	mov	r1, r0
 8007034:	428a      	cmp	r2, r1
 8007036:	d100      	bne.n	800703a <memmove+0x2a>
 8007038:	bd10      	pop	{r4, pc}
 800703a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800703e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007042:	e7f7      	b.n	8007034 <memmove+0x24>

08007044 <__malloc_lock>:
 8007044:	4801      	ldr	r0, [pc, #4]	; (800704c <__malloc_lock+0x8>)
 8007046:	f7fe be2c 	b.w	8005ca2 <__retarget_lock_acquire_recursive>
 800704a:	bf00      	nop
 800704c:	20003934 	.word	0x20003934

08007050 <__malloc_unlock>:
 8007050:	4801      	ldr	r0, [pc, #4]	; (8007058 <__malloc_unlock+0x8>)
 8007052:	f7fe be27 	b.w	8005ca4 <__retarget_lock_release_recursive>
 8007056:	bf00      	nop
 8007058:	20003934 	.word	0x20003934

0800705c <_realloc_r>:
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	4607      	mov	r7, r0
 8007060:	4614      	mov	r4, r2
 8007062:	460e      	mov	r6, r1
 8007064:	b921      	cbnz	r1, 8007070 <_realloc_r+0x14>
 8007066:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800706a:	4611      	mov	r1, r2
 800706c:	f7ff ba10 	b.w	8006490 <_malloc_r>
 8007070:	b922      	cbnz	r2, 800707c <_realloc_r+0x20>
 8007072:	f7ff f9bd 	bl	80063f0 <_free_r>
 8007076:	4625      	mov	r5, r4
 8007078:	4628      	mov	r0, r5
 800707a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800707c:	f000 f85c 	bl	8007138 <_malloc_usable_size_r>
 8007080:	42a0      	cmp	r0, r4
 8007082:	d20f      	bcs.n	80070a4 <_realloc_r+0x48>
 8007084:	4621      	mov	r1, r4
 8007086:	4638      	mov	r0, r7
 8007088:	f7ff fa02 	bl	8006490 <_malloc_r>
 800708c:	4605      	mov	r5, r0
 800708e:	2800      	cmp	r0, #0
 8007090:	d0f2      	beq.n	8007078 <_realloc_r+0x1c>
 8007092:	4631      	mov	r1, r6
 8007094:	4622      	mov	r2, r4
 8007096:	f7fe fe0f 	bl	8005cb8 <memcpy>
 800709a:	4631      	mov	r1, r6
 800709c:	4638      	mov	r0, r7
 800709e:	f7ff f9a7 	bl	80063f0 <_free_r>
 80070a2:	e7e9      	b.n	8007078 <_realloc_r+0x1c>
 80070a4:	4635      	mov	r5, r6
 80070a6:	e7e7      	b.n	8007078 <_realloc_r+0x1c>

080070a8 <_read_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	4d07      	ldr	r5, [pc, #28]	; (80070c8 <_read_r+0x20>)
 80070ac:	4604      	mov	r4, r0
 80070ae:	4608      	mov	r0, r1
 80070b0:	4611      	mov	r1, r2
 80070b2:	2200      	movs	r2, #0
 80070b4:	602a      	str	r2, [r5, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	f7f9 fde0 	bl	8000c7c <_read>
 80070bc:	1c43      	adds	r3, r0, #1
 80070be:	d102      	bne.n	80070c6 <_read_r+0x1e>
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	b103      	cbz	r3, 80070c6 <_read_r+0x1e>
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	bd38      	pop	{r3, r4, r5, pc}
 80070c8:	2000393c 	.word	0x2000393c

080070cc <__ascii_wctomb>:
 80070cc:	b149      	cbz	r1, 80070e2 <__ascii_wctomb+0x16>
 80070ce:	2aff      	cmp	r2, #255	; 0xff
 80070d0:	bf85      	ittet	hi
 80070d2:	238a      	movhi	r3, #138	; 0x8a
 80070d4:	6003      	strhi	r3, [r0, #0]
 80070d6:	700a      	strbls	r2, [r1, #0]
 80070d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80070dc:	bf98      	it	ls
 80070de:	2001      	movls	r0, #1
 80070e0:	4770      	bx	lr
 80070e2:	4608      	mov	r0, r1
 80070e4:	4770      	bx	lr

080070e6 <abort>:
 80070e6:	b508      	push	{r3, lr}
 80070e8:	2006      	movs	r0, #6
 80070ea:	f000 f855 	bl	8007198 <raise>
 80070ee:	2001      	movs	r0, #1
 80070f0:	f7f9 fdba 	bl	8000c68 <_exit>

080070f4 <_fstat_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4d07      	ldr	r5, [pc, #28]	; (8007114 <_fstat_r+0x20>)
 80070f8:	2300      	movs	r3, #0
 80070fa:	4604      	mov	r4, r0
 80070fc:	4608      	mov	r0, r1
 80070fe:	4611      	mov	r1, r2
 8007100:	602b      	str	r3, [r5, #0]
 8007102:	f7f9 fe00 	bl	8000d06 <_fstat>
 8007106:	1c43      	adds	r3, r0, #1
 8007108:	d102      	bne.n	8007110 <_fstat_r+0x1c>
 800710a:	682b      	ldr	r3, [r5, #0]
 800710c:	b103      	cbz	r3, 8007110 <_fstat_r+0x1c>
 800710e:	6023      	str	r3, [r4, #0]
 8007110:	bd38      	pop	{r3, r4, r5, pc}
 8007112:	bf00      	nop
 8007114:	2000393c 	.word	0x2000393c

08007118 <_isatty_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	4d06      	ldr	r5, [pc, #24]	; (8007134 <_isatty_r+0x1c>)
 800711c:	2300      	movs	r3, #0
 800711e:	4604      	mov	r4, r0
 8007120:	4608      	mov	r0, r1
 8007122:	602b      	str	r3, [r5, #0]
 8007124:	f7f9 fdff 	bl	8000d26 <_isatty>
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	d102      	bne.n	8007132 <_isatty_r+0x1a>
 800712c:	682b      	ldr	r3, [r5, #0]
 800712e:	b103      	cbz	r3, 8007132 <_isatty_r+0x1a>
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	bd38      	pop	{r3, r4, r5, pc}
 8007134:	2000393c 	.word	0x2000393c

08007138 <_malloc_usable_size_r>:
 8007138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800713c:	1f18      	subs	r0, r3, #4
 800713e:	2b00      	cmp	r3, #0
 8007140:	bfbc      	itt	lt
 8007142:	580b      	ldrlt	r3, [r1, r0]
 8007144:	18c0      	addlt	r0, r0, r3
 8007146:	4770      	bx	lr

08007148 <_raise_r>:
 8007148:	291f      	cmp	r1, #31
 800714a:	b538      	push	{r3, r4, r5, lr}
 800714c:	4604      	mov	r4, r0
 800714e:	460d      	mov	r5, r1
 8007150:	d904      	bls.n	800715c <_raise_r+0x14>
 8007152:	2316      	movs	r3, #22
 8007154:	6003      	str	r3, [r0, #0]
 8007156:	f04f 30ff 	mov.w	r0, #4294967295
 800715a:	bd38      	pop	{r3, r4, r5, pc}
 800715c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800715e:	b112      	cbz	r2, 8007166 <_raise_r+0x1e>
 8007160:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007164:	b94b      	cbnz	r3, 800717a <_raise_r+0x32>
 8007166:	4620      	mov	r0, r4
 8007168:	f000 f830 	bl	80071cc <_getpid_r>
 800716c:	462a      	mov	r2, r5
 800716e:	4601      	mov	r1, r0
 8007170:	4620      	mov	r0, r4
 8007172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007176:	f000 b817 	b.w	80071a8 <_kill_r>
 800717a:	2b01      	cmp	r3, #1
 800717c:	d00a      	beq.n	8007194 <_raise_r+0x4c>
 800717e:	1c59      	adds	r1, r3, #1
 8007180:	d103      	bne.n	800718a <_raise_r+0x42>
 8007182:	2316      	movs	r3, #22
 8007184:	6003      	str	r3, [r0, #0]
 8007186:	2001      	movs	r0, #1
 8007188:	e7e7      	b.n	800715a <_raise_r+0x12>
 800718a:	2400      	movs	r4, #0
 800718c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007190:	4628      	mov	r0, r5
 8007192:	4798      	blx	r3
 8007194:	2000      	movs	r0, #0
 8007196:	e7e0      	b.n	800715a <_raise_r+0x12>

08007198 <raise>:
 8007198:	4b02      	ldr	r3, [pc, #8]	; (80071a4 <raise+0xc>)
 800719a:	4601      	mov	r1, r0
 800719c:	6818      	ldr	r0, [r3, #0]
 800719e:	f7ff bfd3 	b.w	8007148 <_raise_r>
 80071a2:	bf00      	nop
 80071a4:	20001010 	.word	0x20001010

080071a8 <_kill_r>:
 80071a8:	b538      	push	{r3, r4, r5, lr}
 80071aa:	4d07      	ldr	r5, [pc, #28]	; (80071c8 <_kill_r+0x20>)
 80071ac:	2300      	movs	r3, #0
 80071ae:	4604      	mov	r4, r0
 80071b0:	4608      	mov	r0, r1
 80071b2:	4611      	mov	r1, r2
 80071b4:	602b      	str	r3, [r5, #0]
 80071b6:	f7f9 fd47 	bl	8000c48 <_kill>
 80071ba:	1c43      	adds	r3, r0, #1
 80071bc:	d102      	bne.n	80071c4 <_kill_r+0x1c>
 80071be:	682b      	ldr	r3, [r5, #0]
 80071c0:	b103      	cbz	r3, 80071c4 <_kill_r+0x1c>
 80071c2:	6023      	str	r3, [r4, #0]
 80071c4:	bd38      	pop	{r3, r4, r5, pc}
 80071c6:	bf00      	nop
 80071c8:	2000393c 	.word	0x2000393c

080071cc <_getpid_r>:
 80071cc:	f7f9 bd34 	b.w	8000c38 <_getpid>

080071d0 <_init>:
 80071d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d2:	bf00      	nop
 80071d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071d6:	bc08      	pop	{r3}
 80071d8:	469e      	mov	lr, r3
 80071da:	4770      	bx	lr

080071dc <_fini>:
 80071dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071de:	bf00      	nop
 80071e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071e2:	bc08      	pop	{r3}
 80071e4:	469e      	mov	lr, r3
 80071e6:	4770      	bx	lr
